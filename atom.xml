<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>msnodevLog</title>
  
  <subtitle>아직 익숙하지 않다면 두번이상 개발하는</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://msnodeve.github.io/"/>
  <updated>2020-06-21T04:17:27.807Z</updated>
  <id>https://msnodeve.github.io/</id>
  
  <author>
    <name>Myeong Seok KIM</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot Database 활용하기(3) - [Backend Framework]</title>
    <link href="https://msnodeve.github.io/2020/06/21/springboot-step03-springboot-data/"/>
    <id>https://msnodeve.github.io/2020/06/21/springboot-step03-springboot-data/</id>
    <published>2020-06-21T04:07:45.000Z</published>
    <updated>2020-06-21T04:17:27.807Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="INDEX"><a href="#INDEX" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2020/06/10/springboot-stop01-create-project-run/">Backend SpringBoot 프로젝트 생성 및 실행 해보기(1)</a></li><li><a href="https://msnodeve.github.io/2020/06/20/springboot-step02-make-rest-api/">Backend SpringBoot REST API 만들기(2)</a></li></ul><p><br><br></p><h3 id="세번째-단계-Database-연결-및-활용하기-1"><a href="#세번째-단계-Database-연결-및-활용하기-1" class="headerlink" title="세번째 단계 Database 연결 및 활용하기"></a>세번째 단계 Database 연결 및 활용하기</h3><p><br><br></p><h2 id="Branch-Name"><a href="#Branch-Name" class="headerlink" title="Branch Name"></a>Branch Name</h2><p>예제 브랜치 이름은 다음과 같습니다.<br>step03-springboot-data</p><p><br><br></p><h2 id="SpringBoot와-Database-연동을-해보자"><a href="#SpringBoot와-Database-연동을-해보자" class="headerlink" title="SpringBoot와 Database 연동을 해보자"></a>SpringBoot와 Database 연동을 해보자</h2><blockquote><p>API를 사용자에게 지속적으로 제공하기 위해서는 영속적인 저장소가 필요합니다.<br>따라서 RDBMS(Relational Database Management System)에 속하는 제품을 사용합니다.</p></blockquote><br><br><h3 id="의존성-제외-설정"><a href="#의존성-제외-설정" class="headerlink" title="의존성 제외 설정"></a>의존성 제외 설정</h3><blockquote><p>src/main/resources 폴더 밑에 <code>application.properties</code> 파일을 생성합니다.</p></blockquote><div style="text-align: center;"><img src="/image/spring/boot/example/step03/step03-1.png" width="50%">    </div><p><code>application.properties</code> 에 다음 줄을 추가합니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.main.web-environment=false</span></span><br></pre></td></tr></table></figure><p><br><br></p><p>build.gradle에 필요한 라이브러리를 추가합니다.</p><blockquote><p>버전을 다시 고쳤습니다. 복붙해주세요.</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">plugins</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">id</span> <span class="string">'java'</span></span><br><span class="line">    <span class="string">id</span> <span class="string">'org.springframework.boot'</span> <span class="string">version</span> <span class="string">'1.5.8.RELEASE'</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">ext&#123;</span></span><br><span class="line">    <span class="string">springBootVersion='1.5.8.RELEASE'</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">sourceCompatibility</span> <span class="string">=</span> <span class="number">1.8</span></span><br><span class="line"><span class="string">targetCompatibility</span> <span class="string">=</span> <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">sourceSets&#123;</span></span><br><span class="line">    <span class="string">main&#123;</span></span><br><span class="line">        <span class="string">java</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">srcDir</span> <span class="string">'src/main/java'</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">        <span class="string">resources&#123;</span></span><br><span class="line">            <span class="string">srcDir</span> <span class="string">'src/resources'</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">repositories</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">jcenter()</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">dependencies</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">compile</span> <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">    <span class="string">compile</span> <span class="string">"org.springframework.boot:spring-boot-devtools"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">compile</span> <span class="string">'org.slf4j:slf4j-api:1.7.7'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">testCompile</span> <span class="string">'junit:junit:4.12'</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'org.springframework.boot'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'spring-boot-starter-hateoas'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'2.1.5.RELEASE'</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'io.springfox'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'springfox-swagger2'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'2.9.2'</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'io.springfox'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'springfox-swagger-ui'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'2.9.2'</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'org.hsqldb'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'hsqldb'</span><span class="string">,</span> <span class="string">version:'2.3.2'</span></span><br><span class="line">    <span class="string">compile</span> <span class="string">"org.springframework.boot:spring-boot-starter-data-jpa:$&#123;springBootVersion&#125;"</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'org.hibernate'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'hibernate-validator'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'4.2.0.Final'</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'javax.el'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'javax.el-api'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'3.0.0'</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'javax.validation'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'validation-api'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'1.0.0.GA'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">//capcha</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'com.google.code.maven-play-plugin.org.playframework'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'jj-imaging'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'1.1'</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'com.google.code.maven-play-plugin.org.playframework'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'jj-simplecaptcha'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'1.1'</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>데이터 저장소로는 hsqldb를 사용하며, 이는 소형 관계형 데이터베이스 엔진의 일종으로 JDBC를 지원하고, 라이브러리 추가만으로 사용가능해서 로컬 개발시에 많이 쓰입니다.</p></blockquote><br><br><h2 id="Database-Object-Mapping"><a href="#Database-Object-Mapping" class="headerlink" title="Database Object Mapping"></a>Database Object Mapping</h2><h4 id="값-매핑"><a href="#값-매핑" class="headerlink" title="값 매핑"></a>값 매핑</h4><blockquote><p> src/main/java/seok/model 패키지 밑에 일반 사용자와 관리자 구분을 하는 UserRole.java Enum 클래스를 하나 생성합니다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> seok.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> UserRole &#123;</span><br><span class="line">    USER, <span class="comment">// 0</span></span><br><span class="line">    ADMIN <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br></p><h4 id="UserEntity-클래스를-만들어-보자"><a href="#UserEntity-클래스를-만들어-보자" class="headerlink" title="UserEntity 클래스를 만들어 보자"></a>UserEntity 클래스를 만들어 보자</h4><blockquote><p>src/main/java/seok/model 패키지 밑에 UserEntity.java 클래스를 생성합니다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> seok.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date created;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"role"</span>)</span><br><span class="line">    <span class="meta">@Enumerated</span>(EnumType.ORDINAL)</span><br><span class="line">    <span class="keyword">private</span> UserRole role;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PrePersist</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        created = <span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserEntity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserEntity</span><span class="params">(String name, Integer age, UserRole role)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.role = role;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> created;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreated</span><span class="params">(Date created)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.created = created;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"UserEntity&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", created="</span> + created +</span><br><span class="line">                <span class="string">", role="</span> + role +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Entity(데이터베이스 스키마의 내용을 자바 클래스로 표현할 수 있는 대상)</code> 어노테이션을 선언함으로써 엔티티 매니저가 관리해야 할 대상임을 명시합니다.</p><p><code>@Enumerated</code> 어노테이션 속성으로 <code>@EnumType</code>을 지정할 때, <code>ORDINAL</code>로 하면 값이 <code>int</code>로 할당 되며 <code>STRING</code>으로 지정하면 <code>ENUM의 이름</code>으로 할당 됩니다.</p><br><br><h3 id="User-Repository-인터페이스를-생성하자"><a href="#User-Repository-인터페이스를-생성하자" class="headerlink" title="User Repository 인터페이스를 생성하자"></a>User Repository 인터페이스를 생성하자</h3><blockquote><p>src/main/java/seok 패키지 밑에 repository 패키지를 생성 후, UserRepository.java 인터페이스를 생성합니다.</p></blockquote><div style="text-align: center;"><img src="/image/spring/boot/example/step03/step03-2.png" width="50%"></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> seok.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.query.Param;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> seok.model.UserEntity;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserEntity</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">UserEntity <span class="title">findByName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>필드를 검색하기 위해 다음과 같이 사용할 수 있습니다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">반환 타입 findBy 필드명(파라미터);</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="실행-결과-보기"><a href="#실행-결과-보기" class="headerlink" title="실행 결과 보기"></a>실행 결과 보기</h3><div style="text-align: center;"><img src="/image/spring/boot/example/step03/step03-3.png" width="100%">    </div><blockquote><p><code>application.properties</code> 에 spring.main.web-environment=false 를 설정해줬기 때문에 웹은 실행되지않고, 종료합니다. </p></blockquote><br><br><br><h2 id="Database-Server와-연동"><a href="#Database-Server와-연동" class="headerlink" title="Database Server와 연동"></a>Database Server와 연동</h2><h3 id="MySQL-설치"><a href="#MySQL-설치" class="headerlink" title="MySQL 설치"></a>MySQL 설치</h3><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">MySQL DB 설치하기</a> 각 환경에 맞는 서버를 설치합니다.</p><p><a href="https://dev.mysql.com/downloads/workbench/" target="_blank" rel="noopener">MySQL WorkBench</a> 도 설치하면 좋을 것 같습니다.</p><br><br><h3 id="Database-Table-생성하기"><a href="#Database-Table-생성하기" class="headerlink" title="Database, Table 생성하기"></a>Database, Table 생성하기</h3><div style="text-align: center;"><img src="/image/spring/boot/example/step03/step03-4.png" width="70%">    </div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database exam;</span><br></pre></td></tr></table></figure><p><code>exam</code> 이라는 데이터베이스를 하나 생성합니다.</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table tbl_user(</span><br><span class="line">id varchar(40) not null,</span><br><span class="line">    username varchar(45) not null,</span><br><span class="line">    password varchar(45) not null</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>user</code> 정보 테이블을 생성합니다.</p> <br> <br><h3 id="Database-Connection-Pool-HikariCP-사용하기"><a href="#Database-Connection-Pool-HikariCP-사용하기" class="headerlink" title="Database Connection Pool HikariCP 사용하기"></a>Database Connection Pool <code>HikariCP</code> 사용하기</h3><p>build.gradle 라이브러리 추가합니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">plugins</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">id</span> <span class="string">'java'</span></span><br><span class="line">    <span class="string">id</span> <span class="string">'idea'</span></span><br><span class="line">    <span class="string">id</span> <span class="string">'org.springframework.boot'</span> <span class="string">version</span> <span class="string">'1.5.8.RELEASE'</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">ext&#123;</span></span><br><span class="line">    <span class="string">springBootVersion='1.5.8.RELEASE'</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">sourceCompatibility</span> <span class="string">=</span> <span class="number">1.8</span></span><br><span class="line"><span class="string">targetCompatibility</span> <span class="string">=</span> <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">sourceSets&#123;</span></span><br><span class="line">    <span class="string">main&#123;</span></span><br><span class="line">        <span class="string">java</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">srcDir</span> <span class="string">'src/main/java'</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">        <span class="string">resources&#123;</span></span><br><span class="line">            <span class="string">srcDir</span> <span class="string">'src/resources'</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">repositories</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">jcenter()</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">dependencies</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">compile</span> <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">    <span class="string">compile</span> <span class="string">"org.springframework.boot:spring-boot-devtools"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">compile</span> <span class="string">'org.slf4j:slf4j-api:1.7.7'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">testCompile</span> <span class="string">'junit:junit:4.12'</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'org.springframework.boot'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'spring-boot-starter-hateoas'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'2.1.5.RELEASE'</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'io.springfox'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'springfox-swagger2'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'2.9.2'</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'io.springfox'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'springfox-swagger-ui'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'2.9.2'</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'org.springframework.boot'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'spring-boot-starter-jdbc'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'2.3.0.RELEASE'</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'com.zaxxer'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'HikariCP'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'2.5.1'</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'org.mybatis.spring.boot'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'mybatis-spring-boot-starter'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'1.3.0'</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'mysql'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'mysql-connector-java'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'8.0.13'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">//capcha</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'com.google.code.maven-play-plugin.org.playframework'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'jj-imaging'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'1.1'</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'com.google.code.maven-play-plugin.org.playframework'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'jj-simplecaptcha'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'1.1'</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><code>application.properties</code> 에 MySQL DB 서버 정보를 설정합니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/exam?serverTimezone=UTC&amp;useUniCode=yes&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="string">spring.datasource.username=ssafy</span></span><br><span class="line"><span class="string">spring.datasource.password=ssafy</span></span><br><span class="line"></span><br><span class="line"><span class="string">mybatis.config-location=classpath:mybatis-config.xml</span></span><br></pre></td></tr></table></figure><br><br><h3 id="Mybitis와-MySQL-연동"><a href="#Mybitis와-MySQL-연동" class="headerlink" title="Mybitis와 MySQL 연동"></a>Mybitis와 MySQL 연동</h3><blockquote><p>src/main/resources 아래 다음 파일을 생성합니다.</p></blockquote><div style="text-align: center;"><img src="/image/spring/boot/example/step03/step03-5.png" width="50%">    </div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-config.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mappers/userMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- userMapper.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span>&gt;</span></span><br><span class="line">        insert into tbl_user(id, username, password)</span><br><span class="line">        value (#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"seok.model.User"</span>&gt;</span></span><br><span class="line">        select id, username, password</span><br><span class="line">        from tbl_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">resultType</span>=<span class="string">"seok.model.User"</span>&gt;</span></span><br><span class="line">        select id, username, password</span><br><span class="line">        from tbl_user</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span>&gt;</span></span><br><span class="line">        update tbl_user</span><br><span class="line">        set username = #&#123;username&#125;, password = #&#123;password&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">        delete from tbl_user</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br><h3 id="MVC-패턴으로-패키지-구성하기"><a href="#MVC-패턴으로-패키지-구성하기" class="headerlink" title="MVC 패턴으로 패키지 구성하기"></a>MVC 패턴으로 패키지 구성하기</h3><div style="text-align: center;"><img src="/image/spring/boot/example/step03/step03-6.png" width="50%">    </div><p>위 그림과 같이 파일을 구성 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> seok.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> seok.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">select</span><span class="params">(String id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> seok.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> seok.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAPPER_NAME_SPACE = <span class="string">"user."</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSession.selectList(MAPPER_NAME_SPACE + <span class="string">"selectAll"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">select</span><span class="params">(String id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSession.selectOne(MAPPER_NAME_SPACE + <span class="string">"select"</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSession.insert(MAPPER_NAME_SPACE + <span class="string">"insertUser"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSession.update(MAPPER_NAME_SPACE + <span class="string">"update"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSession.delete(MAPPER_NAME_SPACE + <span class="string">"delete"</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> seok.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> seok.model.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllUsers</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByUserId</span><span class="params">(String id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registry</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">modify</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">remove</span><span class="params">(String id)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> seok.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> seok.model.User;</span><br><span class="line"><span class="keyword">import</span> seok.repository.UserRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllUsers</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> repository.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByUserId</span><span class="params">(String id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> repository.select(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registry</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> repository.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">modify</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> repository.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">remove</span><span class="params">(String id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> repository.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> seok.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> seok.model.User;</span><br><span class="line"><span class="keyword">import</span> seok.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/api"</span>)</span><br><span class="line"><span class="meta">@Api</span>(value=<span class="string">"msnodeve"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"모든 유저의 정보를 반환한다."</span>, response = List<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">List</span>&lt;<span class="title">User</span>&gt;&gt; <span class="title">findAllUsers</span>() </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            users = service.findAllUsers();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">null</span>, HttpStatus.NO_CONTENT);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(users, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"유저의 정보를 반환한다."</span>, response = Object<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">User</span>&gt; <span class="title">findByUserId</span>(@<span class="title">PathVariable</span> <span class="title">String</span> <span class="title">id</span>) </span>&#123;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            user = service.findByUserId(id);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">null</span>, HttpStatus.NO_CONTENT);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(user, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"유저의 정보를 입력한다."</span>, response = String<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">String</span>&gt; <span class="title">registryUser</span>(@<span class="title">RequestBody</span> <span class="title">User</span> <span class="title">user</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (service.registry(user) != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="string">"성공적으로 등록되었습니다."</span>, HttpStatus.CREATED);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="string">"등록 실패했습니다."</span>, HttpStatus.BAD_REQUEST);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="string">"등록 실패했습니다."</span>, HttpStatus.BAD_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"유저의 정보를 수정한다."</span>, response = String<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">String</span>&gt; <span class="title">modifyUser</span>(@<span class="title">RequestBody</span> <span class="title">User</span> <span class="title">user</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (service.modify(user) != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="string">"성공적으로 수정되었습니다."</span>, HttpStatus.OK);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="string">"수정 실패했습니다."</span>, HttpStatus.BAD_REQUEST);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="string">"수정 실패했습니다."</span>, HttpStatus.BAD_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"유저의 정보를 삭제한다."</span>, response = String<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">String</span>&gt; <span class="title">removeUser</span>(@<span class="title">PathVariable</span> <span class="title">String</span> <span class="title">id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (service.remove(id) != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="string">"성공적으로 삭제되었습니다."</span>, HttpStatus.OK);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="string">"삭제 실패했습니다."</span>, HttpStatus.BAD_REQUEST);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="string">"삭제 실패했습니다."</span>, HttpStatus.BAD_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><h3 id="실행해보기"><a href="#실행해보기" class="headerlink" title="실행해보기"></a>실행해보기</h3><div style="text-align: center;"><img src="/image/spring/boot/example/step03/step03-7.png" width="100%">    </div><h4 id="등록하기"><a href="#등록하기" class="headerlink" title="등록하기"></a>등록하기</h4><div style="text-align: center;"><img src="/image/spring/boot/example/step03/step03-8.png" width="100%">    </div><h4 id="DB-결과"><a href="#DB-결과" class="headerlink" title="DB 결과"></a>DB 결과</h4><div style="text-align: center;"><img src="/image/spring/boot/example/step03/step03-9.png" width="50%">    </div><p><br><br></p><h2 id="INDEX-1"><a href="#INDEX-1" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2020/06/10/springboot-stop01-create-project-run/">Backend SpringBoot 프로젝트 생성 및 실행 해보기(1)</a></li><li><a href="https://msnodeve.github.io/2020/06/20/springboot-step02-make-rest-api/">Backend SpringBoot REST API 만들기(2)</a></li></ul><p><br><br></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;세번째-단계-Database-연결-및-활용하기&quot;&gt;&lt;a href=&quot;#세번째-단계-Database-연결-및-활용하기&quot; class=&quot;headerlink&quot; title=&quot;세번째 단계 Database 연결 및 활용하기&quot;&gt;&lt;/a&gt;세번째 단계 Database 연결 및 활용하기&lt;/h3&gt;&lt;p&gt;이번 포스트에서는 Database 연결 및 MyBatis 활용에 대해서 알아 보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Database&lt;/code&gt; &lt;code&gt;MyBatis&lt;/code&gt; &lt;code&gt;SpringBoot&lt;/code&gt; &lt;code&gt;MySQL&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="backend" scheme="https://msnodeve.github.io/categories/backend/"/>
    
      <category term="framework" scheme="https://msnodeve.github.io/categories/backend/framework/"/>
    
      <category term="spring" scheme="https://msnodeve.github.io/categories/backend/framework/spring/"/>
    
      <category term="springboot" scheme="https://msnodeve.github.io/categories/backend/framework/spring/springboot/"/>
    
      <category term="database" scheme="https://msnodeve.github.io/categories/backend/framework/spring/springboot/database/"/>
    
    
      <category term="Backend" scheme="https://msnodeve.github.io/tags/backend/"/>
    
      <category term="Framework" scheme="https://msnodeve.github.io/tags/framework/"/>
    
      <category term="Spring" scheme="https://msnodeve.github.io/tags/spring/"/>
    
      <category term="SpringBoot" scheme="https://msnodeve.github.io/tags/springboot/"/>
    
      <category term="Database" scheme="https://msnodeve.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot REST API 만들기(2) - [Backend Framework]</title>
    <link href="https://msnodeve.github.io/2020/06/20/springboot-step02-make-rest-api/"/>
    <id>https://msnodeve.github.io/2020/06/20/springboot-step02-make-rest-api/</id>
    <published>2020-06-20T10:03:02.000Z</published>
    <updated>2020-06-22T01:50:51.596Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="INDEX"><a href="#INDEX" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2020/06/10/springboot-stop01-create-project-run/">Backend SpringBoot 프로젝트 생성 및 실행 해보기(1)</a></li><li><a href="https://msnodeve.github.io/2020/06/21/springboot-step03-springboot-data/">Backend SpringBoot Database 활용하기(3)</a></li></ul><p><br><br></p><h3 id="두번째-단계-Make-REST-API"><a href="#두번째-단계-Make-REST-API" class="headerlink" title="두번째 단계 Make REST API"></a>두번째 단계 Make REST API</h3><p><br><br></p><h2 id="Branch-Name"><a href="#Branch-Name" class="headerlink" title="Branch Name"></a>Branch Name</h2><p>예제 브랜치 이름은 다음과 같습니다.<br>step02-make-rest-api</p><p><br><br></p><h2 id="REST의-특성"><a href="#REST의-특성" class="headerlink" title="REST의 특성"></a>REST의 특성</h2><ul><li><code>클라이언트/서버</code> 클라이언트와 서버가 서로 독립적으로 구분 되어야 한다. 또한 서버 또는 클라이언트 증설 시 서로간의 의존성 때문에 확장에 문제가 되서는 안된다.</li><li><code>상태 없음</code> 서버는 클라이언트의 상태를 기억할 필요가 없다.</li><li><code>레이어드 아키텍처</code> 다계층 형태로 레이어를 추가하거나 수정, 제거 할 수 있고 확장성이 있어야한다.</li><li><code>캐시</code> 클라이언트가 캐시를 통해서 응답을 재사용 하여 이를 통해 서버의 부하를 낮춰 서버의 성능이 향상 될 수 있다.</li><li><code>코드 온 디멘드</code> 요청이 오면 코드를 준다.</li></ul><br><h2 id="REST-인터페이스-규칙"><a href="#REST-인터페이스-규칙" class="headerlink" title="REST 인터페이스 규칙"></a>REST 인터페이스 규칙</h2><ul><li><code>리소스 식별</code> 웹 안에서 URI와 같은 고유 식별자를 통해 표현한다.</li><li><code>표현을 통한 리소스 처리</code> JSON, XML, HTML 페이지와 같이 다양한 유형으로 표현 할 수 있다.</li><li><code>자기 묘사 메세지</code> HTTP 통신 할 때 Http header에 메타 데이터 정보를 추가해서 실제 데이터와는 관련 없지만 데이터에 대한 설명을 나타내는 정보를 담을 수 있다.</li><li><code>애플리케이션 상태 하이퍼미디어(HATEOAS)</code> REST API를 개발할 때도 단순히 데이터만 전달하는 것이 아닌 링크 정보까지 포함한다.</li></ul><p><br><br></p><h2 id="REST-API-만들기"><a href="#REST-API-만들기" class="headerlink" title="REST API 만들기"></a>REST API 만들기</h2><h3 id="모델-클래스-만들기"><a href="#모델-클래스-만들기" class="headerlink" title="모델 클래스 만들기"></a>모델 클래스 만들기</h3><p>데이터를 담을 수 있는 클래스를 만듭니다.</p><blockquote><p>src/main/java/seok/model 경로를 만들고, 그 밑에 Todo.java 를 생성</p></blockquote><br><br><p>Todo.java 내용은 다음과 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> seok.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Todo</span><span class="params">(<span class="keyword">int</span> id, String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="컨트롤러-클래스-만들기"><a href="#컨트롤러-클래스-만들기" class="headerlink" title="컨트롤러 클래스 만들기"></a>컨트롤러 클래스 만들기</h3><p>URL을 요청하면 Todo 클래스의 인스턴스를 생성해 JSON으로 보여줄 수 있는 컨트롤러를 만듭니다.</p><blockquote><p>src/main/java/seok/controller 경로 밑에 TodoController.java 를 생성</p></blockquote><p>TodoController.java 내용은 다음과 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> seok.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> seok.model.Todo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/todo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger counter = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/todo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Todo <span class="title">todo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Todo(counter.incrementAndGet(), <span class="string">"코딩하기"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AtomicInteger</code>는 Atomic(더 이상 쪼개질 수 없는 성질)을 의미하며, 단순히 Integer 타입으로 선언한다면 서로 다른 Thread 에서 하나의 변수에 대해 값을 쓰거나 읽기 때문에 문제가 발생할 수 있지만, <code>AtomicInteger</code>를 쓰므로 <code>Thread-safe</code> 하게 처리가 가능합니다.</p><p><br><br></p><h3 id="실행해보기"><a href="#실행해보기" class="headerlink" title="실행해보기"></a>실행해보기</h3><p>localhost:8080/todo/todo 를 계속 호출해보면 호출 할 때마다 숫자가 정상적으로 증가하는 것을 확인 할 수 있습니다.</p><div style="text-align: center;"><img src="/image/spring/boot/example/step02/step02-1.png" width="100%"></div><div style="text-align: center;"><img src="/image/spring/boot/example/step02/step02-2.png" width="100%"></div><h2 id="REST-API에서-HTTP-Method-사용"><a href="#REST-API에서-HTTP-Method-사용" class="headerlink" title="REST API에서 HTTP Method 사용"></a>REST API에서 HTTP Method 사용</h2><h3 id="컨트롤러-메서드에-POST-매핑"><a href="#컨트롤러-메서드에-POST-매핑" class="headerlink" title="컨트롤러 메서드에 POST 매핑"></a>컨트롤러 메서드에 POST 매핑</h3><p>TodoController.java 에 POST 메서드를 만듭니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/todo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Todo <span class="title">registryTodo</span><span class="params">(@RequestParam(value=<span class="string">"todoTitle"</span>)</span> String todoTitle)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Todo(counter.incrementAndGet(), todoTitle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/todo/todo</code>를 엔드 포인트로 합니다.</p><p>GET은 Body 가 없어서 URL을 직접 호출 할 수 있지만, POST는 요청의 몸체가 되므로 도구를 사용해서 테스트 해봐야합니다.</p><p>여기서는 <code>Postman</code>를 사용하도록 하겠습니다.</p><p><a href="https://www.postman.com/downloads/" target="_blank" rel="noopener">Postman 설치하기</a></p><div style="text-align: center;"><img src="/image/spring/boot/example/step02/step02-3.png" width="100%"></div><p>위와 같이 실행하면 결과값을 받아 볼 수 있습니다.</p><p><br><br></p><h3 id="응답-헤더-활용하기"><a href="#응답-헤더-활용하기" class="headerlink" title="응답 헤더 활용하기"></a>응답 헤더 활용하기</h3><p>ResponseEntity 클래스는 HttpEntity를 상속받은 클래스로 Http 응답에 대한 상태값을 표현 할 수 있습니다.</p><p>TodoController.java 에 다음 코드를 추가합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/todo/response"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;Todo&gt; <span class="title">postRegistryTodo</span><span class="params">(@RequestParam String todoTitle)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> Todo(counter.incrementAndGet(), todoTitle), HttpStatus.CREATED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div style="text-align: center;"><img src="/image/spring/boot/example/step02/step02-4.png" width="100%"></div><p>결과를 받아보면 <code>Status: 201 Created</code> 라는 결과를 받아 볼 수 있습니다.</p><p><br><br></p><h2 id="HATEOAS를-사용한-URI-정보-표현하기"><a href="#HATEOAS를-사용한-URI-정보-표현하기" class="headerlink" title="HATEOAS를 사용한 URI 정보 표현하기"></a>HATEOAS를 사용한 URI 정보 표현하기</h2><h3 id="HATEOAS-설정"><a href="#HATEOAS-설정" class="headerlink" title="HATEOAS 설정"></a>HATEOAS 설정</h3><p>build.gradle 파일에 다음 라이브러리를 추가합니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">dependencies</span> <span class="string">&#123;</span></span><br><span class="line"><span class="string">compile</span> <span class="string">'org.springframework.boot:spring-boot-starter-hateoas'</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><br><br><p><code>ResourceSupport</code> 클래스를 상속받을 모델 클래스 <code>TodoResource.java</code>를 만들도록 하겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> seok.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.hateoas.ResourceSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoResource</span> <span class="keyword">extends</span> <span class="title">ResourceSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TodoResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TodoResource</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br></p><p><code>Controller</code>에 다음을 추가하도록 하겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/todo/hateoas"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;TodoResource&gt; <span class="title">resourceResponseEntity</span><span class="params">(@RequestParam String todoTitle)</span></span>&#123;</span><br><span class="line">    TodoResource todoResource = <span class="keyword">new</span> TodoResource(todoTitle);</span><br><span class="line">    todoResource.add(linkTo(methodOn(TodoController<span class="class">.<span class="keyword">class</span>).<span class="title">resourceResponseEntity</span>(<span class="title">todoTitle</span>)).<span class="title">withSelfRel</span>())</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(todoResource, HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>todoResource 인스턴스를 생성한 후에 링크 정보 추가를 위해서 linkTo 메서드로 TodoController 클래스의 resourceResponseEntity 메서드를 매핑후, withSelfRel 메서드를 이용해 URL 정보를 만들고 add메서드로 정보를 추가했습니다.</p></blockquote><p>결과는 다음과 같습니다.</p><div style="text-align: center;"><img src="/image/spring/boot/example/step02/step02-5.png" width="100%"></div><h2 id="REST-API-문서화"><a href="#REST-API-문서화" class="headerlink" title="REST API 문서화"></a>REST API 문서화</h2><blockquote><p>API를 제공하려면 가이드 문서 제공이 필수적인데, 개발할 때 마다 별도의 문서를 작성하고 업데이트하는 것은 비용이 많이 듭니다. 따라서 <code>Swagger</code> 를 이용해서 API를 설명하는 페이지를 자동 생성하는 방법을 알아 보도록 하겠습니다.</p></blockquote><h3 id="Swagger-라이브러리-추가"><a href="#Swagger-라이브러리-추가" class="headerlink" title="Swagger 라이브러리 추가"></a>Swagger 라이브러리 추가</h3><p>build.gradle에 <code>springfox-swagger2</code>, <code>springfox-swagger-ui</code>을 추가합니다.</p><blockquote><p><code>dependencies</code>의 라이브러리들을 최신, 가장많이 사용하는 라이브러리들로 좀 교체했습니다.<br>build.gradle의 전체 내용은 다음과 같습니다.</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">plugins</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">id</span> <span class="string">'java'</span></span><br><span class="line">    <span class="string">id</span> <span class="string">'org.springframework.boot'</span> <span class="string">version</span> <span class="string">'2.2.2.RELEASE'</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">ext&#123;</span></span><br><span class="line">    <span class="string">springBootVersion='2.2.2.RELEASE'</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">sourceCompatibility</span> <span class="string">=</span> <span class="number">1.8</span></span><br><span class="line"><span class="string">targetCompatibility</span> <span class="string">=</span> <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">sourceSets&#123;</span></span><br><span class="line">    <span class="string">main&#123;</span></span><br><span class="line">        <span class="string">java</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">srcDir</span> <span class="string">'src/main/java'</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">        <span class="string">resources&#123;</span></span><br><span class="line">            <span class="string">srcDir</span> <span class="string">'src/resources'</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">repositories</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">jcenter()</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">dependencies</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'org.springframework.boot'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'spring-boot-starter-web'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'2.2.2.RELEASE'</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'org.springframework.boot'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'spring-boot-devtools'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'2.0.4.RELEASE'</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'org.springframework.boot'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'spring-boot-starter-hateoas'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'2.1.5.RELEASE'</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'io.springfox'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'springfox-swagger2'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'2.9.2'</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'io.springfox'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'springfox-swagger-ui'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'2.9.2'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">compile</span> <span class="string">'org.slf4j:slf4j-api:1.7.7'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">testCompile</span> <span class="string">'junit:junit:4.12'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">//capcha</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'com.google.code.maven-play-plugin.org.playframework'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'jj-imaging'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'1.1'</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'com.google.code.maven-play-plugin.org.playframework'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'jj-simplecaptcha'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'1.1'</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="SwaggerConfiguration-클래스-만들기"><a href="#SwaggerConfiguration-클래스-만들기" class="headerlink" title="SwaggerConfiguration 클래스 만들기"></a>SwaggerConfiguration 클래스 만들기</h3><blockquote><p>src/main/java/seok/configuration 패키지 생성 후 SwaggerConfiguration.java 클래스를 생성합니다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> seok.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Predicate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.google.common.base.Predicates.or;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> springfox.documentation.builders.PathSelectors.regex;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">postsApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"public-api"</span>)</span><br><span class="line">                .apiInfo(apiInfo()).select().paths(postPaths()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Predicate&lt;String&gt; <span class="title">postPaths</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> or(regex(<span class="string">"/todo/.*"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder().title(<span class="string">"TODO API"</span>)</span><br><span class="line">                .description(<span class="string">"Todo REST API 개발 문서"</span>)</span><br><span class="line">                .license(<span class="string">"msnodeve License"</span>)</span><br><span class="line">                .licenseUrl(<span class="string">"msnodeve@gmail.com"</span>).version(<span class="string">"1.0"</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Predicate&lt;String&gt; <span class="title">postPaths</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> or(regex(<span class="string">"/todo/.*"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 부분은 컨트롤러의 기본 URI 가 todo로 시작하기 때문에 /todo만 인식하도록 설정을 추가한 것 입니다.</p><p><br><br></p><h3 id="실행해보기-1"><a href="#실행해보기-1" class="headerlink" title="실행해보기"></a>실행해보기</h3><p><a href="http://localhost:8080/swagger-ui.html#/" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html#/</a> 로 접속을 해보면 지금까지 작성해온 API가 UI로 표시되는 모습을 확인 할 수 있습니다.</p><div style="text-align: center;"><img src="/image/spring/boot/example/step02/step02-6.png" width="100%"></div><p>각  메서드의 별도 동작은 한번씩 작동 시켜보길 바랍니다.</p><br><br><h2 id="INDEX-1"><a href="#INDEX-1" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2020/06/10/springboot-stop01-create-project-run/">Backend SpringBoot 프로젝트 생성 및 실행 해보기(1)</a></li><li><a href="https://msnodeve.github.io/2020/06/21/springboot-step03-springboot-data/">Backend SpringBoot Database 활용하기(3)</a><br><br><br></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;두번째-단계-REST-API-만들기&quot;&gt;&lt;a href=&quot;#두번째-단계-REST-API-만들기&quot; class=&quot;headerlink&quot; title=&quot;두번째 단계 REST API 만들기&quot;&gt;&lt;/a&gt;두번째 단계 REST API 만들기&lt;/h3&gt;&lt;p&gt;이번 포스트에서는 REST API를 만드는 방법을 알아 보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;스프링부트&lt;/code&gt; &lt;code&gt;SpringBoot&lt;/code&gt; &lt;code&gt;IntelliJ&lt;/code&gt; &lt;code&gt;Framework&lt;/code&gt; &lt;code&gt;REST API&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="backend" scheme="https://msnodeve.github.io/categories/backend/"/>
    
      <category term="framework" scheme="https://msnodeve.github.io/categories/backend/framework/"/>
    
      <category term="spring" scheme="https://msnodeve.github.io/categories/backend/framework/spring/"/>
    
      <category term="springboot" scheme="https://msnodeve.github.io/categories/backend/framework/spring/springboot/"/>
    
    
      <category term="Backend" scheme="https://msnodeve.github.io/tags/backend/"/>
    
      <category term="Framework" scheme="https://msnodeve.github.io/tags/framework/"/>
    
      <category term="Spring" scheme="https://msnodeve.github.io/tags/spring/"/>
    
      <category term="SpringBoot" scheme="https://msnodeve.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 프로젝트 생성 및 실행 해보기(1) - [Backend Framework]</title>
    <link href="https://msnodeve.github.io/2020/06/10/springboot-stop01-create-project-run/"/>
    <id>https://msnodeve.github.io/2020/06/10/springboot-stop01-create-project-run/</id>
    <published>2020-06-10T12:07:48.000Z</published>
    <updated>2020-06-22T01:50:39.991Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="INDEX"><a href="#INDEX" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2020/06/20/springboot-step02-make-rest-api/">Backend SpringBoot REST API 만들기(2)</a></li><li><a href="https://msnodeve.github.io/2020/06/21/springboot-step03-springboot-data/">Backend SpringBoot Database 활용하기(3)</a></li></ul><p><br><br></p><h3 id="첫번째-단계-Make-Project"><a href="#첫번째-단계-Make-Project" class="headerlink" title="첫번째 단계 Make Project"></a>첫번째 단계 Make Project</h3><p><br><br></p><h2 id="Branch-Name"><a href="#Branch-Name" class="headerlink" title="Branch Name"></a>Branch Name</h2><p>예제 브랜치 이름은 다음과 같습니다.<br>step01-make-project</p><p><br><br></p><h2 id="1-IntelliJ로-Spring-Boot-프로젝트-만들기"><a href="#1-IntelliJ로-Spring-Boot-프로젝트-만들기" class="headerlink" title="1. IntelliJ로 Spring Boot 프로젝트 만들기"></a>1. IntelliJ로 Spring Boot 프로젝트 만들기</h2><div style="text-align: center;"><img src="/image/spring/boot/example/step01/step01-1.png" width="100%"></div><blockquote><p>file → New → Project 를 클릭해서 새로운 프로젝트를 생성</p></blockquote><p><br><br></p><div style="text-align: center;"><img src="/image/spring/boot/example/step01/step01-2.png" width="100%"></div><blockquote><p>New Project의 유형 중에서 Gradle을 선택하고 Next 버튼을 클릭</p></blockquote><p><br><br></p><div style="text-align: center;"><img src="/image/spring/boot/example/step01/step01-3.png" width="100%"></div><blockquote><p>프로젝트 이름과 프로젝트가 저장될 로컬 디렉터리, 패키지명 지정</p></blockquote><p><br><br></p><div style="text-align: center;"><img src="/image/spring/boot/example/step01/step01-4.png" width="100%"></div><blockquote><p><code>Ok, apply suggestion!</code> 을 클릭</p></blockquote><p><br><br><br><br><br></p><h2 id="2-Spring-Boot에-대한-이해"><a href="#2-Spring-Boot에-대한-이해" class="headerlink" title="2. Spring Boot에 대한 이해"></a>2. Spring Boot에 대한 이해</h2><p>자바 기반에서 개발을 진행할 때 결과 파일 포맷은 크게 두 가지로 구분하며 로컬에서 실행되는 JAR, 웹 애플리케이션 컨테이너에서 실행되는 WAR입니다.</p><p><br><br></p><h3 id="Spring-Boot에서-웹-자원들을-실행하기-위한-규약"><a href="#Spring-Boot에서-웹-자원들을-실행하기-위한-규약" class="headerlink" title="Spring Boot에서 웹 자원들을 실행하기 위한 규약"></a>Spring Boot에서 웹 자원들을 실행하기 위한 규약</h3><p><br><br></p><div style="text-align: center;"><img src="/image/spring/boot/example/step01/step01-5.png" width="100%"></div><blockquote><p>위와 같이 폴더를 생성</p></blockquote><p>웹 자원들을 각 규약에 맞는 곳에 두면  웹을 위한 별도의 폴더를 만들지 않고 사용이 가능합니다.</p><p><br><br></p><h3 id="Gradle을-이용한-Spring-Boot-설정"><a href="#Gradle을-이용한-Spring-Boot-설정" class="headerlink" title="Gradle을 이용한 Spring Boot 설정"></a>Gradle을 이용한 Spring Boot 설정</h3><p>build.gradle 파일에서 Spring Boot 플러그인을 사용 할 수 있도록 설정하는데, 여기서 의존성을 추가하도록 합니다.</p><p>build.gradle 파일의 전체 내용은 다음과 같습니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">plugins</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">id</span> <span class="string">'java'</span></span><br><span class="line">    <span class="string">id</span> <span class="string">'org.springframework.boot'</span> <span class="string">version</span> <span class="string">'1.5.8.RELEASE'</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">ext&#123;</span></span><br><span class="line">    <span class="string">springBootVersion='1.5.8.RELEASE'</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">sourceCompatibility</span> <span class="string">=</span> <span class="number">1.8</span></span><br><span class="line"><span class="string">targetCompatibility</span> <span class="string">=</span> <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line"><span class="string">sourceSets&#123;</span></span><br><span class="line">    <span class="string">main&#123;</span></span><br><span class="line">        <span class="string">java</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">srcDir</span> <span class="string">'src/main/java'</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">        <span class="string">resources&#123;</span></span><br><span class="line">            <span class="string">srcDir</span> <span class="string">'src/resources'</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">repositories</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">jcenter()</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">dependencies</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">compile</span> <span class="string">'org.springframework.boot:spring-boot-starter-web'</span></span><br><span class="line">    <span class="string">compile</span> <span class="string">"org.springframework.boot:spring-boot-starter-thymeleaf"</span></span><br><span class="line">    <span class="string">compile</span> <span class="string">"org.springframework.boot:spring-boot-devtools"</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'org.webjars'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'webjars-locator'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'0.32'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">compile</span> <span class="string">'org.webjars:jquery:3.1.0'</span></span><br><span class="line">    <span class="string">compile</span> <span class="string">'org.webjars:bootstrap:3.3.1'</span></span><br><span class="line">    <span class="string">compile</span> <span class="string">'org.webjars:materializecss:0.96.0'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">compile</span> <span class="string">'org.slf4j:slf4j-api:1.7.7'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">testCompile</span> <span class="string">'junit:junit:4.12'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">//capcha</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'com.google.code.maven-play-plugin.org.playframework'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'jj-imaging'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'1.1'</span></span><br><span class="line">    <span class="attr">compile group:</span> <span class="string">'com.google.code.maven-play-plugin.org.playframework'</span><span class="string">,</span> <span class="attr">name:</span> <span class="string">'jj-simplecaptcha'</span><span class="string">,</span> <span class="attr">version:</span> <span class="string">'1.1'</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="Controller-만들기"><a href="#Controller-만들기" class="headerlink" title="Controller 만들기"></a>Controller 만들기</h3><div style="text-align: center;"><img src="/image/spring/boot/example/step01/step01-6.png" width="100%"></div><blockquote><p>src/main/java/seok/controller 경로를 만들고, 그 밑에 HomeController.java 를 생성</p></blockquote><p><br><br></p><p>HomeController.java의 전체는 다음과 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> seok.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>배포 시에 root-context를 <code>/</code> 로 설정할 것이므로 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 을 입력 했을 때 hello 가 출력되도록 합니다.</p><p><br><br></p><h3 id="Controller를-사용하는-Main-클래스-만들기"><a href="#Controller를-사용하는-Main-클래스-만들기" class="headerlink" title="Controller를 사용하는 Main 클래스 만들기"></a>Controller를 사용하는 Main 클래스 만들기</h3><div style="text-align: center;"><img src="/image/spring/boot/example/step01/step01-7.png" width="100%"></div><blockquote><p>src/main/java/seok 경로 아래에 Main 클래스를 생성</p></blockquote><p><br><br></p><p><a href="http://springbootapimainapplication.java" target="_blank" rel="noopener">SpringBootApiMainApplication.java</a> 의 전체 내용은 다음과 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> seok;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootApiMainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootApiMainApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>@SpringBootApplication 어노테이션의 역할</p><ul><li>@ComponentScan(basePadkages = “seok.controller”)</li><li>@Configuration</li><li>@EnableAutoConfiguration</li></ul><p>의 세 가지 어노테이션을 @SpringBootApplication 어노테이션으로 대체 할 수 있습니다.</p><p><br><br></p><h3 id="실행하는-방법-2가지"><a href="#실행하는-방법-2가지" class="headerlink" title="실행하는 방법 2가지"></a>실행하는 방법 2가지</h3><div style="text-align: center;"><img src="/image/spring/boot/example/step01/step01-8.png" width="100%"></div><blockquote><p><a href="http://springbootapimainapplication.java" target="_blank" rel="noopener">SpringBootApiMainApplication.java</a> 를 우클릭 하고 <code>Run</code></p></blockquote><br><div style="text-align: center;"><img src="/image/spring/boot/example/step01/step01-9.png" width="100%"></div><blockquote><p>Terminal 탭을 열어 <code>./gradlew bootRun</code> 명령어 실행</p></blockquote><p>(참고로 해당 terminal은 git bash로 실행 중)</p><p><br><br></p><p>실행하게 되면 다음과 같은 로그를 볼 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">오후 7:01:11: Executing task &#39;SpringBootApiMainApplication.main()&#39;...</span><br><span class="line"></span><br><span class="line">&gt; Task :compileJava UP-TO-DATE</span><br><span class="line">&gt; Task :processResources NO-SOURCE</span><br><span class="line">&gt; Task :classes UP-TO-DATE</span><br><span class="line"></span><br><span class="line">&gt; Task :SpringBootApiMainApplication.main()</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> &#x2F;\\ &#x2F; ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#39;_ | &#39;_| | &#39;_ \&#x2F; _&#96; | \ \ \ \</span><br><span class="line"> \\&#x2F;  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#39;  |____| .__|_| |_|_| |_\__, | &#x2F; &#x2F; &#x2F; &#x2F;</span><br><span class="line"> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|_|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|___&#x2F;&#x3D;&#x2F;_&#x2F;_&#x2F;_&#x2F;</span><br><span class="line"> :: Spring Boot ::        (v1.5.8.RELEASE)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">2020-06-06 19:01:17.135  INFO 18752 --- [  restartedMain] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup</span><br><span class="line">2020-06-06 19:01:17.203  INFO 18752 --- [  restartedMain] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)</span><br><span class="line">2020-06-06 19:01:17.208  INFO 18752 --- [  restartedMain] seok.SpringBootApiMainApplication        : Started SpringBootApiMainApplication in 3.963 seconds (JVM running for 4.709)</span><br></pre></td></tr></table></figure><p>이제 브라우저를 열어 <a href="http://localhost:8080" target="_blank" rel="noopener">localhost:8080</a> 을 입력해봅니다.</p><div style="text-align: center;"><img src="/image/spring/boot/example/step01/step01-10.png" width="100%"></div><br><br><h2 id="INDEX-1"><a href="#INDEX-1" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2020/06/20/springboot-step02-make-rest-api/">Backend SpringBoot REST API 만들기(2)</a></li><li><a href="https://msnodeve.github.io/2020/06/21/springboot-step03-springboot-data/">Backend SpringBoot Database 활용하기(3)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;첫번째-단계-프로젝트-생성하기&quot;&gt;&lt;a href=&quot;#첫번째-단계-프로젝트-생성하기&quot; class=&quot;headerlink&quot; title=&quot;첫번째 단계 프로젝트 생성하기&quot;&gt;&lt;/a&gt;첫번째 단계 프로젝트 생성하기&lt;/h3&gt;&lt;p&gt;이번 포스트에서는 IntelliJ 개발환경에서 SpringBoot Framework 프로젝트를 생성하고 실행해보는 시간을 가져 보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;스프링부트&lt;/code&gt; &lt;code&gt;SpringBoot&lt;/code&gt; &lt;code&gt;IntelliJ&lt;/code&gt; &lt;code&gt;Framework&lt;/code&gt; &lt;code&gt;프로젝트 생성하는 방법!&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="backend" scheme="https://msnodeve.github.io/categories/backend/"/>
    
      <category term="framework" scheme="https://msnodeve.github.io/categories/backend/framework/"/>
    
      <category term="spring" scheme="https://msnodeve.github.io/categories/backend/framework/spring/"/>
    
      <category term="springboot" scheme="https://msnodeve.github.io/categories/backend/framework/spring/springboot/"/>
    
    
      <category term="Backend" scheme="https://msnodeve.github.io/tags/backend/"/>
    
      <category term="Framework" scheme="https://msnodeve.github.io/tags/framework/"/>
    
      <category term="Spring" scheme="https://msnodeve.github.io/tags/spring/"/>
    
      <category term="SpringBoot" scheme="https://msnodeve.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>LIS(최장 증가 수열) - [Algorithm Skill]</title>
    <link href="https://msnodeve.github.io/2020/05/24/algorithm-lis/"/>
    <id>https://msnodeve.github.io/2020/05/24/algorithm-lis/</id>
    <published>2020-05-24T03:36:30.000Z</published>
    <updated>2020-05-24T08:04:24.158Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h5 id="알고리즘의-기본적인-스킬을-다룹니다-1"><a href="#알고리즘의-기본적인-스킬을-다룹니다-1" class="headerlink" title="알고리즘의 기본적인 스킬을 다룹니다."></a>알고리즘의 기본적인 스킬을 다룹니다.</h5><p>이번 포스트에서는 알고리즘의 스킬 중 LIS(최장 증가 수열)에 대해서 알아 보려고 합니다.<br>목차는 다음과 같습니다.</p><p><a href="#LIS">1. 최장 증가 수열이란?</a><br><a href="#경로-구하기">2. 최장 증가 수열의 경로는?</a><br><a href="#Binary-Search를-통해-LIS-찾기">3. 이진탐색을 통해 최장 증가 수열 찾기</a><br><a href="#경로-구하기-이진탐색">4. 이진탐색을 통해 최장 증가 수열의 경로는?</a><br><br></p><h2 id="LIS"><a href="#LIS" class="headerlink" title="LIS"></a>LIS</h2><hr><p>LIS란 <code>Longest Increasing Subsequence</code> 최장 증가 수열이라고 말하며, 이는 어떤 수열이 나열 되어있을때, 그 배열의 순서를 유지하며 <code>크기가 점차 커지는</code> 가장 긴 부분수열의 길이가 몇인지를 구하는 알고리즘이라고 할 수 있습니다.</p><p>무슨 말인지 예를 들어서 한번 보도록 하겠습니다.</p><p>3, 2, 6, 4, 5, 1<br>위와 같은 수열이 있다고 가정하겠습니다.</p><p>이때 최장 증가 수열은 무엇일까요? 왼쪽에서 오른쪽으로 확인해보며 봤을 경우,<br><code>3, 4, 5</code> 또는 <code>2, 4, 5</code> 가 점차적으로 증가하며 부분 수열인 것을 확인 할 수 있습니다.</p><p>그럼 이 부분 수열을 과연 어떻게 구할 수 있을까요? 한번 코드로 확인해보도록 하겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LIS_DP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] list = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] LIS = <span class="keyword">new</span> <span class="keyword">int</span>[list.length]; <span class="comment">// i 번째 숫자를 마지막 숫자로 사용할 경우 최장 증가 수열의 길이를 저장할 배열</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LIS.length; i++) &#123;</span><br><span class="line">            LIS[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (list[j] &lt; list[i] &amp;&amp; LIS[i] &lt; LIS[j] + <span class="number">1</span>)&#123;</span><br><span class="line">                    LIS[i] = LIS[j] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(LIS));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 최대 값을 찾기</span></span><br><span class="line">        <span class="keyword">int</span> maxLISIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LIS.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(LIS[maxLISIndex] &lt; LIS[i])&#123;</span><br><span class="line">                maxLISIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"최장 증가 수열의 길이 : "</span> + LIS[maxLISIndex]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h4 id="핵심코드는-이-부분-입니다"><a href="#핵심코드는-이-부분-입니다" class="headerlink" title="핵심코드는 이 부분 입니다."></a>핵심코드는 이 부분 입니다.</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LIS.length; i++) &#123;</span><br><span class="line">    LIS[i] = <span class="number">1</span>; <span class="comment">// 모든 배열을 값을 1로 초기화</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123; <span class="comment">// 내 앞의 숫자 중에 작은 숫자들을 찾기</span></span><br><span class="line">        <span class="keyword">if</span> (list[j] &lt; list[i] &amp;&amp; LIS[i] &lt; LIS[j] + <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 나를 기준으로 내앞의 원소가 작으며,</span></span><br><span class="line">            <span class="comment">// 내가 들고있는 최장 증가 수열의 길이보다 그 값(+1)을 넣은 값이 크다면</span></span><br><span class="line">            LIS[i] = LIS[j] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 코드를 해석하자면 다음과 같이 나타 낼 수 있습니다.</p><blockquote><p>주어진 수열<br>{ 3, 2, 6, 4, 5 ,1 }</p></blockquote><table><thead><tr><th>LIS(1)</th><th>LIS(2)</th><th>LIS(3)</th><th>LIS(4)</th><th>LIS(5)</th><th>LIS(6)</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>2</td><td>2</td><td>3</td><td>1</td></tr><tr><td>{3}</td><td>{2}</td><td>{3, 6}</td><td>{3, 4}</td><td>{3, 4, 5}</td><td>{1}</td></tr><tr><td>{3}</td><td>{2}</td><td>{2, 6}</td><td>{2, 4}</td><td>{2, 4, 5}</td><td>{1}</td></tr></tbody></table><p>따라서 최장 증가 수열의 제일 긴 길이는 <code>LIS(5)의 3</code>이라고 볼 수 있습니다.<br><br><br></p><h2 id="경로-구하기"><a href="#경로-구하기" class="headerlink" title="경로 구하기"></a>경로 구하기</h2><hr><p>그렇다면 그 최장 증가 수열에서의 경로는 어떻게 구할까요?</p><p>코드를 한번 보도록 하겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LIS_DP_Path</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] list = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] LIS = <span class="keyword">new</span> <span class="keyword">int</span>[list.length]; <span class="comment">// i 번째 숫자를 마지막 숫자로 사용할 경우 최장 증가 수열의 길이를 저장할 배열</span></span><br><span class="line">        <span class="keyword">int</span>[] path = <span class="keyword">new</span> <span class="keyword">int</span>[list.length]; <span class="comment">// 경로를 역추적 할 배열</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LIS.length; i++) &#123;</span><br><span class="line">            LIS[i] = <span class="number">1</span>; <span class="comment">// 모든 배열을 값을 1로 초기화</span></span><br><span class="line">            path[i] = -<span class="number">1</span>; <span class="comment">// 내 앞의 수열 숫자의 index</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123; <span class="comment">// 내 앞의 숫자 중에 작은 숫자들을 찾기</span></span><br><span class="line">                <span class="keyword">if</span> (list[j] &lt; list[i] &amp;&amp; LIS[i] &lt; LIS[j] + <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 나를 기준으로 내앞의 원소가 작으며,</span></span><br><span class="line">                    <span class="comment">// 내가 들고있는 최장 증가 수열의 길이보다 그 값(+1)을 넣은 값이 크다면</span></span><br><span class="line">                    LIS[i] = LIS[j] + <span class="number">1</span>;</span><br><span class="line">                    path[i] = j; <span class="comment">// 내 앞 수열을 찾았기 때문에 그 index 저장</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"LIS : "</span> + Arrays.toString(LIS));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 최대 값을 찾기</span></span><br><span class="line">        <span class="keyword">int</span> maxLISIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LIS.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (LIS[maxLISIndex] &lt; LIS[i]) &#123;</span><br><span class="line">                maxLISIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"최장 증가 수열의 길이 : "</span> + LIS[maxLISIndex]);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Path : "</span> + Arrays.toString(path));</span><br><span class="line">        StringBuilder lisPath = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = maxLISIndex; i != -<span class="number">1</span>; i = path[i]) &#123;</span><br><span class="line">            <span class="comment">// 최장 증가 수열의 index번호를 기준으로 앞으로 이동하며 -1을 만날 때 까지 출력</span></span><br><span class="line">            lisPath.insert(<span class="number">0</span>, list[i] + <span class="string">" "</span>); <span class="comment">// 제일 처음으로 삽입</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(lisPath.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 코드의 기본 원리는 <span class="highlight-text orange">내 앞의 수열 Index를 저장하며 마지막에 </span><span class="highlight-text blue">역추적</span><span class="highlight-text orange">한다.</span>에 의미를 두고 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LIS.length; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">    path[i] = -<span class="number">1</span>; <span class="comment">// 내 앞의 수열 숫자의 index</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123; <span class="comment">// 내 앞의 숫자 중에 작은 숫자들을 찾기</span></span><br><span class="line">        <span class="keyword">if</span> (list[j] &lt; list[i] &amp;&amp; LIS[i] &lt; LIS[j] + <span class="number">1</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">            path[i] = j; <span class="comment">// 내 앞 수열을 찾았기 때문에 그 index 저장</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>내 앞의 숫자를 탐색하며 작은 숫자를 찾을 때 조금의 코드를 추가해주면서 작성할 수 있습니다.<br><code>path[i] = j;</code>를 작성해주며 경로를 작성 할 수 있으며,<br>결과값을 보도록 하겠습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LIS : [1, 1, 2, 2, 3, 1]</span><br><span class="line">최장 증가 수열의 길이 : 3</span><br><span class="line">Path : [-1, -1, 0, 0, 3, -1]</span><br><span class="line">3 4 5</span><br></pre></td></tr></table></figure><br><div class="alert info"><p>3, 4, 5가 나왔지만, 2, 4, 5 도 됩니다. 프로그램 상 앞으로 현재값을 기준으로 찾기 때문입니다.</p></div><p><br><br></p><p>좋습니다. 이렇게 최장 증가 수열에 대해서 알아봤지만, 이 알고리즘의 경우 <code>O(n^2)</code>의 시간 복잡도를 갖고 있습니다.</p><blockquote><p>i를 n번 돌리며 j가 0부터 i까지 확인 하기 때문에.</p></blockquote><p>좀 더 <del>씬빡</del> 한방법을 생각해보도록 하겠습니다.</p><p><br><br></p><h2 id="Binary-Search를-통해-LIS-찾기"><a href="#Binary-Search를-통해-LIS-찾기" class="headerlink" title="Binary Search를 통해 LIS 찾기"></a>Binary Search를 통해 LIS 찾기</h2><p><code>Binary Search</code>로 LIS를 어떻게 찾는지 예시를 통해 확인해보도록 하겠습니다.  </p><p>8, 2, 4, 3, 6, 11, 7, 10, 14, 5 라는 수열이 있다고 가정해 보겠습니다.  </p><p>LIS List는 LIS로 사용가능한 숫자를 저장하는 List라고 하겠으며,<br>LIS[i]는 가장 작은 값을 LIS[i]에 저장한다고 하겠습니다.</p><table><thead><tr><th>8</th><th>2</th><th>4</th><th>3</th><th>6</th><th>11</th><th>7</th><th>10</th><th>14</th><th>5</th></tr></thead><tbody><tr><td>8</td><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td></tr><tr><td></td><td></td><td>4</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td></tr><tr><td></td><td></td><td></td><td></td><td>6</td><td>6</td><td>6</td><td>6</td><td>6</td><td>5</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td>11</td><td>7</td><td>7</td><td>7</td><td>7</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>10</td><td>10</td><td>10</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>14</td><td>14</td></tr></tbody></table><p>진행 순서는 다음과 같습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1 : 8을 LIS에 넣음</span><br><span class="line">2 : 2를 LIS 이진 탐색을 통해 넣을 위치를 확인(2보다 작은 값 찾지 못함) -&gt; -1을 리턴하며 0번째에 입력</span><br><span class="line">3 : 4를 LIS 이진 탐색을 통해 넣을 위치를 확인(4보다 작은 값 2 위치를 -부호로) -&gt; -2를 리턴하며 1번째에 입력</span><br><span class="line">4 : 3를 LIS 이진 탐색을 통해 넣을 위치를 확인(3보다 작은 값 2 위치를 -부호로) -&gt; -2를 리턴하며 1번째에 입력</span><br><span class="line">4 : 6를 LIS 이진 탐색을 통해 넣을 위치를 확인(6보다 작은 값 3 위치를 -부호로) -&gt; -3를 리턴하며 2번째에 입력</span><br><span class="line">5 : 11를 LIS 이진 탐색을 통해 넣을 위치를 확인(11보다 작은 값 6 위치를 -부호로) -&gt; -4를 리턴하며 3번째에 입력</span><br><span class="line">6 : 7를 LIS 이진 탐색을 통해 넣을 위치를 확인(7보다 작은 값 6 위치를 -부호로) -&gt; -4를 리턴하며 3번째에 입력</span><br><span class="line">7 : 10를 LIS 이진 탐색을 통해 넣을 위치를 확인(10보다 작은 값 7 위치를 -부호로) -&gt; -5를 리턴하며 4번째에 입력</span><br><span class="line">8 : 14를 LIS 이진 탐색을 통해 넣을 위치를 확인(14보다 작은 값 10 위치를 -부호로) -&gt; -6를 리턴하며 5번째에 입력</span><br><span class="line">9 : 5를 LIS 이진 탐색을 통해 넣을 위치를 확인(5보다 작은 값 3 위치를 -부호로) -&gt; -3를 리턴하며 2번째에 입력</span><br></pre></td></tr></table></figure><p>이렇게 최장 증가 수열을 구할 수 있게 됩니다. 그럼 코드로 한번 작성해 보도록 하겠습니다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LIS_Binary</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] list = &#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] LIS = <span class="keyword">new</span> <span class="keyword">int</span>[list.length]; <span class="comment">// LIS로 사용가능한 숫자를 저장</span></span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">0</span>; <span class="comment">// LIS의 개수를 관리할 변수</span></span><br><span class="line">        LIS[size++] = list[<span class="number">0</span>]; <span class="comment">// 첫번째 숫자는 바로 반영</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(LIS[size-<span class="number">1</span>] &lt; list[i])&#123;</span><br><span class="line">                LIS[size++] = list[i]; <span class="comment">// 제일 뒤에 붙이기</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = Arrays.binarySearch(LIS,<span class="number">0</span>, size, list[i]); <span class="comment">// 삽입할 위치</span></span><br><span class="line">                <span class="keyword">if</span>(temp &lt; <span class="number">0</span>) temp = -temp -<span class="number">1</span>;</span><br><span class="line">                LIS[temp] = list[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"LIS : "</span> + Arrays.toString(LIS));</span><br><span class="line">        System.out.println(<span class="string">"LIS의 개수 : "</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 코드에서 가장 중요한 부분은 이 부분 입니다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(LIS[size-<span class="number">1</span>] &lt; list[i])&#123;</span><br><span class="line">    LIS[size++] = list[i]; <span class="comment">// 제일 뒤에 붙이기</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>제일 뒤의 원소를 확인 했을 때, 넣을 원소보다 작은 경우에는 LIS 제일 뒤에 붙여넣습니다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = Arrays.binarySearch(LIS,<span class="number">0</span>, size, list[i]); <span class="comment">// 삽입할 위치</span></span><br><span class="line">    <span class="keyword">if</span>(temp &lt; <span class="number">0</span>) temp = -temp -<span class="number">1</span>;</span><br><span class="line">    LIS[temp] = list[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>그렇지 않을 경우 넣을 원소를 LIS 리스트에서 찾아 확인 후 -인덱스를 주며 넣을 위치에다 바꿔치기를 합니다.</p></blockquote><p>결과를 보면 아래와 같습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LIS : [2, 3, 5, 7, 10, 14, 0, 0, 0, 0]</span><br><span class="line">LIS의 개수 : 6</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="경로-구하기-이진탐색"><a href="#경로-구하기-이진탐색" class="headerlink" title="경로 구하기 이진탐색"></a>경로 구하기 이진탐색</h2><hr><p>먼저 코드로 확인해보도록 하겠습니다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LIS_Binary_Path</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] list = &#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] LIS = <span class="keyword">new</span> <span class="keyword">int</span>[list.length]; <span class="comment">// LIS로 사용가능한 숫자를 저장, index 저장</span></span><br><span class="line">        <span class="keyword">int</span>[] path = <span class="keyword">new</span> <span class="keyword">int</span>[list.length]; <span class="comment">// 경로를 역추적하기 위해</span></span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">0</span>; <span class="comment">// LIS의 개수를 관리할 변수</span></span><br><span class="line"></span><br><span class="line">        path[size] = -<span class="number">1</span>; <span class="comment">// 첫번째 들어갈 수 이므로 -1을 저장</span></span><br><span class="line">        LIS[size++] = <span class="number">0</span>; <span class="comment">// 첫번째 숫자의 index를 반영</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">            <span class="comment">// LIS 배열의 마지막 숫자와 수열값을 비교</span></span><br><span class="line">            <span class="keyword">if</span> (list[LIS[size - <span class="number">1</span>]] &lt; list[i]) &#123;</span><br><span class="line">                path[i] = LIS[size - <span class="number">1</span>]; <span class="comment">// 해당 위치를 path[i]에 넣음</span></span><br><span class="line">                LIS[size++] = i; <span class="comment">// 제일 뒤에 index 를 붙임</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = binarySearch(list, LIS, <span class="number">0</span>, size, list[i]); <span class="comment">// 넣을 위치를 확인</span></span><br><span class="line">                <span class="keyword">if</span> (temp &lt; <span class="number">0</span>) temp = -temp - <span class="number">1</span>;</span><br><span class="line">                path[i] = path[LIS[temp]]; <span class="comment">// 덮어쓸 위치의 index를 내것으로 복사</span></span><br><span class="line">                LIS[temp] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"LIS의 개수 : "</span> + size);</span><br><span class="line">        StringBuilder lisPath = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = LIS[size - <span class="number">1</span>]; i != -<span class="number">1</span>; i = path[i]) &#123;</span><br><span class="line">            lisPath.insert(<span class="number">0</span>, list[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"LIS의 경로 : "</span> + lisPath.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] c, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = fromIndex;</span><br><span class="line">        <span class="keyword">int</span> high = toIndex - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = low + high &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> midVal = a[c[mid]];</span><br><span class="line">            <span class="keyword">if</span> (midVal &lt; key) &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (midVal &lt;= key) &#123;</span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">                &#125;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -(low + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드가 좀 복잡해 보일 수 있는데, <code>Binary Search</code> 함수를 따로 구현한 이유는 LIS 리스트는 입력받은 list 배열의 Index를 저장했기 때문입니다.  </p><p>path라는 리스트를 초기 인덱스(-1)부터 값을 LIS에 넣을 때마다 path를 추가해주는 방식을 사용했습니다.  </p><p>그 경로를 -1이 나올때까지 결과는 다음과 같습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LIS의 개수 : 6</span><br><span class="line">LIS의 경로 : 2 3 6 7 10 14</span><br></pre></td></tr></table></figure><p><br><br></p><p>이렇게 LIS(최장 증가 수열)에 대해서 알아 보았습니다.<br>그럼 관련 알고리즘 문제 링크를 걸어드리며 마무리 짓도록 하겠습니다. 감사합니다.😁</p><h2 id="관련-알고리즘-문제"><a href="#관련-알고리즘-문제" class="headerlink" title="관련 알고리즘 문제"></a>관련 알고리즘 문제</h2><p><img src="chrome-extension://anenheoccfogllpbpcmbbpcbjpogeehe/svg/9.svg" height="30px" width="30px" align="left">&nbsp;&nbsp;<a href="https://www.acmicpc.net/problem/11053" target="_blank" rel="noopener">가장 긴 증가하는 부분 수열</a></p><p><img src="chrome-extension://anenheoccfogllpbpcmbbpcbjpogeehe/svg/10.svg" height="30px" width="30px" align="left">&nbsp;&nbsp;<a href="https://www.acmicpc.net/problem/2565" target="_blank" rel="noopener">전깃줄</a></p><p><img src="chrome-extension://anenheoccfogllpbpcmbbpcbjpogeehe/svg/14.svg" height="30px" width="30px" align="left">&nbsp;&nbsp;<a href="https://www.acmicpc.net/problem/2568" target="_blank" rel="noopener">전깃줄2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;알고리즘의-기본적인-스킬을-다룹니다&quot;&gt;&lt;a href=&quot;#알고리즘의-기본적인-스킬을-다룹니다&quot; class=&quot;headerlink&quot; title=&quot;알고리즘의 기본적인 스킬을 다룹니다.&quot;&gt;&lt;/a&gt;알고리즘의 기본적인 스킬을 다룹니다.&lt;/h5&gt;&lt;p&gt;이번 포스트에서는 알고리즘의 스킬 중 LIS(최장 증가 수열)에 대해서 알아 보려고 합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DP&lt;/code&gt; &lt;code&gt;보다 효율적인 탐색 방법 Binary Search&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://msnodeve.github.io/categories/algorithm/"/>
    
      <category term="skill" scheme="https://msnodeve.github.io/categories/algorithm/skill/"/>
    
      <category term="lis" scheme="https://msnodeve.github.io/categories/algorithm/skill/lis/"/>
    
      <category term="dp" scheme="https://msnodeve.github.io/categories/algorithm/skill/lis/dp/"/>
    
      <category term="binary search" scheme="https://msnodeve.github.io/categories/algorithm/skill/lis/dp/binary-search/"/>
    
    
      <category term="Algorithm" scheme="https://msnodeve.github.io/tags/algorithm/"/>
    
      <category term="LIS" scheme="https://msnodeve.github.io/tags/lis/"/>
    
      <category term="DP" scheme="https://msnodeve.github.io/tags/dp/"/>
    
      <category term="Binary Search" scheme="https://msnodeve.github.io/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>SubSet(부분집합) - [Algorithm Skill]</title>
    <link href="https://msnodeve.github.io/2020/05/23/algorithm-subset/"/>
    <id>https://msnodeve.github.io/2020/05/23/algorithm-subset/</id>
    <published>2020-05-23T09:43:26.000Z</published>
    <updated>2020-05-23T10:40:47.067Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h5 id="알고리즘의-기본적인-스킬을-다룹니다-1"><a href="#알고리즘의-기본적인-스킬을-다룹니다-1" class="headerlink" title="알고리즘의 기본적인 스킬을 다룹니다."></a>알고리즘의 기본적인 스킬을 다룹니다.</h5><p>이번 포스트에서는 알고리즘의 스킬 중 부분집합(Subset)에 대해서 알아 보려고 합니다.<br>목차는 다음과 같습니다.</p><p><a href="#Subset-배열체크">1. 배열체크로 부분집합 구하기</a><br><a href="#Subset-비트마스킹">2. 비트마스크로 부분집합 구하기</a><br><a href="#관련-알고리즘-문제">3. 관련 알고리즘 문제</a></p><br><h2 id="Subset-배열체크"><a href="#Subset-배열체크" class="headerlink" title="Subset 배열체크"></a>Subset 배열체크</h2><p>부분집합이라는 단어는 고등학생때 많이 들어봤던 것 같습니다.<br>일단 부분집합에 대해서 간단하게 알아 보도록 하죠.<br>원소의 개수가 <code>N</code>일때, 부분집합의 개수는 <span class="highlight-text orange">2^N</span> 입니다.  </p><h4 id="어떻게-그럴까요"><a href="#어떻게-그럴까요" class="headerlink" title="어떻게 그럴까요?"></a>어떻게 그럴까요?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">원소의 개수가 &#123;1, 2&#125; 라고할 때, 다음과 같이 부분 집합이 나올 수 있습니다.</span><br><span class="line">∅</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">1, 2</span><br><span class="line"></span><br><span class="line">총 개수 : 4개</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">원소의 개수가 &#123;1, 2, 3&#125; 라고할 때, 다음과 같이 부분 집합이 나올 수 있습니다.</span><br><span class="line">∅</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">1, 2</span><br><span class="line">1, 3</span><br><span class="line">2, 3</span><br><span class="line">1, 2, 3</span><br><span class="line"></span><br><span class="line">총 개수 : 8개</span><br></pre></td></tr></table></figure><p>그렇다면 이제 코드로 한번 작성해서 확인해 보도록 하겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subset_Visit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N, totalCnt; <span class="comment">// 원소의 개수, 총 경우의 수</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] inputs;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span>[] visit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 부분 집합을 구하기 위해서 원소 입력</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        N = sc.nextInt();</span><br><span class="line">        inputs = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        visit = <span class="keyword">new</span> <span class="keyword">boolean</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            inputs[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 부분집합 시작</span></span><br><span class="line">        getSubset(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 출력</span></span><br><span class="line">        System.out.println(<span class="string">"총 경우의 수 : "</span> +  totalCnt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getSubset</span><span class="params">(<span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// cnt가 원소의 개수만큼 돌았다면</span></span><br><span class="line">        <span class="keyword">if</span>(cnt == N)&#123;</span><br><span class="line">            totalCnt++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                <span class="comment">// 선택된 배열과 선택되지 않은 배열 출력</span></span><br><span class="line">                System.out.print((visit[i] ? inputs[i] : <span class="string">"X"</span>) + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 현재 원소를 선택하고 다음</span></span><br><span class="line">        visit[cnt] = <span class="keyword">true</span>;</span><br><span class="line">        getSubset(cnt+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 현재 원소를 선택하지 않고 다음</span></span><br><span class="line">        visit[cnt] = <span class="keyword">false</span>;</span><br><span class="line">        getSubset(cnt+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드를 실행해보면 아래와 같은 결과를 얻을 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 3 4</span><br><span class="line">1234</span><br><span class="line">123X</span><br><span class="line">12X4</span><br><span class="line">12XX</span><br><span class="line">1X34</span><br><span class="line">1X3X</span><br><span class="line">1XX4</span><br><span class="line">1XXX</span><br><span class="line">X234</span><br><span class="line">X23X</span><br><span class="line">X2X4</span><br><span class="line">X2XX</span><br><span class="line">XX34</span><br><span class="line">XX3X</span><br><span class="line">XXX4</span><br><span class="line">XXXX</span><br><span class="line">총 경우의 수 : 16</span><br></pre></td></tr></table></figure><p><br><br></p><hr><h2 id="Subset-비트마스킹"><a href="#Subset-비트마스킹" class="headerlink" title="Subset 비트마스킹"></a>Subset 비트마스킹</h2><p>위에서 봤던 방문배열을 사용하게 되면 원소의 개수가 커졌을 때, 메모리 사용량이 많이 들어갈 수 있습니다.<br>이번에는 비트마스킹을 이용해서 부분집합을 구해 보도록 하겠습니다.  </p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subset_Bitmask</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N; <span class="comment">// 원소의 개수</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] inputs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 부분 집합을 구하기 위해서 원소 입력</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        N = sc.nextInt();</span><br><span class="line">        inputs = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            inputs[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 부분집합 시작</span></span><br><span class="line">        getSubset(<span class="number">1</span> &lt;&lt; N);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 출력</span></span><br><span class="line">        System.out.println(<span class="string">"총 경우의 수 : "</span> +  (<span class="number">1</span> &lt;&lt; N));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getSubset</span><span class="params">(<span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> flag = <span class="number">0</span>; flag &lt; cnt; flag++) &#123;</span><br><span class="line">            <span class="comment">// 0, 1, 2 ... flag 비트열 별로 원소 수만큼 각 자리 비트를 확인</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">                System.out.print((((flag &amp; (<span class="number">1</span> &lt;&lt; i)) != <span class="number">0</span>) ? inputs[i] : <span class="string">"X"</span>) + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드의 실행 원리를 예시를 들며 설명 하겠습니다.</p><hr><p>2개의 원소가 있다고 가정하면 총 경우의 수는 4.<br>8을 Binary로 표현하면 <code>1 0 0</code> 이며, 4번을 돌며 각자리 입력 받은 원소의 개수만큼 비트 이동을 합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">flag -&gt; 0 &#x3D; 0 0 일때</span><br><span class="line">i -&gt; 0 &#x3D; (1 &lt;&lt; 0) &#x3D; 01,      flag &amp; i &#x3D;&gt; 0</span><br><span class="line">i -&gt; 1 &#x3D; (1 &lt;&lt; 1) &#x3D; 10,      flag &amp; i &#x3D;&gt; 0</span><br><span class="line"></span><br><span class="line">따라서 X, X 로 표현 됩니다.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag -&gt; 1 &#x3D; 0 1 일때</span><br><span class="line">i -&gt; 0 &#x3D; (1 &lt;&lt; 0) &#x3D; 01,      flag &amp; i &#x3D;&gt; 1</span><br><span class="line">i -&gt; 1 &#x3D; (1 &lt;&lt; 1) &#x3D; 10,      flag &amp; i &#x3D;&gt; 0</span><br><span class="line"></span><br><span class="line">따라서 1, X 로 표현 됩니다.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag -&gt; 2 &#x3D; 1 0 일때</span><br><span class="line">i -&gt; 0 &#x3D; (1 &lt;&lt; 0) &#x3D; 01,      flag &amp; i &#x3D;&gt; 0</span><br><span class="line">i -&gt; 1 &#x3D; (1 &lt;&lt; 1) &#x3D; 10,      flag &amp; i &#x3D;&gt; 1</span><br><span class="line"></span><br><span class="line">따라서 X, 1 로 표현 됩니다.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag -&gt; 3 &#x3D; 1 1 일때</span><br><span class="line">i -&gt; 0 &#x3D; (1 &lt;&lt; 0) &#x3D; 01,      flag &amp; i &#x3D;&gt; 1</span><br><span class="line">i -&gt; 1 &#x3D; (1 &lt;&lt; 1) &#x3D; 10,      flag &amp; i &#x3D;&gt; 1</span><br><span class="line"></span><br><span class="line">따라서 1, 2 로 표현 됩니다.</span><br></pre></td></tr></table></figure><p>위 코드를 실행해보면 아래처럼 결과가 나오는 것을 확인 할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 2</span><br><span class="line">XX</span><br><span class="line">1X</span><br><span class="line">X2</span><br><span class="line">12</span><br><span class="line">총 경우의 수 : 4</span><br></pre></td></tr></table></figure><p><br><br></p><p>이렇게 부분집합에 대해서 알아 보았습니다.<br>그럼 관련 알고리즘 문제 링크를 걸어드리며 마무리 짓도록 하겠습니다. 감사합니다.😁</p><h2 id="관련-알고리즘-문제"><a href="#관련-알고리즘-문제" class="headerlink" title="관련 알고리즘 문제"></a>관련 알고리즘 문제</h2><p><img src="chrome-extension://anenheoccfogllpbpcmbbpcbjpogeehe/svg/9.svg" height="30px" width="30px" align="left">&nbsp;&nbsp;<a href="https://www.acmicpc.net/problem/1182" target="_blank" rel="noopener">부분수열의 합</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;알고리즘의-기본적인-스킬을-다룹니다&quot;&gt;&lt;a href=&quot;#알고리즘의-기본적인-스킬을-다룹니다&quot; class=&quot;headerlink&quot; title=&quot;알고리즘의 기본적인 스킬을 다룹니다.&quot;&gt;&lt;/a&gt;알고리즘의 기본적인 스킬을 다룹니다.&lt;/h5&gt;&lt;p&gt;이번 포스트에서는 알고리즘의 스킬 중 부분집합(Subset)에 대해서 알아 보려고 합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Subset&lt;/code&gt; &lt;code&gt;BitMask&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://msnodeve.github.io/categories/algorithm/"/>
    
      <category term="skill" scheme="https://msnodeve.github.io/categories/algorithm/skill/"/>
    
      <category term="subset" scheme="https://msnodeve.github.io/categories/algorithm/skill/subset/"/>
    
      <category term="bitmask" scheme="https://msnodeve.github.io/categories/algorithm/skill/subset/bitmask/"/>
    
    
      <category term="Algorithm" scheme="https://msnodeve.github.io/tags/algorithm/"/>
    
      <category term="Subset" scheme="https://msnodeve.github.io/tags/subset/"/>
    
      <category term="Bit" scheme="https://msnodeve.github.io/tags/bit/"/>
    
      <category term="BitMask" scheme="https://msnodeve.github.io/tags/bitmask/"/>
    
  </entry>
  
  <entry>
    <title>Recursive(재귀) - [Algorithm Skill]</title>
    <link href="https://msnodeve.github.io/2020/03/17/algorithm-recursive/"/>
    <id>https://msnodeve.github.io/2020/03/17/algorithm-recursive/</id>
    <published>2020-03-17T01:38:59.000Z</published>
    <updated>2020-05-05T05:23:05.208Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h5 id="알고리즘의-기본적인-스킬을-다룹니다-1"><a href="#알고리즘의-기본적인-스킬을-다룹니다-1" class="headerlink" title="알고리즘의 기본적인 스킬을 다룹니다."></a>알고리즘의 기본적인 스킬을 다룹니다.</h5><p>이번 포스트에서는 알고리즘의 스킬 중 재귀에 대해서 알아 보려고 합니다.<br>목차는 다음과 같습니다.</p><p><a href="#Factorial">1. Factorial</a><br><a href="#Fibonacci">2. Fibonacci</a><br><a href="#Fibonacci-Memoization">3. Fibonacci Memoization</a><br><a href="#관련-알고리즘-문제">4. 관련 알고리즘 문제</a></p><br><h2 id="Factorial"><a href="#Factorial" class="headerlink" title="Factorial"></a>Factorial</h2><p>팩토리얼이라는 단어 많이 들어 보셨을 거라 생각합니다.<br>간단하게 다음과 같이 식을 세울 수 있습니다.<div class="alert info no-icon"><p>n! = n * (n - 1)!</p></div>즉 예시를 들어 보면 다음과 같겠죠.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0! &#x3D; 1</span><br><span class="line">1! &#x3D; 1 * (1 - 1)! &#x3D; 1 * 0! &#x3D; 1</span><br><span class="line">2! &#x3D; 2 * (2 - 1)! &#x3D; 2 * 1! &#x3D; 2</span><br><span class="line">...</span><br><span class="line">5! &#x3D; 5 * (5 - 1)! &#x3D; 5 * 4! &#x3D; 120</span><br></pre></td></tr></table></figure>이렇게 <span class="highlight-text orange">n!</span>을 코드로 한번 작성해 보고자 합니다. 아마 대표적인 재귀함수의 기본이지 않을까 싶습니다.<br>그럼 이제 코드를 한번 살펴 보도록 하겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factorial</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> N = Integer.parseInt(br.readLine());</span><br><span class="line"></span><br><span class="line">    System.out.println(factorial(N));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// n! : n * (n-1)!</span></span><br><span class="line">  <span class="comment">// n! 계산</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 기저(재귀 탈출)</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 유도(파생)</span></span><br><span class="line">    <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>이 코드에서 중요한 점은 재귀를 선언하면 무한 반복을 돌지않게 하기 위해 `기저 조건` 과 `다시 호출`을 하는 것이 가장 중요합니다.재귀로 하고자 한다면 다음과 같이 선언을 한 뒤 사용하는 것이 좋을 것 같습니다. ~(개인적인 견해 입니다.)~<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 기저 조건</span></span><br><span class="line">    <span class="comment">// 목표값에 도달했을 경우 빠져나가야 하기 때문입니다.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 파생 조건</span></span><br><span class="line">    <span class="comment">// 목표값에 도달했지 않았을 경우 계속 돌아야 하기 때문입니다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>코드는 직접 한번 작성해보시기 바랍니다 😌<br><br>## Fibonacci피보나치 수열? 이 또한 많이 들어 보셨을 것 같습니다.0번째 항을 0, 1번째 항을 1로 두고, 2번째 항부터는 바로 앞의 두 수를 더한 수가 됩니다.16 번째 항까지만 나열해 보자면,<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,  1,  1,  2,  3,  5,  8,  13,   21,   34,   55,   89,   144,  233,  377,  610,  987</span><br></pre></td></tr></table></figure>규칙은 정말 간단하죠? 그럼 다음과 같이 식을 세울 수 있겠군요.<div class="alert info no-icon"><p>f(n) = f(n - 1) + f(n - 2)</p></div><p>이제 우리가 해야할 일은 <code>f(n) 의 값은 과연 몇일까?🤔</code> 를 구하는 것 입니다.<br>그럼 코드로 한번 구현을 해보도록 하겠습니다!</p><p>일단 위에서 말했지만, 재귀를 사용하기 위해서는 먼저 틀을 만들어야 합니다.</p><p>그리고 코드를 한번 볼까요?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">      <span class="keyword">int</span> N = Integer.parseInt(br.readLine());</span><br><span class="line">      System.out.println(fibonacci(N));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 우선 재귀를 그만둘 수 있는 기저 조건</span></span><br><span class="line">    <span class="comment">// n이 0, 1일때 결과값은 0과 1이기 때문에 return n을 주었습니다.</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 그렇다면 계속 파생조건을 주어야 겠죠.</span></span><br><span class="line">    <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>계산이 어떻게 이루지는지 한번 보도록하겠습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">N에 4를 입력했을 경우,</span><br><span class="line">1. fibonacci(4) 함수 호출</span><br><span class="line">2. n &lt;&#x3D; 1 아니기 때문에 return fibonacci(4 - 1) + fibonacci(4 - 2) 중에 첫번째 fibbonacci(4 - 1) 함수 호출</span><br><span class="line">3. n &lt;&#x3D; 1 아니기 때문에 return fibonacci(3 - 1) + fibonacci(3 - 2) 중에 첫번째 fibbonacci(3 - 1) 함수 호출</span><br><span class="line">4. n &lt;&#x3D; 1 아니기 때문에 return fibonacci(2 - 1) + fibonacci(2 - 2) 중에 첫번째 fibbonacci(2 - 1) 함수 호출</span><br><span class="line">5. n &lt;&#x3D; 1 이기때문에 return 1; 반환 후 4. 단계에서 두번째 fibonacci(2 - 2) 함수 호출 (현재 결과 값 1)</span><br><span class="line">6. n &lt;&#x3D; 1 이기때문에 return 0; 반환 후 3. 단계에서 두번째 fibonacci(3 - 2) 함수 호출 (현재 결과 값 1)</span><br><span class="line">7. n &lt;&#x3D; 1 이기때문에 return 1; 반환 후 2. 단계에서 두번째 fibonacci(4 - 2) 함수 호출 (현재 결과 값 2)</span><br><span class="line">8. n &lt;&#x3D; 1 아니기 때문에 return fibonacci(2 - 1) + fibonacci(2 - 2) 중에 첫번째 fibbonacci(2 - 1) 함수 호출</span><br><span class="line">9. n &lt;&#x3D; 1 이기때문에 return 1; 반환 후 8. 단계에서 두번째 fibonacci(2 - 2) 함수 호출 (현재 결과 값 3)</span><br><span class="line">10. n &lt;&#x3D; 1 이기때문에 return 0; 반환 후 최종 결과 값 3 반환</span><br></pre></td></tr></table></figure><p>이해가 가지 않을 수 있습니다. 눈으로 보는 것 보다, 그리고 머리로 생각하는 것 보다 손으로 한번 써보는게 더 기억에 잘 남는다고 하니 한번 손으로 작성해보는 것도 좋은 방법인듯 합니다.</p><div class="alert warning"><p>자! 여기서 잠깐… 혹시 N의 입력 값에 42이상의 값을 입력 해보셨나요? 결과 값이 조금 늦게 나오지 않았나요?<br><del>음 늦게 나오지않았다면 정말 좋은 컴퓨터를 사용중이시네요</del> 그럼 100을 입력해보시죠 하루를 걸려서라도 결과값은 나오지 않을거에요…</p></div><blockquote><p>이거 왜이러는 걸까요?</p></blockquote><p>그림을 한번 볼까요?</p><div style="text-align: center;"><img src="/image/algorithm/recursive-fibonacci01.png" width="100%"></div><p>함수안에서 같은 함수를 호출(재귀)하게되면 콜스택에 쌓이게 됩니다. 그렇다면 위 그림을 비교해서 보자면 fibonacci(5) 즉, 5번째는 어떤 피보나치 수가 될지 확인해보기 위해서는 fibonacci(0)을 3번, fibonacci(1)을 5번, fibonacci(2)을 3번 … 이렇게 앞에 구했던 함수를 계속해서 함수 호출을 통해 5번째 피보나치 수를 구할 수 있게 됩니다.  </p><p>그렇다면 이미 구했다면 더 이상 구하지 않게 하기 위해서는 어떤 방법이 필요할까요? 바로 <span class="highlight-text orange">Memoization</span>! 을 이용하면 되겠습니다.</p><p><br><br></p><h2 id="Fibonacci-Memoization"><a href="#Fibonacci-Memoization" class="headerlink" title="Fibonacci Memoization"></a>Fibonacci Memoization</h2><p>우선 바로 코드를 보도록 하겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FibonnaciMemoization</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span>[] call1, call2, memo;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> totalCnt1, totalCnt2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">fibo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// 메모를 하지 않은 경우</span></span><br><span class="line">        call1[n]++;</span><br><span class="line">        totalCnt1++;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">fibo2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// 메모를 한 경우</span></span><br><span class="line">        call2[n]++;</span><br><span class="line">        totalCnt2++;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        <span class="comment">// n항의 값을 계산한 적이 있었다면(메모 확인) 메모된 값 리턴</span></span><br><span class="line">        <span class="keyword">if</span> (memo[n] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[n] = fibo2(n - <span class="number">1</span>) + fibo2(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = sc.nextInt();</span><br><span class="line">        call1 = <span class="keyword">new</span> <span class="keyword">long</span>[N + <span class="number">1</span>];</span><br><span class="line">        call2 = <span class="keyword">new</span> <span class="keyword">long</span>[N + <span class="number">1</span>];</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="keyword">long</span>[N + <span class="number">1</span>];</span><br><span class="line">        System.out.println(fibo2(N));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"fibo2("</span> + i + <span class="string">") : "</span> + call2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"fibo2 call count : "</span> + totalCnt2);</span><br><span class="line">        System.out.println(<span class="string">"============================"</span>);</span><br><span class="line">        System.out.println(fibo(N));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"fibo("</span> + i + <span class="string">") : "</span> + call1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"fibo call count : "</span> + totalCnt1);</span><br><span class="line">        System.out.println(<span class="string">"============================"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>이제 <code>5</code> 를 입력하고 돌려보시면 다음과 같은 결과를 보실 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">5</span><br><span class="line">fibo2(1) : 2</span><br><span class="line">fibo2(2) : 2</span><br><span class="line">fibo2(3) : 2</span><br><span class="line">fibo2(4) : 1</span><br><span class="line">fibo2(5) : 1</span><br><span class="line">fibo2 call count : 9</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">5</span><br><span class="line">fibo(1) : 5</span><br><span class="line">fibo(2) : 3</span><br><span class="line">fibo(3) : 2</span><br><span class="line">fibo(4) : 1</span><br><span class="line">fibo(5) : 1</span><br><span class="line">fibo call count : 15</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>같은 함수를 호출(재귀) 하면서 이전에 이미 구해놓았던 memo[-] 결과 값이 있다면 바로 리턴을 해주며 값을 계속 구하고 있는 모습을 보실 수 있습니다.</p><div class="alert info no-icon"><p>이렇게 돌려본 결과<br>단순히 재귀를 돌렸을 경우 총 카운트는 15번<br>메모이제이션을 한 뒤 돌렸을 경우 총 카운트는 9번<br>으로 <code>함수 콜스택</code>을 줄여준 결과를 보여주고 있습니다.</p></div><p><br><br></p><p>이렇게 재귀함수에 대해서 알아 보았습니다.<br>그럼 관련 알고리즘 문제 링크를 걸어드리며 마무리 짓도록 하겠습니다. 감사합니다.😁</p><h2 id="관련-알고리즘-문제"><a href="#관련-알고리즘-문제" class="headerlink" title="관련 알고리즘 문제"></a>관련 알고리즘 문제</h2><p><img src="chrome-extension://anenheoccfogllpbpcmbbpcbjpogeehe/svg/3.svg" height="30px" width="30px" align="left">&nbsp;&nbsp;<a href="https://www.acmicpc.net/problem/2747" target="_blank" rel="noopener">피보나치 수</a></p><p><img src="chrome-extension://anenheoccfogllpbpcmbbpcbjpogeehe/svg/6.svg" height="30px" width="30px" align="left">&nbsp;&nbsp;<a href="https://www.acmicpc.net/problem/2748" target="_blank" rel="noopener">피보나치 수 2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;알고리즘의-기본적인-스킬을-다룹니다&quot;&gt;&lt;a href=&quot;#알고리즘의-기본적인-스킬을-다룹니다&quot; class=&quot;headerlink&quot; title=&quot;알고리즘의 기본적인 스킬을 다룹니다.&quot;&gt;&lt;/a&gt;알고리즘의 기본적인 스킬을 다룹니다.&lt;/h5&gt;&lt;p&gt;이번 포스트에서는 알고리즘의 스킬 중 재귀에 대해서 알아 보려고 합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Factorial&lt;/code&gt; &lt;code&gt;Fibonacci&lt;/code&gt; &lt;code&gt;Fibonacci Memoization&lt;/code&gt; &lt;code&gt;Hanoi&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://msnodeve.github.io/categories/algorithm/"/>
    
      <category term="skill" scheme="https://msnodeve.github.io/categories/algorithm/skill/"/>
    
      <category term="recursive" scheme="https://msnodeve.github.io/categories/algorithm/skill/recursive/"/>
    
    
      <category term="Algorithm" scheme="https://msnodeve.github.io/tags/algorithm/"/>
    
      <category term="Recursive" scheme="https://msnodeve.github.io/tags/recursive/"/>
    
      <category term="Factorial" scheme="https://msnodeve.github.io/tags/factorial/"/>
    
      <category term="Hanoi" scheme="https://msnodeve.github.io/tags/hanoi/"/>
    
      <category term="Fibo" scheme="https://msnodeve.github.io/tags/fibo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo[Tranquilpeak] 사용방법</title>
    <link href="https://msnodeve.github.io/2020/03/13/devlog-hexo-syntax/"/>
    <id>https://msnodeve.github.io/2020/03/13/devlog-hexo-syntax/</id>
    <published>2020-03-13T11:09:58.000Z</published>
    <updated>2020-03-17T08:15:32.830Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>이번 포스트에서는 Hexo 테마 중 Tranquilpeak, 어떻게 사용하는지에 대해 알아 보려고 합니다.<br>목차는 다음과 같습니다.</p><p><a href="#Alert">1. Alert를 사용하는 방법!</a><br><a href="#Highlight-Text">2. Highlight Text를 사용하는 방법!</a></p><a id="more"></a><p><br><br></p><h1 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h1><h4 id="Alert"><a href="#Alert" class="headerlink" title="Alert"></a>Alert</h4><blockquote><p> <code>Alert</code>을 사용하는 방법</p></blockquote><br><div class="alert info"><p>Info 알림을 사용하는 방법은 어떻게!?</p></div><div class="alert success"><p>Success 알림을 사용하는 방법은 어떻게!?</p></div><div class="alert warning"><p>Warning 알림을 사용하는 방법은 어떻게!?</p></div><div class="alert danger"><p>Danger 알림을 사용하는 방법은 어떻게!?</p></div><p>아이콘이 거슬린다구요? 그럼 이렇게 표시는 어떨까요??</p><div class="alert info no-icon"><p>Info 알림을 사용하는 방법은 어떻게!?</p></div><div class="alert success no-icon"><p>Success 알림을 사용하는 방법은 어떻게!?</p></div><div class="alert warning no-icon"><p>Warning 알림을 사용하는 방법은 어떻게!?</p></div><div class="alert danger no-icon"><p>Danger 알림을 사용하는 방법은 어떻게!?</p></div><p>우선 위와 같이 이 테마에서 가능한 <code>md문법</code>에 대해서 알아보도록 하겠습니다!  </p><br><h4 id="문법은-다음과-같습니다"><a href="#문법은-다음과-같습니다" class="headerlink" title="문법은 다음과 같습니다."></a>문법은 다음과 같습니다.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% alert [classes] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endalert %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>파라미터 이름</th><th>값</th></tr></thead><tbody><tr><td></td><td>info</td></tr><tr><td></td><td>success</td></tr><tr><td>Classes</td><td>warning</td></tr><tr><td></td><td>danger</td></tr><tr><td></td><td>no-icon</td></tr></tbody></table><p>위에 보시는 <span class="highlight-text danger">[classes]</span>에 값을 넣고 작성하면 됩니다.<br>또한 표에서 보이는 5번째줄의 값(<span class="highlight-text danger">no-icon</span>)은 icon을 보여주지 않고 Alert을 쓰는 방법입니다.<br>  아래와 같이 쓰시면 됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% alert info no-icon %&#125;</span><br><span class="line">Info 알림의 예시 코드</span><br><span class="line">&#123;% endalert %&#125;</span><br></pre></td></tr></table></figure><div class="alert info no-icon"><p>Info 알림 결과 !</p></div><p></br><br></p><h4 id="Highlight-Text"><a href="#Highlight-Text" class="headerlink" title="Highlight Text"></a>Highlight Text</h4><blockquote><p> <code>Highlight Text</code>을 사용하는 방법</p></blockquote><p><code>Highlight Text</code>는 형광펜을 그은 처럼 작성하는 것 입니다.</p><p>일단 예시를 보도록 하겠습니다.  </p><p>1. <span class="highlight-text orange">첫번째 형광펜</span>은 기본 문법으로</br>2. <span class="highlight-text" style="background-color:#00FFFF;">두번째 형광펜</span>은 hexa color 문법으로</p></br><h4 id="문법은-다음과-같습니다-1"><a href="#문법은-다음과-같습니다-1" class="headerlink" title="문법은 다음과 같습니다."></a>문법은 다음과 같습니다.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hl_text [(classes | hexa code | rgb color | rgba color)] %&#125; </span><br><span class="line">content</span><br><span class="line">&#123;% endhl_text %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>파라미터 이름</th><th>값</th></tr></thead><tbody><tr><td></td><td>red</td></tr><tr><td></td><td>green</td></tr><tr><td></td><td>blue</td></tr><tr><td></td><td>purple</td></tr><tr><td></td><td>orange</td></tr><tr><td>Classes</td><td>yellow</td></tr><tr><td></td><td>cyan</td></tr><tr><td></td><td>primary</td></tr><tr><td></td><td>success</td></tr><tr><td></td><td>warning</td></tr><tr><td></td><td>danger</td></tr></tbody></table><p>위에 보시는 <span class="highlight-text cyan">[(classes | hexa code)]</span>에 값을 넣고 작성하면 됩니다.<br>또한 <span class="highlight-text primary">hexa code</span>로도 작성할 수 있습니다.<br>  사용 코드 예시는 아래와 같습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- basic code --&gt;</span></span><br><span class="line">1. &#123;% hl_text orange %&#125;첫번째 형광펜&#123;% endhl_text %&#125;은 기본 문법으로<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hexa code --&gt;</span></span><br><span class="line">2. &#123;% hl_text #00FFFF %&#125;두번째 형광펜&#123;% endhl_text %&#125;은 hexa color 문법으로</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1. <span class="highlight-text orange">첫번째 형광펜</span>은 기본 문법으로</br>2. <span class="highlight-text" style="background-color:#00FFFF;">두번째 형광펜</span>은 hexa color 문법으로</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-tranquilpeak-테마&quot;&gt;&lt;a href=&quot;#Hexo-tranquilpeak-테마&quot; class=&quot;headerlink&quot; title=&quot;Hexo[tranquilpeak 테마]&quot;&gt;&lt;/a&gt;Hexo[tranquilpeak 테마]&lt;/h1&gt;&lt;p&gt;이번 포스트에서는 Hexo 테마 중 Tranquilpeak, 어떻게 사용하는지에 대해 알아 보려고 합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Tag&lt;/code&gt; &lt;code&gt;Alert&lt;/code&gt; &lt;code&gt;Highlight Text&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="devlog" scheme="https://msnodeve.github.io/categories/devlog/"/>
    
      <category term="hexo" scheme="https://msnodeve.github.io/categories/devlog/hexo/"/>
    
    
      <category term="Hexo" scheme="https://msnodeve.github.io/tags/hexo/"/>
    
      <category term="Syntax" scheme="https://msnodeve.github.io/tags/syntax/"/>
    
  </entry>
  
  <entry>
    <title>SSAFY 3기를 시작하며![합격 후기]</title>
    <link href="https://msnodeve.github.io/2019/12/24/story-ssafy-3rd/"/>
    <id>https://msnodeve.github.io/2019/12/24/story-ssafy-3rd/</id>
    <published>2019-12-24T12:04:36.000Z</published>
    <updated>2020-05-23T10:49:12.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSAFY"><a href="#SSAFY" class="headerlink" title="SSAFY"></a>SSAFY</h1><p><code>Samsung Software Academy For Youth</code>(삼성 청년 소프트웨어 아카데미) 서울 지역에 합격했습니다! 😘</p><p>그런 의미로 이야기를 한 번 써내려 가려 합니다.</p><a id="more"></a><p>2018년 1월부터 1기, 1,000명 선발을 시작으로 2022년까지 총 <code>10,000명</code>을 선발한다고 했습니다! (저는 사실 SSAFY를 3기 모집 1달 전에 알게 되었어요…) 이렇게 보니 규모가 정말 상당하다라고 생각이 듭니다. 또한 이 아카데미를 듣는 동안 달마다 삼성전자의 이름으로 <code>100만원</code>의 지원금(취업을 한 것이 아니라서, 취직 지원금 까지 신청이 가능하다고 합니다!)을 받을 수 있다고 하니 정말 대단해요!(<del>역시 갓성전자…</del>)</p><p>매년 두 기수 씩 교육생을 선발하는 중이며, 저는 2020년 2월 졸업 예정자로써 3기로 지원했으며 합격해서 교육을 듣게 되었습니다!</p><p>그럼 이제 SSAFY 3기 모집은 언제 였으며, 어떻게 준비를 했는지 이야기를 하겠습니다. 😊😊</p></br><p>이 포스트는 다음과 같은 흐름으로 정리해 보았습니다.  </p><ul><li><a href="#SSAFY를-어떻게-알게-되었나">1. SSAFY를 어떻게 알게 되었나?</a></li><li><a href="#SSAFY-교육-과정">2. SSAFY 교육 과정</a></li><li><a href="#SSAFY-선발-과정">3. SSAFY 선발 과정</a></li><li><a href="#SSAFY-어떻게-들어갔는가">4. SSAFY.. 어떻게 들어갔는가?</a></li><li><a href="#SSAFY-결과-발표">5. SSAFY 결과 발표</a></li></ul></br><h3 id="SSAFY를-어떻게-알게-되었나"><a href="#SSAFY를-어떻게-알게-되었나" class="headerlink" title="SSAFY를 어떻게 알게 되었나"></a>SSAFY를 어떻게 알게 되었나</h3><p>주변 사람들로 인해 알게 되었어요. 제가 SSAFY를 알기전에 삼성 청년 SW 아카데미 모집 설명회가 있었다고 하던데… 미리 알았다면 아마 가보지 않았을까.. 눈물이 나네요😭😭</p><h4 id="SSAFY-모집-설명회-일정-및-장소"><a href="#SSAFY-모집-설명회-일정-및-장소" class="headerlink" title="SSAFY 모집 설명회 일정 및 장소"></a>SSAFY 모집 설명회 일정 및 장소</h4><div style="text-align: center;"><img src="/image/story/ssafy1.png" width="100%"></div><blockquote><p>이미지의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다.</p></blockquote><p>위와 같이 10월 28일 부터 시작해 10월 31일 까지 4일에 걸쳐 진행되었다고 합니다!</p><p>장소 관계 신청으로 인해 조기 마감이 될 수 있다고 하더라구요…(<del>참여하면 소정의 기념품 까지 챙겨줬는데😭😭</del>)</p><p>참여한 것이 아니라 정확한 내용을 알려 드리기에는 한계가 있어 링크를 남겨 드립니다! </p><ul><li>SSAFY 3기 모집 설명회 : <a href="https://webstudynote.tistory.com/23" target="_blank" rel="noopener">https://webstudynote.tistory.com/23</a></li></ul><p>이전에 <code>SSAFY 올레 행사</code>도 있었다고 하네요!</p><ul><li>SSAFY 올레 행사 후기 : <a href="https://webstudynote.tistory.com/19" target="_blank" rel="noopener">https://webstudynote.tistory.com/19</a></li></ul><p></br></br></p><h3 id="SSAFY-교육-과정"><a href="#SSAFY-교육-과정" class="headerlink" title="SSAFY 교육 과정"></a>SSAFY 교육 과정</h3><ul><li>교육 장소 : 전국 4개 지역(서울, 대전, 광주, 구미)</li><li>교육 기간 : 2020년 1월 6일(월) ~ 2020년 12월 31일(목) (12개월)</li></ul><p>12개월 기간동안의 세부 과정은 아래 사진과 같습니다.</p><div style="text-align: center;"><img src="/image/story/ssafy2.png" width="100%"></div><blockquote><p>이미지의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다.</p></blockquote><ul><li>기본과정(5개월) : 기본적으로 <code>컴퓨터와 관련된 지식</code>을 습득하기 위한 기간이라고 보시면 될것 같습니다! 이 과정에서는 Computational Thinking, Algorithm, Computer language(Python, Java, C++…등등) 을 배울 예정이라고 하네요!</li><li>1차 Job Fair(1개월) : 5개월동안 과정을 진행하면서 성적 우수자 대상으로 <code>해외 연수</code>도 보내주며, 필요한 사람에 한해 보충수업도 제공된다고 하네요.</li><li>심화과정(5개월) : 제일 중요한 시점인 것 같습니다. 기본 과정을 진행하면서 습득한 기본 지식을 통해 팀을 꾸려 하나의 프로젝트를 만들어 내는 과정이며, 프로젝트를 진행하기에 앞서 멘토들도 계신다고 하니 정말 좋은 시간이 될 것 같아요!</li><li>2차 Job Fair(1개월) : SSAFY의 마지막 1개월 활동.. SSAFY에서 개인별 맞춤형 경력 설계를 도와주며, 그에 맞게 취업 활동 및 채용 정보도 잘 알려 준다고 합니다! 이 과정까지 수료하게 된다면 뿌듯하고, 즐거울 것 같습니다(<del>한편으로는 슬플 수도 있을 거 같군요😭</del>)</li></ul><p>SSAFY에서 총 12개월의 교육 기간을 통해 <strong><code>&quot;문제해결 능력을 갖춘 차세대 SW인력 양성&quot;</code></strong> 을 목표로 정말 실전형 SW 개발자로 거듭날 수 있을 것 같습니다! 😁😁</p><p></br></br></p><h3 id="SSAFY-선발-과정"><a href="#SSAFY-선발-과정" class="headerlink" title="SSAFY 선발 과정"></a>SSAFY 선발 과정</h3><p>지원 자격 부터 선발 과정까지 자세하게 보도록 하겠습니다! 😉</p><h4 id="지원-자격"><a href="#지원-자격" class="headerlink" title="지원 자격"></a>지원 자격</h4><h5 id="대상"><a href="#대상" class="headerlink" title="대상"></a>대상</h5><ul><li>연령 : <code>만 29세 이하</code> (1990. 1. 1 이후 출생자)</li><li>학력 : 국내외 4년제 대학(학사 이상) <code>졸업자</code> 및 2020.2월 <code>졸업 예정자</code>(<code>전공 무관</code>)</li></ul><h5 id="재직-여부"><a href="#재직-여부" class="headerlink" title="재직 여부"></a>재직 여부</h5><ul><li>현재 <code>미 취업자</code> 대상</li><li>인터뷰일(2019.12.3)부터 본 교육 시작일(2020.1.6) 전까지 재직(예정)자 지원불가(사업장 건강보험 및 국민연금 가입 여부기준)</li></ul><p>※ 교육기간 중 취업할 경우, 해당 업체 입사전에 개별적으로 퇴소</p><h5 id="기타사항"><a href="#기타사항" class="headerlink" title="기타사항"></a><strong>기타사항</strong></h5><ul><li>교육시작일 교육 입과 가능한 자</li><li>교육기간 중 통학 가능한 자(별도 숙소 제공 없음)</li><li>병역필 또는 면제자로 해외여행에 결격 사유가 없는 자</li></ul><div style="text-align: center;"><img src="/image/story/ssafy3.png" width="100%"></div><blockquote><p>이미지의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다.</p></blockquote><p>위와 같이 4단계에 걸쳐 선발을 합니다! 이제 자세하게 알려 드리도록 하겠습니다 😁</p><p></br></br></p><h3 id="SSAFY-어떻게-들어갔는가"><a href="#SSAFY-어떻게-들어갔는가" class="headerlink" title="SSAFY 어떻게 들어갔는가"></a>SSAFY 어떻게 들어갔는가</h3><p>지금부터는 위에서 봤던 4단계를 어떻게 진행했는지, 어떤 생각으로 면접을 봤는지, 알려드릴 수 있는 범위에서 자세하게 알려 드리도록 하겠습니다.  </p><p>지원서를 접수하기 위해서는 <a href="https://www.ssafy.com/ksp/jsp/swp/swpMain.jsp" target="_blank" rel="noopener">SSAFY</a> 홈페이지를 접속해 회원가입 및 로그인 후 온라인으로 지원서를 작성 할 수 있어요.</p><p>(회원 인증 메일 확인 사진을 올리고 싶었으나, 제 3자에게 공개 또는 배포, 복사하는 것을 엄격히 금지하고 있어 올리지 못했습니다)</p></br><h4 id="Step-1-지원서-접수-2019-10-28-11-11"><a href="#Step-1-지원서-접수-2019-10-28-11-11" class="headerlink" title="Step 1) 지원서 접수(2019.10.28 ~ 11.11)"></a>Step 1) 지원서 접수(2019.10.28 ~ 11.11)</h4><p>지원서 접수는 <a href="https://www.ssafy.com/ksp/jsp/swp/apply/swpApplyProcess.jsp" target="_blank" rel="noopener"><code>SSAFY 홈페이지</code></a>에서 지원 가능했습니다. 지원서에는 다음과 같은 항목을 작성해야 했어요.</p><ul><li>기본 인적 사항 : 이름, 생년월일, 성별, 휴대폰 번호, 비상 연락처, 이메일, 주소 기재</li><li>학력 사항 : 최종 학력, 입학 일 및 졸업 일, 전공, 만점 기준 취득 학점 기재</li><li>경력 및 어학 사항 : 경력(인턴 및 근무 경험), 병역 사항, 어학(외국어 자격증 등)<blockquote><p>어학 자격증은 1도 없었어요. 😭<br>그렇지만 해본 경험은 죄다 적었습니다. 😎</p></blockquote></li><li>희망지역 및 진단일정 : 1지망, 2지망(서울, 대전, 광주, 구미 중 택 2), SW적성 검사 진단 일정 선택<blockquote><p>희망지역 - 1지망(서울 : 멀티캠퍼스 교육센터), 2지망(대전 : 삼성화재 유성연수원)<br>진단일전 - 11월 16일 토요일 10시, 12시 이렇게 2개가 있었어요.</p></blockquote></li><li>SW관련 활동 : 학교에서 배운 전공 학점 및 공통 학점 기재, 교육이수 / 개발경험 / 수상경력 기재<blockquote><p>저는 전공자여서 그런지 학점을 기재하고 보니 많았어요!(<del>한 페이지를 꽉 채운느낌?</del>)<br>개발 경험과 수상 경력이 좀 있었던 것 같아요! 있는 대로 죄다 작성했습니다. 😎</p></blockquote></li><li>에세이 : 2가지의 질문이 있었습니다! 두 질문 모두 500자 이상의 글을 작성해야 했습니다.<blockquote><p>첫 번째는 SSAFY를 지원하게 된 동기, 향후 진로가 어떻게 될지<br>두 번째는 외부 활동을 하며 겪었던 경험에 대해서 물어 보았습니다.</p></blockquote></li><li>부가 인적 사항 : 장애인, 기초생활수급자 / 차상위계층</li></ul><p>지원서에서 가장 중요한 항목이였던 에세이.<br>질문의 의도를 캐치하면 다음과 같이 생각해 낼 수 있었어요!<br>내가 왜 SSAFY가 필요한지, 커리큘럼을 따라하면 내 미래가 어떻게 변할지에 대한 질문 이였던 것 같아요!</p></br><h4 id="Step-2-SW-적성-진단-11-16"><a href="#Step-2-SW-적성-진단-11-16" class="headerlink" title="Step 2) SW 적성 진단(11.16)"></a>Step 2) SW 적성 진단(11.16)</h4><p>SW 적성 진단은 총 60분 동안 진행 되었으며, 2가지의 온라인 테스트로 진행 되었습니다.</p><p>첫 번째 <code>수리/추리 논리 능력 진단</code>(30분)으로 말 그대로 수리, 추리, 논리 능력을 진단 하는 내용을 다뤘습니다.<br>두 번째 <code>Computational Thinking 진단</code>(30분)으로 문제를 컴퓨터 적인 생각으로 알고리즘을 생각해 진단 하는 내용을 다뤘습니다.(코딩 테스트가 아닌가 라는 생각으로 겁 먹었지만, 주어진 문제를 계산(알고리즘 풀이) 해 단답형 으로 제출하는 형식이였습니다, <del>그러나 1문제 맞췄나…😅😅</del>)</p><p>문제 유출은 금지 사항이므로 어떤 문제가 나왔는지는 말씀 드리기가 어렵군요!</p><h5 id="별도-사항"><a href="#별도-사항" class="headerlink" title="별도 사항"></a>별도 사항</h5><ul><li>진단 하는 동안 총 10번의 재 접속 가능</li><li>2개의 진단 모두 응시</li><li>선택한 시간 외 접속 불가</li><li>실제 진단에 필요한 보안 프로그램을 설치 후 응시</li><li>운영체제(OS) : Windows 7, Windows 8, Windows 10<br>해상도 : 1280 X 1024 이상 해상도 사용 권장<br>웹 브라우저 : Internet Explorer(10이상), Google Chrome(최신버전)<br>저는 mac 유저지만.. 이 날 만큼은 Windows로 진단을 봤어요!</li></ul><p>SW 적성 진단을 하면서 느낀점은 “아… 시작부터 불합격이 뜨겠구나” 이였지만 의외로 대부분의 지원자들이 합격 소식을 많이 들었어요! (그렇지만 저는 왜 합격한지 아직도 감사할 나름…!)</p></br><h4 id="Step-3-Interview-12-3-12-5"><a href="#Step-3-Interview-12-3-12-5" class="headerlink" title="Step 3) Interview(12.3 ~ 12.5)"></a>Step 3) Interview(12.3 ~ 12.5)</h4><p>삼성 청년 SW 아카데미 <code>3기 Interview 대상자</code>로 선정 되었지만, 준비를 어떻게 해야 하는지 몰랐고, SSAFY가 시작한지 1년이 되었지만 정보도 많이 없었던 것 같습니다.</p><p>먼저 Interview를 보기 전 <code>온라인 사전 학습</code>을 해야 했었는데요! 이는 안내 메일로 왔습니다.</p><p>온라인 사전 학습으로 3가지의 과정 중 1개의 과정을 선택해 학습을 진행하는 방식입니다.</p><ol><li>IT 트랜드</li><li>창의/열정</li><li>SW기초</li></ol><p>학습 기간 : 2019.11.23(토) 00:00 ~ 11.28(목) 23:59(총 6일) <code>지정된 학습 일정 이외에는 수강 불가</code></p><p>유의 사항으로는 사전 학습 미 수료의 경우에도 인터뷰는 참석 가능하지만, 선발 절차 중 하나 이므로, 성실히 수강 해야한다고 했습니다.</p><p>사전 학습을 통해 관련 분야의 지식을 얻을 수 있는 유익한 시간이 되었습니다.</p></br><p>이제 대망의 SSAFY Interview… 저는 12월 5일 Interview를 진행했습니다. </p><p>■ 일시 : 2019. 12. 5(목) 9:15</p><ul><li>예상 소요 시간 : 대기시간 포함 2시간 30분<br>저는 한 2시간 정도 걸렸던 것 같습니다! 😁</li></ul><p>■ 장소</p><ul><li>서울 삼성 금융 캠퍼스</li></ul><p>■ 내용</p><ul><li>Interview 안내</li><li>서류 확인</li><li>2차 SW 적성진단 (CBT)</li><li>Interview</li></ul><p>■ 복장</p><ul><li>Interview에 적합한 단정한 복장</li></ul><p>■ 준비물</p><ul><li>필수 서류 [원본]</li></ul><ol><li>신분증 (주민등록증/운전면허증/유효기간 만료전 여권에 한함)</li><li>4대보험 가입내역 확인서 (가입여부 확인)</li><li>졸업(예정)증명서, 성적 증명서 (석사인 경우 학사/석사 모두 지참)</li></ol><ul><li>기타 서류 : 대상자에 한함 (지원서에 기재한 자격 증빙)</li></ul><ol><li>[원본] : 병적(병역) 증명서, 어학성적 증명서, 장애인/기초생활수급 대상 확인서</li><li>[사본 가능] : 자격증, 수상내역 확인증, 경력 증명서 等 기타 서류</li></ol><p>※ 서울 外 지역에서 참석하시는 분들께는 소정의 면접비 지급 예정 (지원서에 기재한 주소 기준)<br>(면접비 까지주는 이런…😭😭)</p><p>처음 Interview 보는 것 치고는 분위기가 좋았습니다.<br>본인이 SSAFY가 왜 필요한지, 어떤 것을 해보고 싶은지 IT 관련해서 얼마나 관심을 갖고 있는지를 묻는 정말 제게 궁금한 점을 물어보는 인터뷰 시간이였습니다. 😲😲</p><p>본 Interview 내용은 <code>보안 서약서</code>를 작성 했기 때문에 Interview 진행 했던 사항은 말씀 드릴 수 없습니다!</p><p></br></br></p><h3 id="SSAFY-결과-발표"><a href="#SSAFY-결과-발표" class="headerlink" title="SSAFY 결과 발표"></a>SSAFY 결과 발표</h3><h4 id="길고도-긴…-기대하고-기대했던-결과-발표의-기다림…-🙏🙏"><a href="#길고도-긴…-기대하고-기대했던-결과-발표의-기다림…-🙏🙏" class="headerlink" title="길고도 긴… 기대하고 기대했던 결과 발표의 기다림… 🙏🙏"></a>길고도 긴… 기대하고 기대했던 결과 발표의 기다림… 🙏🙏</h4><p>2주 정도 기다린 것 같아요. 문자 메세지로 홈페이지에서 Interview 결과를 확인 하라고 왔습니다.<br>기다리던 순간… 결과 확인을 누르기가 정말 떨렸어요. 😭</p><div style="text-align: center;"><img src="/image/story/ssafy4.png" width="100%"></div><blockquote><p>이미지의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다.</p></blockquote><p>Interview 결과 합격이라는 단어를 본 순간 소리 질렀네요(당시 서울에서 부산으로 내려가는 기차 안이였는데 😂)<br>입과, 입과포기 란이있었는데 보자마자 입과 누르고 확인 했습니다.</p><div style="text-align: center;"><img src="/image/story/ssafy5.png" width="100%"></div><blockquote><p>이미지의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다.</p></blockquote><p>그리고 결과 발표 하루 뒤에 문자로 최종 합격 문자가 왔어요.<br>알고있던 결과라도 다시 확인하니 너무 행복했습니다. 😍😍</p><div style="text-align: center;"><img src="/image/story/ssafy6.png" width="100%"></div><p></br></br></p><p>부족한 부분이 있었는지 모르겠네요!! 이렇게 해서 SSAFY 3기를 합격하게 되었습니다!<br>좀 더 궁금한 사항이 있다면 댓글로 남겨주세요!</p><blockquote><p>썸네일의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SSAFY&quot;&gt;&lt;a href=&quot;#SSAFY&quot; class=&quot;headerlink&quot; title=&quot;SSAFY&quot;&gt;&lt;/a&gt;SSAFY&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Samsung Software Academy For Youth&lt;/code&gt;(삼성 청년 소프트웨어 아카데미) 서울 지역에 합격했습니다! 😘&lt;/p&gt;
&lt;p&gt;그런 의미로 이야기를 한 번 써내려 가려 합니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="story" scheme="https://msnodeve.github.io/categories/story/"/>
    
      <category term="ssafy" scheme="https://msnodeve.github.io/categories/story/ssafy/"/>
    
    
      <category term="SSAFY" scheme="https://msnodeve.github.io/tags/ssafy/"/>
    
      <category term="Samsung" scheme="https://msnodeve.github.io/tags/samsung/"/>
    
      <category term="Academy" scheme="https://msnodeve.github.io/tags/academy/"/>
    
      <category term="Software" scheme="https://msnodeve.github.io/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>Linux, CentOS 작업 스케쥴러 - Crontab</title>
    <link href="https://msnodeve.github.io/2019/12/09/devlog-linux-crontab/"/>
    <id>https://msnodeve.github.io/2019/12/09/devlog-linux-crontab/</id>
    <published>2019-12-09T07:46:52.000Z</published>
    <updated>2020-03-17T08:15:44.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Crontab"><a href="#Crontab" class="headerlink" title="Crontab?"></a>Crontab?</h1><p><code>Cron</code> 은 리눅스 에서 특정한 <code>명령</code>이나 <code>스크립트</code>를 지정한 <code>날짜/시간</code>에 자동으로 실행해 주는 <code>스케쥴러</code> 입니다.</p><p>주기적으로 시스템 백업 스크립트를 실행하는 등 시스템 관리자에 의해 많이 사용되며, 이외 반복적인 작업을 하기위해 사용될 수 있습니다.</p><a id="more"></a></br><h3 id="Crontab-활용-용도"><a href="#Crontab-활용-용도" class="headerlink" title="Crontab 활용 용도"></a>Crontab 활용 용도</h3><ul><li>30분 단위로 이메일을 전송 할 때</li><li>매주 일요일 새벽 4시에 서버를 재 시작 할 때</li></ul><p>위와 같이 반복적인 예약 작업이 필요할 때 다양하게 활용할 수 있는 도구 입니다.<br></br></br></p><h1 id="Install-crontab-CentOS"><a href="#Install-crontab-CentOS" class="headerlink" title="Install crontab - CentOS"></a>Install crontab - CentOS</h1><p><code>yum</code> 을 통해 <code>Crontab</code> 을 설치합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install cronie</span><br></pre></td></tr></table></figure><p><code>Crontab</code> 설치가 완료 되었다면, <code>Crontab</code> 서비스가 잘 작동 하고 있는지 확인합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start crond</span><br><span class="line">$ systemctl list-unit-files</span><br><span class="line"></span><br><span class="line">UNIT                        FILE STATE</span><br><span class="line">...</span><br><span class="line">crond.service               enabled</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></br></br></p><h1 id="How-to-use-crontab"><a href="#How-to-use-crontab" class="headerlink" title="How to use crontab?"></a>How to use crontab?</h1><h2 id="Crontab-리스트-조회"><a href="#Crontab-리스트-조회" class="headerlink" title="Crontab 리스트 조회"></a>Crontab 리스트 조회</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -l</span><br></pre></td></tr></table></figure><blockquote><p><code>crontab</code>에 등록된 스케쥴러 작업 리스트를 확인합니다.</p></blockquote><h2 id="Crontab-편집"><a href="#Crontab-편집" class="headerlink" title="Crontab 편집"></a>Crontab 편집</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br></pre></td></tr></table></figure><blockquote><p><code>crontab</code> 예약 작업 리스트를 편집 할 수 있는 에디터가 실행 되며, 편집합니다.</p></blockquote><h2 id="Crontab-리스트-삭제"><a href="#Crontab-리스트-삭제" class="headerlink" title="Crontab 리스트 삭제"></a>Crontab 리스트 삭제</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -r</span><br></pre></td></tr></table></figure><blockquote><p><code>crontab</code>에 등록된 모든 스케쥴러 작업 리스트를 삭제합니다.</p></blockquote><p></br></br></p><h2 id="Crontab-작성-방법"><a href="#Crontab-작성-방법" class="headerlink" title="Crontab 작성 방법"></a>Crontab 작성 방법</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * * * *  수행할 명령어</span><br><span class="line">┬ ┬ ┬ ┬ ┬</span><br><span class="line">│ │ │ │ │</span><br><span class="line">│ │ │ │ │</span><br><span class="line">│ │ │ │ └───────── 요일 (0 - 6) (0:일요일, 1:월요일, 2:화요일, …, 6:토요일)</span><br><span class="line">│ │ │ └───────── 월 (1 - 12)</span><br><span class="line">│ │ └───────── 일 (1 - 31)</span><br><span class="line">│ └───────── 시 (0 - 23)</span><br><span class="line">└───────── 분 (0 - 59)</span><br></pre></td></tr></table></figure><blockquote><p><code>crontab -e</code> 명령어를 사용해 위와 같은 형식으로 스케쥴러를 등록합니다.</p></blockquote><p></br></br></p><h1 id="Example-crontab"><a href="#Example-crontab" class="headerlink" title="Example crontab"></a>Example crontab</h1><p>간단한 텍스트를 파일에 쓰는 것을 해보겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br></pre></td></tr></table></figure><p><code>crontab</code> 편집기를 열고 작업을 등록합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * <span class="built_in">echo</span> <span class="string">"Hello 두번 개발하는 블로그"</span> &gt;&gt; ~/test.txt</span><br></pre></td></tr></table></figure><p><code>ESC + qw</code> 저장하고 밖으로 빠져 나옵니다.</p><p>1분이 지나게 되면 root 경로에 test.txt 파일이 생긴 것을 볼 수 있으며, 파일 내부에는 <code>Hello 두번 개발하는 블로그</code> 라는 텍스트가 작성 되어 있는 것을 볼 수 있습니다.</p><div style="text-align: center;"><img src="/image/devlog/linux/crontab.png" width="80%"></div><p></br></br></p><h1 id="다른-예제"><a href="#다른-예제" class="headerlink" title="다른 예제"></a>다른 예제</h1><h3 id="특정-시간에-실행-1"><a href="#특정-시간에-실행-1" class="headerlink" title="특정 시간에 실행 1"></a>특정 시간에 실행 1</h3><blockquote><p>매주 일요일 새벽 4시 20분에  test! 텍스트를 root 경로 밑 test.txt 파일에 작성</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 4 * * 0 <span class="built_in">echo</span> <span class="string">"test!"</span> &gt;&gt; ~/test.txt</span><br></pre></td></tr></table></figure><h3 id="특정-시간에-실행-2"><a href="#특정-시간에-실행-2" class="headerlink" title="특정 시간에 실행 2"></a>특정 시간에 실행 2</h3><blockquote><p>매주 화요일 오후 1시 30분, 40분, 50분에 test! 텍스트를 root 경로 밑 test.txt 파일에 작성</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10,20,30 13 * * 2 <span class="built_in">echo</span> <span class="string">"test!"</span> &gt;&gt; ~/test.txt</span><br></pre></td></tr></table></figure><p></br></br></p><h2 id="Crontab-작성-기호-종류"><a href="#Crontab-작성-기호-종류" class="headerlink" title="Crontab 작성 기호 종류"></a>Crontab 작성 기호 종류</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* <span class="comment"># 범위 내 모두 실행</span></span><br><span class="line">, <span class="comment"># 나열된 숫자 중 일치하는 값에 실행</span></span><br><span class="line">- <span class="comment"># 두 숫자 사이에 포함된 범위에 실행</span></span><br><span class="line">/ <span class="comment"># 지정한 숫자에 실행</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Crontab&quot;&gt;&lt;a href=&quot;#Crontab&quot; class=&quot;headerlink&quot; title=&quot;Crontab?&quot;&gt;&lt;/a&gt;Crontab?&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Cron&lt;/code&gt; 은 리눅스 에서 특정한 &lt;code&gt;명령&lt;/code&gt;이나 &lt;code&gt;스크립트&lt;/code&gt;를 지정한 &lt;code&gt;날짜/시간&lt;/code&gt;에 자동으로 실행해 주는 &lt;code&gt;스케쥴러&lt;/code&gt; 입니다.&lt;/p&gt;
&lt;p&gt;주기적으로 시스템 백업 스크립트를 실행하는 등 시스템 관리자에 의해 많이 사용되며, 이외 반복적인 작업을 하기위해 사용될 수 있습니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="devlog" scheme="https://msnodeve.github.io/categories/devlog/"/>
    
      <category term="linux" scheme="https://msnodeve.github.io/categories/devlog/linux/"/>
    
    
      <category term="Linux" scheme="https://msnodeve.github.io/tags/linux/"/>
    
      <category term="CentOS" scheme="https://msnodeve.github.io/tags/centos/"/>
    
      <category term="Infra" scheme="https://msnodeve.github.io/tags/infra/"/>
    
      <category term="Cron" scheme="https://msnodeve.github.io/tags/cron/"/>
    
      <category term="Crontab" scheme="https://msnodeve.github.io/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Blog 만들기</title>
    <link href="https://msnodeve.github.io/2019/10/31/hexo-blog-init/"/>
    <id>https://msnodeve.github.io/2019/10/31/hexo-blog-init/</id>
    <published>2019-10-31T06:51:02.000Z</published>
    <updated>2020-06-26T14:02:50.626Z</updated>
    
    <content type="html"><![CDATA[<p>ㅤ<a id="more"></a></p><h1 id="개발-환경"><a href="#개발-환경" class="headerlink" title="개발 환경"></a>개발 환경</h1><div style="text-align: center;"><img src="/image/blog/blog1.png" width="100%"></div></br></br><p><em>본 블로그는 Homebrew, iTerm 이 설치 되어있는 mac에서 진행 되었다는 점 참고 바랍니다.</em><br></br></br></p><h1 id="Blog를-만들기에-앞서-구성-환경-준비"><a href="#Blog를-만들기에-앞서-구성-환경-준비" class="headerlink" title="Blog를 만들기에 앞서 구성 환경 준비"></a><code>Blog</code>를 만들기에 앞서 구성 환경 준비</h1><blockquote><p>Node.js, Git, npm을 설치하도록 하겠습니다.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br><span class="line">$ node -v</span><br></pre></td></tr></table></figure><p></br></br></p><p><code>Node.js</code>가 정상적으로 설치 되었다면 다음과 같은 화면을 확인 할 수 있습니다</p><div style="text-align: center;"><img src="/image/blog/blog2.png" width="100%"></div></br></br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git</span><br><span class="line">$ git --version</span><br></pre></td></tr></table></figure><p></be></be></p><p><code>Git</code>이 정상적으로 설치가 되었다면 다음과 같은 화면을 확인 할 수 있습니다</p><div style="text-align: center;"><img src="/image/blog/blog3.png" width="100%"></div><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure><p><code>npm</code>이 정상적으로 설치가 되었다면 다음과 같은 화면을 확인 할 수 있습니다</p><div style="text-align: center;"><img src="/image/blog/blog4.png" width="100%"></div><br><br><h1 id="npm을-이용해서-hexo-설치하기"><a href="#npm을-이용해서-hexo-설치하기" class="headerlink" title="npm을 이용해서 hexo 설치하기"></a><code>npm</code>을 이용해서 <code>hexo</code> 설치하기</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>hexo가 정상적으로 설치가 되었다면 다음과 같은 화면을 확인 할 수 있습니다</p><div style="text-align: center;"><img src="/image/blog/blog5.png" width="100%"></div><p><br><br></p><h1 id="Hexo-시작하기"><a href="#Hexo-시작하기" class="headerlink" title="Hexo 시작하기"></a><code>Hexo</code> 시작하기</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init testBlog</span><br><span class="line">$ <span class="built_in">cd</span> testBlog</span><br><span class="line">$ npm install</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">다음과 같은 폴더 구조를 확인 할 수 있습니다</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"text-align: center;"</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">"/image/blog/blog6.png"</span> width=<span class="string">"100%"</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">```text</span><br><span class="line">    _config.yml 설정 파일</span><br><span class="line">    scaffolds   양식</span><br><span class="line">    <span class="built_in">source</span>      초안, 포스트 폴더</span><br><span class="line">    themes      테마 폴더</span><br><span class="line">    package.json</span><br></pre></td></tr></table></figure><p><br><br></p><p>로컬 에서 블로그를 실행해 보도록 하겠습니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><div style="text-align: center;"><img src="/image/blog/blog7.png" width="100%"></div><p><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a> 로 접속하게 되면 다음과 같은 화면을 확인 할 수 있습니다</p><div style="text-align: center;"><img src="/image/blog/blog8.png" width="100%"></div><br><br><h1 id="포스트-작성하기"><a href="#포스트-작성하기" class="headerlink" title="포스트 작성하기"></a>포스트 작성하기</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post [Post Name]</span><br></pre></td></tr></table></figure><p><code>./source/_posts/</code> 폴더에 생성한 <code>[Post Name] md</code> 파일을 확인 할 수 있습니다</p><div style="text-align: center;"><img src="/image/blog/blog9.png" width="100%"></div><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p><code>hexo</code>를 실행해 보면 <code>[Post Name]</code>이름으로 작성된 포스트를 확인 할 수 있습니다<br><br><br></p><h1 id="Github-계정-URL-만들기"><a href="#Github-계정-URL-만들기" class="headerlink" title="Github 계정 URL 만들기"></a>Github 계정 URL 만들기</h1><p><code>Github Repo</code> &gt; <code>Settings</code> &gt; <code>Options</code> &gt; <code>Github Pages</code> 의 <code>site url</code>를 정해 주도록 합니다.</p><div style="text-align: center;"><img src="/image/blog/blog10.png" width="100%"></div><br><br><h1 id="Github-Repo에-배포-준비하기"><a href="#Github-Repo에-배포-준비하기" class="headerlink" title="Github Repo에 배포 준비하기"></a><code>Github Repo</code>에 배포 준비하기</h1><p><code>_config.yml</code> 을 수정 하도록 하겠습니다</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">[제목]</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">[부</span> <span class="string">제목]</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">[설명]</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">[키</span> <span class="string">워드]</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">[저자]</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span> <span class="string">[언어]</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Seoul</span> <span class="string">[시간]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://msnodeve.github.io/</span> <span class="string">[위에서</span> <span class="string">정해준</span> <span class="string">Github</span> <span class="string">url]</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing index.html from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/msnodeve/msnodeve.github.io.git</span> <span class="string">[Github</span> <span class="string">repo</span> <span class="string">주소]</span></span><br></pre></td></tr></table></figure><p>[참고] <code>Github repo</code> 주소는 아래와 같이 확인 할 수 있습니다<br></br></br></p><div style="text-align: center;"><img src="/image/blog/blog11.png" width="100%"></div></br></br><h1 id="Github-Repo에-빌드-및-배포하기"><a href="#Github-Repo에-빌드-및-배포하기" class="headerlink" title="Github Repo에 빌드 및 배포하기"></a><code>Github Repo</code>에 빌드 및 배포하기</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p><code>hexo generate</code> 와 <code>hexo deploy</code> 를 간략히 다음과 같이 표현 할 수 있습니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><p></br></br><br>로컬 에서 포스트 작성, 설정 및 변경을 하고 결과를 확인한 후, 빌드 및 배포하는 식으로 작업합니다 배포가 되면 <a href="https://msnodeve.github.io/">msnodeve.github.io</a> 으로 접속해서 확인합니다</p><p>그렇다고 로컬에서 변경된 사항이 <code>Github Repo</code>에 <code>Commit</code> 된 것은 아닙니다 따라서 최종적인 확인 끝에 변경 사항과 수정 사항을 체크하여 <code>Commit</code>을 하는 것이 좋습니다</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ㅤ
    
    </summary>
    
    
      <category term="blog" scheme="https://msnodeve.github.io/categories/blog/"/>
    
      <category term="hexo" scheme="https://msnodeve.github.io/categories/blog/hexo/"/>
    
    
      <category term="Hexo" scheme="https://msnodeve.github.io/tags/hexo/"/>
    
      <category term="Blog" scheme="https://msnodeve.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Flask REST API CRUD Board Auth 그리고 암호화(5) - [Backend Framework]</title>
    <link href="https://msnodeve.github.io/2019/08/06/flask-restapi-example5/"/>
    <id>https://msnodeve.github.io/2019/08/06/flask-restapi-example5/</id>
    <published>2019-08-06T04:32:06.000Z</published>
    <updated>2020-06-22T02:16:59.494Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="INDEX"><a href="#INDEX" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2019/07/30/flask-restapi-example1/">Flask RESTPlus CRUD Board 만들기 실행 (1)</a></li><li><a href="https://msnodeve.github.io/2019/08/01/flask-restapi-example2/">Flask RESTPlus CRUD Board 만들기 설정 및 MySQL (2)</a></li><li><a href="https://msnodeve.github.io/2019/08/04/flask-restapi-example3/">Flask RESTPlus CRUD Board 만들기 ORM 그리고 Model (3)</a></li><li><a href="https://msnodeve.github.io/2019/08/05/flask-restapi-example4/">Flask RESTPlus CRUD Board 만들기 MVC 그리고 REST API Swagger (4)</a></li><li><a href="https://msnodeve.github.io/2019/08/06/flask-restapi-example5/">Flask RESTPlus CRUD Board 만들기 Auth 그리고 암호화 (5)</a></li></ul><p></br></br></p><p><font size="2em">이번 포스트는 macOS Mojave 10.14.5 에서 수행된 작업입니다.</font></p><h1 id="개발-환경"><a href="#개발-환경" class="headerlink" title="개발 환경"></a>개발 환경</h1><ul><li>MacBook Pro (13-inch, 2017, Four Thunderbolt 3 Ports)</li><li>Python 3.7</li><li>vscode</li><li>Docker-Compose version 1.23.2, build 1110ad01</li></ul><p></br></br></p><h1 id="Authorization-붙이기-PyJwt-Password-암호화"><a href="#Authorization-붙이기-PyJwt-Password-암호화" class="headerlink" title="Authorization 붙이기 (PyJwt), Password 암호화"></a>Authorization 붙이기 (PyJwt), Password 암호화</h1><p>먼저, 클라이언트 측에서 회원가입을 할 때, <code>Password</code>를 <code>Database</code>에 저장 때는 <code>암호화</code> 해서 넣어야 합니다<br><del>(개발자가 사용자 비밀번호 까지 알아서 뭐 할려고?)</del></p><p>그러기 위해서는 <code>Bcrypt</code>를 사용해 암호화를 진행 할 것이며, 암호화 한 것을 <code>Database</code>에 저장하고, 사용자가 로그인 할 때, 서버에서 발급해주는 <code>Token</code>을 이용해 API를 사용할 것 입니다 <code>Token</code>이 없다면 <code>API</code>의 요청은 <code>거절</code> 하도록 만들 것 입니다</p><p>해봅시다!</p><p><code>PyJwt</code> 종속성을 설치합니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pipenv install PyJwt</span><br></pre></td></tr></table></figure><p></br></br></p><p><code>데코레이터</code>를 이용해서 구현한 <code>API</code>에 붙여 주도록 하곘습니다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/api/auth_type.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request, Response</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line">SECERET_KEY = <span class="string">"Secret Hellow"</span></span><br><span class="line">ACCESS_TOKEN = &#123;</span><br><span class="line">    <span class="string">'Access Token'</span>: &#123;</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'apiKey'</span>,</span><br><span class="line">        <span class="string">'in'</span>: <span class="string">'header'</span>,</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'Authorization'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">BASIC_AUTH = &#123;</span><br><span class="line"><span class="string">'Basic Auth'</span>: &#123;</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'basic'</span>,</span><br><span class="line">        <span class="string">'in'</span>: <span class="string">'header'</span>,</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'Authorization'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">confirm_token</span><span class="params">(f)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(f)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorated_function</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        access_token = request.headers[<span class="string">'Authorization'</span>]</span><br><span class="line">        <span class="keyword">if</span> access_token <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                payload = jwt.decode(access_token, SECERET_KEY, <span class="string">"HS256"</span>)</span><br><span class="line">            <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">                payload = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">if</span> payload <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> Response(status=<span class="number">401</span>)</span><br><span class="line">            user_id = payload[<span class="string">"user_id"</span>]</span><br><span class="line">            <span class="comment"># 원하는 작업</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(status=<span class="number">401</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> decorated_function</span><br></pre></td></tr></table></figure><p></br></br></p><p><code>REST API Documents</code>에 <code>Authorization</code>을 보여주기 위해 위와 같은 코드를 작성하고,<br><code>Token 발급</code>을 위해 다음과 같이 코드를 작성하겠습니다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/api/__init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    API config file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Api</span><br><span class="line"><span class="keyword">from</span> app.users.views <span class="keyword">import</span> API <span class="keyword">as</span> users_api</span><br><span class="line"><span class="keyword">from</span> app.posts.views <span class="keyword">import</span> API <span class="keyword">as</span> posts_api</span><br><span class="line"><span class="keyword">from</span> app.api.auth_type <span class="keyword">import</span> ACCESS_TOKEN, BASIC_AUTH</span><br><span class="line"></span><br><span class="line">REST_API = Api(authorizations=&#123;**ACCESS_TOKEN, **BASIC_AUTH&#125;)</span><br><span class="line"></span><br><span class="line">REST_API.add_namespace(users_api, <span class="string">'/user'</span>)</span><br><span class="line">REST_API.add_namespace(posts_api, <span class="string">'/post'</span>)</span><br></pre></td></tr></table></figure><p></br></br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/users/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    User views file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> bcrypt</span><br><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> HTTPStatus</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify, make_response</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.exc <span class="keyword">import</span> SQLAlchemyError</span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Namespace, Resource, reqparse, fields</span><br><span class="line"><span class="keyword">from</span> app.users.models <span class="keyword">import</span> Users, UsersSchema</span><br><span class="line"><span class="keyword">from</span> app.api.database <span class="keyword">import</span> DB</span><br><span class="line"><span class="keyword">from</span> app.api.auth_type <span class="keyword">import</span> SECERET_KEY</span><br><span class="line"></span><br><span class="line">API = Namespace(<span class="string">'Users'</span>, description=<span class="string">"User's RESTPlus - API"</span>)</span><br><span class="line">USERS_SCHEMA = UsersSchema()</span><br><span class="line"></span><br><span class="line"><span class="meta">@API.route('s')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersAuth</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    parser = reqparse.RequestParser()</span><br><span class="line">    parser.add_argument(<span class="string">'user_id'</span>, required=<span class="literal">True</span>, type=str,</span><br><span class="line">                        help=<span class="string">"User's ID"</span>, location=<span class="string">'json'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'user_password'</span>, required=<span class="literal">True</span>,</span><br><span class="line">                        type=str, help=<span class="string">"User's PW"</span>, location=<span class="string">'json'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'user_email'</span>, required=<span class="literal">True</span>, type=str,</span><br><span class="line">                        help=<span class="string">"User's Email"</span>, location=<span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line">    users_field = API.model(<span class="string">'userRegister'</span>, &#123;</span><br><span class="line">        <span class="string">'user_id'</span>: fields.String,</span><br><span class="line">        <span class="string">'user_password'</span>: fields.String,</span><br><span class="line">        <span class="string">'user_email'</span>: fields.String</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @API.doc('post')</span></span><br><span class="line"><span class="meta">    @API.expect(users_field)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        args_ = self.parser.parse_args()</span><br><span class="line">        password = args_[<span class="string">'user_password'</span>]</span><br><span class="line">        hash_pw = bcrypt.hashpw(password.encode(<span class="string">'utf-8'</span>), bcrypt.gensalt())</span><br><span class="line">        user = Users(args_[<span class="string">'user_id'</span>], hash_pw, args_[<span class="string">'user_email'</span>])</span><br><span class="line">        <span class="keyword">return</span> user.add(user, USERS_SCHEMA)</span><br><span class="line"></span><br><span class="line"><span class="meta">@API.route('/auth')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAuth</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    parser = reqparse.RequestParser()</span><br><span class="line">    parser.add_argument(<span class="string">'user_id'</span>, required=<span class="literal">True</span>, type=str,</span><br><span class="line">                        help=<span class="string">"User's ID"</span>, location=<span class="string">'json'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'user_password'</span>, required=<span class="literal">True</span>,</span><br><span class="line">                        type=str, help=<span class="string">"User's PW"</span>, location=<span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line">    user_login_field = API.model(<span class="string">'userLogin'</span>, &#123;</span><br><span class="line">        <span class="string">'user_id'</span>: fields.String,</span><br><span class="line">        <span class="string">'user_password'</span>: fields.String</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @API.doc('post')</span></span><br><span class="line"><span class="meta">    @API.expect(user_login_field)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        args_ = self.parser.parse_args()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = Users.query.filter(Users.user_id == args_[<span class="string">'user_id'</span>]).first()</span><br><span class="line">            <span class="keyword">if</span> bcrypt.checkpw(args_[<span class="string">'user_password'</span>].encode(<span class="string">'utf-8'</span>), user.user_password.encode(<span class="string">'utf-8'</span>)):</span><br><span class="line">                <span class="comment"># token 발급</span></span><br><span class="line">                payload = &#123;</span><br><span class="line">                    <span class="string">'user_id'</span> : user.user_id</span><br><span class="line">                &#125;</span><br><span class="line">                token = jwt.encode(payload, SECERET_KEY, <span class="string">"HS256"</span>)</span><br><span class="line">                body = jsonify(&#123;<span class="string">'access_token'</span>: token.decode(<span class="string">'utf-8'</span>),<span class="string">'user'</span>: user.id&#125;)</span><br><span class="line">            <span class="keyword">if</span> user:</span><br><span class="line">                code = HTTPStatus.OK</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                code = HTTPStatus.NOT_FOUND</span><br><span class="line">        <span class="keyword">except</span> SQLAlchemyError <span class="keyword">as</span> err:</span><br><span class="line">            body = jsonify(&#123;<span class="string">'message'</span>: str(err)&#125;)</span><br><span class="line">            code = HTTPStatus.INTERNAL_SERVER_ERROR</span><br><span class="line">        <span class="keyword">return</span> make_response(body, code.value)</span><br></pre></td></tr></table></figure><p>발급한 <code>Token</code>을 클라이언트 측에서 저장을 한 뒤 발급받은 토큰을 서버로 <code>Header</code> 부분에 담아 데이터를 전송하여 맞으면 <code>API요청</code>을 받는 코드를 작성하도록 하겠습니다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /app/posts/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Posts view file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Namespace, Resource, reqparse, fields</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify, make_response</span><br><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> HTTPStatus</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.exc <span class="keyword">import</span> SQLAlchemyError</span><br><span class="line"><span class="keyword">from</span> app.posts.models <span class="keyword">import</span> Posts, PostsSchema</span><br><span class="line"><span class="keyword">from</span> app.users.models <span class="keyword">import</span> Users, UsersSchema</span><br><span class="line"><span class="keyword">from</span> app.api.database <span class="keyword">import</span> DB</span><br><span class="line"><span class="keyword">from</span> app.api.auth_type <span class="keyword">import</span> confirm_token, ACCESS_TOKEN, BASIC_AUTH</span><br><span class="line"></span><br><span class="line">API = Namespace(<span class="string">'Posts'</span>, description=<span class="string">"Post's REST API"</span>)</span><br><span class="line">POSTS_SCHEMA = PostsSchema()</span><br><span class="line"></span><br><span class="line"><span class="meta">@API.route('s')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    parser = reqparse.RequestParser()</span><br><span class="line">    parser.add_argument(<span class="string">'author_id'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"Post's author ID"</span>, location=<span class="string">'json'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'title'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"Post's title"</span>, location=<span class="string">'json'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'body'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"Post's body"</span>, location=<span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line">    post_field = API.model(<span class="string">'Post'</span>, &#123;</span><br><span class="line">        <span class="string">'author_id'</span>: fields.String,</span><br><span class="line">        <span class="string">'title'</span>: fields.String,</span><br><span class="line">        <span class="string">'body'</span>: fields.String</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @API.doc('get')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            posts = Posts.query.all()</span><br><span class="line">            body = jsonify(POSTS_SCHEMA.dump(posts, many=<span class="literal">True</span>).data)</span><br><span class="line">            <span class="keyword">if</span> posts:</span><br><span class="line">                code = HTTPStatus.OK</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                code = HTTPStatus.NOT_FOUND</span><br><span class="line">        <span class="keyword">except</span> SQLAlchemyError <span class="keyword">as</span> err:</span><br><span class="line">            body = jsonify(&#123;<span class="string">'message'</span> : str(err)&#125;)</span><br><span class="line">            code = HTTPStatus.INTERNAL_SERVER_ERROR</span><br><span class="line">        <span class="keyword">return</span> make_response(body, code.value)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @API.expect(post_field)</span></span><br><span class="line"><span class="meta">    @confirm_token</span></span><br><span class="line"><span class="meta">    @API.doc('post', security=ACCESS_TOKEN)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        args_ = self.parser.parse_args()</span><br><span class="line">        post = Posts(author_id=args_[<span class="string">'author_id'</span>], title=args_[<span class="string">'title'</span>], body=args_[<span class="string">'body'</span>])</span><br><span class="line">        <span class="keyword">return</span> post.add(post, POSTS_SCHEMA)</span><br><span class="line"></span><br><span class="line"><span class="meta">@API.route('/&lt;int:reqno&gt;')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostItem</span><span class="params">(Resource)</span>:</span></span><br><span class="line"><span class="meta">    @confirm_token</span></span><br><span class="line"><span class="meta">    @API.doc('get', security=ACCESS_TOKEN)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, reqno)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            post = DB.session.query(Posts).outerjoin(</span><br><span class="line">                Users, Users.user_id == Posts.author_id).filter(Posts.id==reqno).first()</span><br><span class="line">            body = POSTS_SCHEMA.dump(post).data</span><br><span class="line">            <span class="keyword">if</span> post:</span><br><span class="line">                code = HTTPStatus.OK</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                code = HTTPStatus.NOT_FOUND</span><br><span class="line">        <span class="keyword">except</span> SQLAlchemyError <span class="keyword">as</span> err:</span><br><span class="line">            body = jsonify(&#123;<span class="string">'message'</span> : str(err)&#125;)</span><br><span class="line">            code = HTTPStatus.INTERNAL_SERVER_ERROR</span><br><span class="line">        <span class="keyword">return</span> make_response(body, code.value)</span><br></pre></td></tr></table></figure><p><code>Post Class</code>의 <code>post함수</code>를 보게 되면 <code>데코레이터</code>로 <code>confirm_token</code> 을 붙인 것을 볼 수 있습니다 이 <code>API</code>로 요청이 왔을 때 먼저 토큰이 있는지 검사하고 통과 되면 <code>Post함수</code>를 실행하게 되는 구조입니다<br></br></br></p><p>실행을 해봅시다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py run</span><br></pre></td></tr></table></figure><p></br></br><br>아래와 같은 화면을 볼 수 있으며 각각 실행을 해보세요!</p><div style="text-align: center;"><img src="/image/flask/backend-flask-restplus13.png" width="100%"></div></br></br><p>최종적인 폴더 구조는 다음과 같습니다</p><div style="text-align: center;"><img src="/image/flask/backend-flask-restplus14.png" width="40%"></div></br></br></br></br><p>고생하셨습니다! 지금까지 따라와주셔서 정말 감사드리며 여기까지 하게 되면 <code>Flask</code> <code>프레임워크의</code> 기본을 할 수 있게 된 것 입니다!</p><p><br><br></p><h2 id="INDEX-1"><a href="#INDEX-1" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2019/07/30/flask-restapi-example1/">Flask RESTPlus CRUD Board 만들기 실행 (1)</a></li><li><a href="https://msnodeve.github.io/2019/08/01/flask-restapi-example2/">Flask RESTPlus CRUD Board 만들기 설정 및 MySQL (2)</a></li><li><a href="https://msnodeve.github.io/2019/08/04/flask-restapi-example3/">Flask RESTPlus CRUD Board 만들기 ORM 그리고 Model (3)</a></li><li><a href="https://msnodeve.github.io/2019/08/05/flask-restapi-example4/">Flask RESTPlus CRUD Board 만들기 MVC 그리고 REST API Swagger (4)</a></li><li><a href="https://msnodeve.github.io/2019/08/06/flask-restapi-example5/">Flask RESTPlus CRUD Board 만들기 Auth 그리고 암호화 (5)</a></li></ul><p></br></br></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;다섯번째-단계&quot;&gt;&lt;a href=&quot;#다섯번째-단계&quot; class=&quot;headerlink&quot; title=&quot;다섯번째 단계&quot;&gt;&lt;/a&gt;다섯번째 단계&lt;/h3&gt;&lt;p&gt;이번 포스트에서는 vscode 개발환경에서 Flask Framework Auth, 암호화에 대해서 알아보는 시간을 가져 보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;플라스크&lt;/code&gt; &lt;code&gt;Flask&lt;/code&gt; &lt;code&gt;vscode&lt;/code&gt; &lt;code&gt;Framework&lt;/code&gt; &lt;code&gt;암호화&lt;/code&gt; &lt;code&gt;Auth&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="backend" scheme="https://msnodeve.github.io/categories/backend/"/>
    
      <category term="framework" scheme="https://msnodeve.github.io/categories/backend/framework/"/>
    
      <category term="python" scheme="https://msnodeve.github.io/categories/backend/framework/python/"/>
    
      <category term="flask" scheme="https://msnodeve.github.io/categories/backend/framework/python/flask/"/>
    
    
      <category term="Backend" scheme="https://msnodeve.github.io/tags/backend/"/>
    
      <category term="Framework" scheme="https://msnodeve.github.io/tags/framework/"/>
    
      <category term="Flask" scheme="https://msnodeve.github.io/tags/flask/"/>
    
      <category term="Python" scheme="https://msnodeve.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Flask REST API CRUD Board 만들기 MVC 그리고 REST API Swagger(4) - [Backend Framework]</title>
    <link href="https://msnodeve.github.io/2019/08/05/flask-restapi-example4/"/>
    <id>https://msnodeve.github.io/2019/08/05/flask-restapi-example4/</id>
    <published>2019-08-05T04:07:25.000Z</published>
    <updated>2020-06-22T02:16:26.539Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="INDEX"><a href="#INDEX" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2019/07/30/flask-restapi-example1/">Flask RESTPlus CRUD Board 만들기 실행 (1)</a></li><li><a href="https://msnodeve.github.io/2019/08/01/flask-restapi-example2/">Flask RESTPlus CRUD Board 만들기 설정 및 MySQL (2)</a></li><li><a href="https://msnodeve.github.io/2019/08/04/flask-restapi-example3/">Flask RESTPlus CRUD Board 만들기 ORM 그리고 Model (3)</a></li><li><a href="https://msnodeve.github.io/2019/08/05/flask-restapi-example4/">Flask RESTPlus CRUD Board 만들기 MVC 그리고 REST API Swagger (4)</a></li><li><a href="https://msnodeve.github.io/2019/08/06/flask-restapi-example5/">Flask RESTPlus CRUD Board 만들기 Auth 그리고 암호화 (5)</a></li></ul><p></br></br></p><p><font size="2em">이번 포스트는 macOS Mojave 10.14.5 에서 수행된 작업입니다.</font></p><h1 id="개발-환경"><a href="#개발-환경" class="headerlink" title="개발 환경"></a>개발 환경</h1><ul><li>MacBook Pro (13-inch, 2017, Four Thunderbolt 3 Ports)</li><li>Python 3.7</li><li>vscode</li><li>Docker-Compose version 1.23.2, build 1110ad01</li></ul><p></br></br></p><h1 id="RESTPlus-라이브러리를-사용해-REST-API-만들기-Users-Part"><a href="#RESTPlus-라이브러리를-사용해-REST-API-만들기-Users-Part" class="headerlink" title="RESTPlus 라이브러리를 사용해 REST API 만들기(Users Part)"></a>RESTPlus 라이브러리를 사용해 REST API 만들기(Users Part)</h1><p><code>flask-restplus</code> 종속성을 설치합니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install flask-restplus</span><br></pre></td></tr></table></figure><p></br></br></p><p>이제 <code>app</code>에 설치한 <code>RESTPlus</code>를 달아 봅시다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/__init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    APP을 실행하기 위해 config file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> app.api.database <span class="keyword">import</span> DB, MA</span><br><span class="line"><span class="keyword">from</span> app.api <span class="keyword">import</span> REST_API</span><br><span class="line"><span class="keyword">from</span> app.constants <span class="keyword">import</span> SQLALCHEMY_DATABASE_URI_FORMAT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">()</span>-&gt;(Flask):</span></span><br><span class="line">    <span class="string">""" create_app()을 호출하여 app을 초기화 """</span></span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    app.app_context().push()</span><br><span class="line">    </span><br><span class="line">    app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = SQLALCHEMY_DATABASE_URI_FORMAT</span><br><span class="line">    app.config[<span class="string">'SQLALCHEMY_ECHO'</span>] = <span class="literal">True</span></span><br><span class="line">    app.config[<span class="string">'DEBUG'</span>] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    DB.init_app(app)</span><br><span class="line">    REST_API.init_app(app)</span><br><span class="line">    MA.init_app(app)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><p></br></br></p><p><code>MVC</code> 패턴을 이용해 <code>User</code> 부분을 작성합니다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/users/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    User views file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> HTTPStatus</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify, make_response</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.exc <span class="keyword">import</span> SQLAlchemyError</span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Namespace, Resource, reqparse, fields</span><br><span class="line"><span class="keyword">from</span> app.users.models <span class="keyword">import</span> Users, UsersSchema</span><br><span class="line"><span class="keyword">from</span> app.api.database <span class="keyword">import</span> DB</span><br><span class="line"></span><br><span class="line">API = Namespace(<span class="string">'Users'</span>, description=<span class="string">"User's RESTPlus - API"</span>)</span><br><span class="line">USERS_SCHEMA = UsersSchema()</span><br><span class="line"></span><br><span class="line"><span class="meta">@API.route('s')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersAuth</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    parser = reqparse.RequestParser()</span><br><span class="line">    parser.add_argument(<span class="string">'user_id'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"User's ID"</span>, location=<span class="string">'json'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'user_password'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"User's PW"</span>, location=<span class="string">'json'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'user_email'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"User's Email"</span>, location=<span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line">    users_field = API.model(<span class="string">'Sign up'</span>, &#123;</span><br><span class="line">        <span class="string">'user_id'</span> : fields.String,</span><br><span class="line">        <span class="string">'user_password'</span> : fields.String,</span><br><span class="line">        <span class="string">'user_email'</span> : fields.String</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @API.doc('post')</span></span><br><span class="line"><span class="meta">    @API.expect(users_field)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        args_ = self.parser.parse_args()</span><br><span class="line">        user = Users(args_[<span class="string">'user_id'</span>], args_[<span class="string">'user_password'</span>], args_[<span class="string">'user_email'</span>])</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            DB.session.add(user)</span><br><span class="line">            DB.session.commit()</span><br><span class="line">            body = jsonify(&#123;<span class="string">'users'</span> : USERS_SCHEMA.dump(user).data&#125;)</span><br><span class="line">            code = HTTPStatus.OK</span><br><span class="line">        <span class="keyword">except</span> SQLAlchemyError <span class="keyword">as</span> err:</span><br><span class="line">            DB.session.rollback()</span><br><span class="line">            body = jsonify(&#123;<span class="string">'message'</span> : str(err)&#125;)</span><br><span class="line">            code = HTTPStatus.INTERNAL_SERVER_ERROR</span><br><span class="line">        <span class="keyword">return</span> make_response(body, code.value)</span><br><span class="line"></span><br><span class="line"><span class="meta">@API.route('/auth')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAuth</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    parser = reqparse.RequestParser()</span><br><span class="line">    parser.add_argument(<span class="string">'user_id'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"User's ID"</span>, location=<span class="string">'json'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'user_password'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"User's PW"</span>, location=<span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line">    user_login_field = API.model(<span class="string">'Sign in'</span>, &#123;</span><br><span class="line">        <span class="string">'user_id'</span> : fields.String,</span><br><span class="line">        <span class="string">'user_password'</span> : fields.String</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @API.doc('post')</span></span><br><span class="line"><span class="meta">    @API.expect(user_login_field)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        args_ = self.parser.parse_args()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = Users.query.filter(Users.user_id == args_[<span class="string">'user_id'</span>]).first()</span><br><span class="line">            body = jsonify(&#123;<span class="string">'user_id'</span> : user.user_id&#125;)</span><br><span class="line">            code = HTTPStatus.OK</span><br><span class="line">        <span class="keyword">except</span> SQLAlchemyError <span class="keyword">as</span> err:</span><br><span class="line">            body = jsonify(&#123;<span class="string">'message'</span> : str(err)&#125;)</span><br><span class="line">            code = HTTPStatus.INTERNAL_SERVER_ERROR</span><br><span class="line">        <span class="keyword">return</span> make_response(body, code.value)</span><br></pre></td></tr></table></figure><p></br></br></p><p><code>Swagger</code>를 달아 <code>API</code>를 호출 할수있는 <code>Docs</code>를 만듭시다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/api/**init**.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Api</span><br><span class="line"><span class="keyword">from</span> app.users.views <span class="keyword">import</span> API <span class="keyword">as</span> users_api</span><br><span class="line"></span><br><span class="line">REST_API = Api()</span><br><span class="line"></span><br><span class="line">REST_API.add_namespace(users_api, <span class="string">'/user'</span>)</span><br></pre></td></tr></table></figure><p></br></br></p><p>앱을 한번 실행해 봅시다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py run</span><br></pre></td></tr></table></figure><div style="text-align: center;"><img src="/image/backend-flask-restplus11.png" width="100%"></div></br></br></br><h1 id="RESTPlus-API-만들기-Posts-Part"><a href="#RESTPlus-API-만들기-Posts-Part" class="headerlink" title="RESTPlus API 만들기(Posts Part)"></a>RESTPlus API 만들기(Posts Part)</h1><p>이전 포스트와 같이 <code>Posts</code>에 대한 <code>Model</code>을 만듭니다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/posts/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Posts model file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.api.database <span class="keyword">import</span> DB, MA</span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields, validate</span><br><span class="line"><span class="keyword">from</span> app.users.models <span class="keyword">import</span> Users, UsersSchema</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Posts</span><span class="params">(DB.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'posts'</span></span><br><span class="line">    __table_args__ = &#123;<span class="string">'mysql_collate'</span>: <span class="string">'utf8_general_ci'</span>&#125;</span><br><span class="line"></span><br><span class="line">    id = DB.Column(DB.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    author_id = DB.Column(DB.String(<span class="number">255</span>), DB.ForeignKey(Users.user_id))</span><br><span class="line">    title = DB.Column(DB.String(<span class="number">512</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    body = DB.Column(DB.String(<span class="number">1024</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    author = DB.relationship(<span class="string">'Users'</span>, uselist=<span class="literal">False</span>)</span><br><span class="line">    created = DB.Column(DB.TIMESTAMP, server_default=text(<span class="string">"CURRENT_TIMESTAMP"</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, author_id, title, body)</span>:</span></span><br><span class="line">        self.author_id = author_id</span><br><span class="line">        self.title = title</span><br><span class="line">        self.body = body</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsSchema</span><span class="params">(MA.Schema)</span>:</span></span><br><span class="line">    not_blank = validate.Length(min=<span class="number">1</span>, error=<span class="string">'Field cannot be blank'</span>)</span><br><span class="line">    id = fields.Integer()</span><br><span class="line">    author_id = fields.String(validate=not_blank)</span><br><span class="line">    title = fields.String(validate=not_blank)</span><br><span class="line">    body = fields.String(validate=not_blank)</span><br><span class="line">    author = fields.Nested(UsersSchema)</span><br><span class="line">    created = fields.String(validate=not_blank)</span><br></pre></td></tr></table></figure><p></br></br></p><p><code>MVC</code> 패턴을 이용해 <code>Posts</code> 부분을 작성합니다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/posts/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Posts view file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Namespace, Resource, reqparse, fields</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify, make_response</span><br><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> HTTPStatus</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.exc <span class="keyword">import</span> SQLAlchemyError</span><br><span class="line"><span class="keyword">from</span> app.posts.models <span class="keyword">import</span> Posts, PostsSchema</span><br><span class="line"><span class="keyword">from</span> app.users.models <span class="keyword">import</span> Users, UsersSchema</span><br><span class="line"><span class="keyword">from</span> app.api.database <span class="keyword">import</span> DB</span><br><span class="line"></span><br><span class="line">API = Namespace(<span class="string">'Posts'</span>, description=<span class="string">"Post's REST API"</span>)</span><br><span class="line">POSTS_SCHEMA = PostsSchema()</span><br><span class="line"></span><br><span class="line"><span class="meta">@API.route('s')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    parser = reqparse.RequestParser()</span><br><span class="line">    parser.add_argument(<span class="string">'author_id'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"Post's author ID"</span>, location=<span class="string">'json'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'title'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"Post's title"</span>, location=<span class="string">'json'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'body'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"Post's body"</span>, location=<span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line">    post_field = API.model(<span class="string">'Post'</span>, &#123;</span><br><span class="line">        <span class="string">'author_id'</span>: fields.String,</span><br><span class="line">        <span class="string">'title'</span>: fields.String,</span><br><span class="line">        <span class="string">'body'</span>: fields.String</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @API.doc('get')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            posts = Posts.query.all()</span><br><span class="line">            body = jsonify(POSTS_SCHEMA.dump(posts, many=<span class="literal">True</span>).data)</span><br><span class="line">            code = HTTPStatus.OK</span><br><span class="line">        <span class="keyword">except</span> SQLAlchemyError <span class="keyword">as</span> err:</span><br><span class="line">            body = jsonify(&#123;<span class="string">'message'</span> : str(err)&#125;)</span><br><span class="line">            code = HTTPStatus.INTERNAL_SERVER_ERROR</span><br><span class="line">        <span class="keyword">return</span> make_response(body, code.value)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @API.expect(post_field)</span></span><br><span class="line"><span class="meta">    @API.doc('post')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        args_ = self.parser.parse_args()</span><br><span class="line">        post = Posts(author_id=args_[<span class="string">'author_id'</span>], title=args_[<span class="string">'title'</span>], body=args_[<span class="string">'body'</span>])</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            DB.session.add(post)</span><br><span class="line">            DB.session.commit()</span><br><span class="line">            body = jsonify(&#123;<span class="string">'post'</span>, POSTS_SCHEMA.dump(post).data&#125;)</span><br><span class="line">            code = HTTPStatus.OK</span><br><span class="line">        <span class="keyword">except</span> SQLAlchemyError <span class="keyword">as</span> err:</span><br><span class="line">            body = jsonify(&#123;<span class="string">'message'</span> : str(err)&#125;)</span><br><span class="line">            code = HTTPStatus.INTERNAL_SERVER_ERROR</span><br><span class="line">        <span class="keyword">return</span> make_response(body, code.value)</span><br><span class="line"></span><br><span class="line"><span class="meta">@API.route('/&lt;int:reqno&gt;')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostItem</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, reqno)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            post = DB.session.query(Posts).outerjoin(</span><br><span class="line">                Users, Users.user_id == Posts.author_id).filter(Posts.id==reqno).first()</span><br><span class="line">            body = jsonify(&#123;<span class="string">'post'</span> : POSTS_SCHEMA.dump(post).data&#125;)</span><br><span class="line">            code = HTTPStatus.OK</span><br><span class="line">        <span class="keyword">except</span> SQLAlchemyError <span class="keyword">as</span> err:</span><br><span class="line">            body = jsonify(&#123;<span class="string">'message'</span> : str(err)&#125;)</span><br><span class="line">            code = HTTPStatus.INTERNAL_SERVER_ERROR</span><br><span class="line">        <span class="keyword">return</span> make_response(body, code.value)</span><br></pre></td></tr></table></figure><p></br></br></p><p><code>Swagger</code>를 달아 <code>API</code>를 호출 할수있는 <code>Docs</code>를 만듭시다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/api/__init__.py</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    API config file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Api</span><br><span class="line"><span class="keyword">from</span> app.posts.views <span class="keyword">import</span> API <span class="keyword">as</span> posts_api</span><br><span class="line"></span><br><span class="line">REST_API = Api()</span><br><span class="line"></span><br><span class="line">REST_API.add_namespace(users_api, <span class="string">'/user'</span>)</span><br><span class="line">REST_API.add_namespace(posts_api, <span class="string">'/post'</span>)</span><br></pre></td></tr></table></figure><p></br></br></br></p><h1 id="MVC-Model-View-Controller-분리"><a href="#MVC-Model-View-Controller-분리" class="headerlink" title="MVC(Model, View, Controller) 분리"></a>MVC(Model, View, Controller) 분리</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/api/database.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Create db</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> HTTPStatus</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.exc <span class="keyword">import</span> IntegrityError</span><br><span class="line"><span class="keyword">from</span> flask_marshmallow <span class="keyword">import</span> Marshmallow</span><br><span class="line"></span><br><span class="line">DB = SQLAlchemy()</span><br><span class="line">MA = Marshmallow()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CRUD</span>:</span></span><br><span class="line">    body = <span class="string">''</span></span><br><span class="line">    status_code = HTTPStatus.NOT_IMPLEMENTED</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, resource, schema)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            DB.session.add(resource)</span><br><span class="line">            DB.session.commit()</span><br><span class="line">            self.body = jsonify(schema.dump(resource).data)</span><br><span class="line">            self.status_code = HTTPStatus.OK</span><br><span class="line">        <span class="keyword">except</span> IntegrityError <span class="keyword">as</span> err:</span><br><span class="line">            DB.session.rollback()</span><br><span class="line">            err_meg = str(err)</span><br><span class="line">            self.body = jsonify(&#123;<span class="string">'error'</span> : err_meg, <span class="string">'type'</span> : <span class="string">'IntegrityError'</span>&#125;)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"Duplicate entry"</span> <span class="keyword">in</span> err_meg:</span><br><span class="line">                self.status_code = HTTPStatus.CONFLICT</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.status_code = HTTPStatus.BAD_REQUEST</span><br><span class="line">        <span class="keyword">return</span> make_response(self.body, self.status_code)</span><br></pre></td></tr></table></figure><p></br></br></p><p><code>User</code>, <code>Post</code> <code>Model</code>을 따로 빼 줍니다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/users/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Users models file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"><span class="keyword">from</span> app.api.database <span class="keyword">import</span> DB, MA, CRUD</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields, validate</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span><span class="params">(DB.Model, CRUD)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'users'</span></span><br><span class="line">    __table_args__ = &#123;<span class="string">'mysql_collate'</span>: <span class="string">'utf8_general_ci'</span>&#125;</span><br><span class="line"></span><br><span class="line">    id = DB.Column(DB.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    user_id = DB.Column(DB.String(<span class="number">255</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    user_password = DB.Column(DB.String(<span class="number">255</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    user_email = DB.Column(DB.String(<span class="number">255</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    created = DB.Column(DB.TIMESTAMP, server_default=text(<span class="string">"CURRENT_TIMESTAMP"</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, user_id : str, user_password : str, user_email : str)</span>:</span></span><br><span class="line">        self.user_id = user_id</span><br><span class="line">        self.user_password = user_password</span><br><span class="line">        self.user_email = user_email</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersSchema</span><span class="params">(MA.Schema)</span>:</span></span><br><span class="line">    not_blank = validate.Length(min=<span class="number">1</span>, error=<span class="string">'Field cannot be blank'</span>)</span><br><span class="line">    id = fields.Integer(dump_only=<span class="literal">True</span>)</span><br><span class="line">    user_id = fields.String(validate=not_blank)</span><br><span class="line">    user_password = fields.String(validate=not_blank)</span><br><span class="line">    user_email = fields.String(validate=not_blank)</span><br><span class="line">    created = fields.String(validate=not_blank)</span><br></pre></td></tr></table></figure><p></br></br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/posts/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Posts model file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.api.database <span class="keyword">import</span> DB, MA, CRUD</span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields, validate</span><br><span class="line"><span class="keyword">from</span> app.users.models <span class="keyword">import</span> Users, UsersSchema</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Posts</span><span class="params">(DB.Model, CRUD)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'posts'</span></span><br><span class="line">    __table_args__ = &#123;<span class="string">'mysql_collate'</span>: <span class="string">'utf8_general_ci'</span>&#125;</span><br><span class="line"></span><br><span class="line">    id = DB.Column(DB.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    author_id = DB.Column(DB.String(<span class="number">255</span>), DB.ForeignKey(Users.user_id))</span><br><span class="line">    title = DB.Column(DB.String(<span class="number">512</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    body = DB.Column(DB.String(<span class="number">1024</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    author = DB.relationship(<span class="string">'Users'</span>, uselist=<span class="literal">False</span>)</span><br><span class="line">    created = DB.Column(DB.TIMESTAMP, server_default=text(<span class="string">"CURRENT_TIMESTAMP"</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, author_id, title, body)</span>:</span></span><br><span class="line">        self.author_id = author_id</span><br><span class="line">        self.title = title</span><br><span class="line">        self.body = body</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostsSchema</span><span class="params">(MA.Schema)</span>:</span></span><br><span class="line">    not_blank = validate.Length(min=<span class="number">1</span>, error=<span class="string">'Field cannot be blank'</span>)</span><br><span class="line">    id = fields.Integer()</span><br><span class="line">    author_id = fields.String(validate=not_blank)</span><br><span class="line">    title = fields.String(validate=not_blank)</span><br><span class="line">    body = fields.String(validate=not_blank)</span><br><span class="line">    author = fields.Nested(UsersSchema)</span><br><span class="line">    created = fields.String(validate=not_blank)</span><br></pre></td></tr></table></figure><p></br></br></p><p><code>view</code> 부분도 빼 줍시다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/users/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    User views file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> HTTPStatus</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify, make_response</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.exc <span class="keyword">import</span> SQLAlchemyError</span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Namespace, Resource, reqparse, fields</span><br><span class="line"><span class="keyword">from</span> app.users.models <span class="keyword">import</span> Users, UsersSchema</span><br><span class="line"><span class="keyword">from</span> app.api.database <span class="keyword">import</span> DB</span><br><span class="line"></span><br><span class="line">API = Namespace(<span class="string">'Users'</span>, description=<span class="string">"User's RESTPlus - API"</span>)</span><br><span class="line">USERS_SCHEMA = UsersSchema()</span><br><span class="line"></span><br><span class="line"><span class="meta">@API.route('s')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersAuth</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    parser = reqparse.RequestParser()</span><br><span class="line">    parser.add_argument(<span class="string">'user_id'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"User's ID"</span>, location=<span class="string">'json'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'user_password'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"User's PW"</span>, location=<span class="string">'json'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'user_email'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"User's Email"</span>, location=<span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line">    users_field = API.model(<span class="string">'userRegister'</span>, &#123;</span><br><span class="line">        <span class="string">'user_id'</span> : fields.String,</span><br><span class="line">        <span class="string">'user_password'</span> : fields.String,</span><br><span class="line">        <span class="string">'user_email'</span> : fields.String</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @API.doc('post')</span></span><br><span class="line"><span class="meta">    @API.expect(users_field)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        args_ = self.parser.parse_args()</span><br><span class="line">        user = Users(args_[<span class="string">'user_id'</span>], args_[<span class="string">'user_password'</span>], args_[<span class="string">'user_email'</span>])</span><br><span class="line">        <span class="keyword">return</span> user.add(user, USERS_SCHEMA)</span><br><span class="line"></span><br><span class="line"><span class="meta">@API.route('/auth')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAuth</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    parser = reqparse.RequestParser()</span><br><span class="line">    parser.add_argument(<span class="string">'user_id'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"User's ID"</span>, location=<span class="string">'json'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'user_password'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"User's PW"</span>, location=<span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line">    user_login_field = API.model(<span class="string">'userLogin'</span>, &#123;</span><br><span class="line">        <span class="string">'user_id'</span> : fields.String,</span><br><span class="line">        <span class="string">'user_password'</span> : fields.String</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @API.doc('post')</span></span><br><span class="line"><span class="meta">    @API.expect(user_login_field)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        args_ = self.parser.parse_args()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = Users.query.filter(Users.user_id == args_[<span class="string">'user_id'</span>], Users.user_password  == args_[<span class="string">'user_password'</span>]).first()</span><br><span class="line">            body = jsonify(&#123;<span class="string">'user_id'</span> : user.user_id&#125;)</span><br><span class="line">            <span class="keyword">if</span> user:</span><br><span class="line">                code = HTTPStatus.OK</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                code = HTTPStatus.NOT_FOUND</span><br><span class="line">        <span class="keyword">except</span> SQLAlchemyError <span class="keyword">as</span> err:</span><br><span class="line">            body = jsonify(&#123;<span class="string">'message'</span> : str(err)&#125;)</span><br><span class="line">            code = HTTPStatus.INTERNAL_SERVER_ERROR</span><br><span class="line">        <span class="keyword">return</span> make_response(body, code.value)</span><br></pre></td></tr></table></figure><p></br></br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/posts/views.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Posts view file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_restplus <span class="keyword">import</span> Namespace, Resource, reqparse, fields</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify, make_response</span><br><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> HTTPStatus</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.exc <span class="keyword">import</span> SQLAlchemyError</span><br><span class="line"><span class="keyword">from</span> app.posts.models <span class="keyword">import</span> Posts, PostsSchema</span><br><span class="line"><span class="keyword">from</span> app.users.models <span class="keyword">import</span> Users, UsersSchema</span><br><span class="line"><span class="keyword">from</span> app.api.database <span class="keyword">import</span> DB</span><br><span class="line"></span><br><span class="line">API = Namespace(<span class="string">'Posts'</span>, description=<span class="string">"Post's REST API"</span>)</span><br><span class="line">POSTS_SCHEMA = PostsSchema()</span><br><span class="line"></span><br><span class="line"><span class="meta">@API.route('s')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    parser = reqparse.RequestParser()</span><br><span class="line">    parser.add_argument(<span class="string">'author_id'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"Post's author ID"</span>, location=<span class="string">'json'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'title'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"Post's title"</span>, location=<span class="string">'json'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'body'</span>, required=<span class="literal">True</span>, type=str, help=<span class="string">"Post's body"</span>, location=<span class="string">'json'</span>)</span><br><span class="line"></span><br><span class="line">    post_field = API.model(<span class="string">'Post'</span>, &#123;</span><br><span class="line">        <span class="string">'author_id'</span>: fields.String,</span><br><span class="line">        <span class="string">'title'</span>: fields.String,</span><br><span class="line">        <span class="string">'body'</span>: fields.String</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @API.doc('get')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            posts = Posts.query.all()</span><br><span class="line">            body = jsonify(POSTS_SCHEMA.dump(posts, many=<span class="literal">True</span>).data)</span><br><span class="line">            <span class="keyword">if</span> posts:</span><br><span class="line">                code = HTTPStatus.OK</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                code = HTTPStatus.NOT_FOUND</span><br><span class="line">        <span class="keyword">except</span> SQLAlchemyError <span class="keyword">as</span> err:</span><br><span class="line">            body = jsonify(&#123;<span class="string">'message'</span> : str(err)&#125;)</span><br><span class="line">            code = HTTPStatus.INTERNAL_SERVER_ERROR</span><br><span class="line">        <span class="keyword">return</span> make_response(body, code.value)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @API.expect(post_field)</span></span><br><span class="line"><span class="meta">    @API.doc('post')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        args_ = self.parser.parse_args()</span><br><span class="line">        post = Posts(author_id=args_[<span class="string">'author_id'</span>], title=args_[<span class="string">'title'</span>], body=args_[<span class="string">'body'</span>])</span><br><span class="line">        <span class="keyword">return</span> post.add(post, POSTS_SCHEMA)</span><br><span class="line"></span><br><span class="line"><span class="meta">@API.route('/&lt;int:reqno&gt;')</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostItem</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, reqno)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            post = DB.session.query(Posts).outerjoin(</span><br><span class="line">                Users, Users.user_id == Posts.author_id).filter(Posts.id==reqno).first()</span><br><span class="line">            body = POSTS_SCHEMA.dump(post).data</span><br><span class="line">            <span class="keyword">if</span> post:</span><br><span class="line">                code = HTTPStatus.OK</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                code = HTTPStatus.NOT_FOUND</span><br><span class="line">        <span class="keyword">except</span> SQLAlchemyError <span class="keyword">as</span> err:</span><br><span class="line">            body = jsonify(&#123;<span class="string">'message'</span> : str(err)&#125;)</span><br><span class="line">            code = HTTPStatus.INTERNAL_SERVER_ERROR</span><br><span class="line">        <span class="keyword">return</span> make_response(body, code.value)</span><br></pre></td></tr></table></figure><p></br></br></p><p>이제 최종적으로 실행을 해봅시다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py run</span><br></pre></td></tr></table></figure><div style="text-align: center;"><img src="/image/flask/backend-flask-restplus12.png" width="100%"></div><p><br><br></p><h2 id="INDEX-1"><a href="#INDEX-1" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2019/07/30/flask-restapi-example1/">Flask RESTPlus CRUD Board 만들기 실행 (1)</a></li><li><a href="https://msnodeve.github.io/2019/08/01/flask-restapi-example2/">Flask RESTPlus CRUD Board 만들기 설정 및 MySQL (2)</a></li><li><a href="https://msnodeve.github.io/2019/08/04/flask-restapi-example3/">Flask RESTPlus CRUD Board 만들기 ORM 그리고 Model (3)</a></li><li><a href="https://msnodeve.github.io/2019/08/05/flask-restapi-example4/">Flask RESTPlus CRUD Board 만들기 MVC 그리고 REST API Swagger (4)</a></li><li><a href="https://msnodeve.github.io/2019/08/06/flask-restapi-example5/">Flask RESTPlus CRUD Board 만들기 Auth 그리고 암호화 (5)</a></li></ul><p></br></br></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;네번째-단계&quot;&gt;&lt;a href=&quot;#네번째-단계&quot; class=&quot;headerlink&quot; title=&quot;네번째 단계&quot;&gt;&lt;/a&gt;네번째 단계&lt;/h3&gt;&lt;p&gt;이번 포스트에서는 vscode 개발환경에서 Flask Framework MVC, Swagger API 문서 자동화에 대해서 알아보는 시간을 가져 보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;플라스크&lt;/code&gt; &lt;code&gt;Flask&lt;/code&gt; &lt;code&gt;vscode&lt;/code&gt; &lt;code&gt;Framework&lt;/code&gt; &lt;code&gt;Swagger&lt;/code&gt; &lt;code&gt;MVC&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="backend" scheme="https://msnodeve.github.io/categories/backend/"/>
    
      <category term="framework" scheme="https://msnodeve.github.io/categories/backend/framework/"/>
    
      <category term="python" scheme="https://msnodeve.github.io/categories/backend/framework/python/"/>
    
      <category term="flask" scheme="https://msnodeve.github.io/categories/backend/framework/python/flask/"/>
    
    
      <category term="Backend" scheme="https://msnodeve.github.io/tags/backend/"/>
    
      <category term="Framework" scheme="https://msnodeve.github.io/tags/framework/"/>
    
      <category term="Flask" scheme="https://msnodeve.github.io/tags/flask/"/>
    
      <category term="Python" scheme="https://msnodeve.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Flask REST API CRUD Board ORM 그리고 Model(3) - [Backend Framework]</title>
    <link href="https://msnodeve.github.io/2019/08/04/flask-restapi-example3/"/>
    <id>https://msnodeve.github.io/2019/08/04/flask-restapi-example3/</id>
    <published>2019-08-04T11:15:52.000Z</published>
    <updated>2020-06-22T02:15:21.404Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="INDEX"><a href="#INDEX" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2019/07/30/flask-restapi-example1/">Flask RESTPlus CRUD Board 만들기 실행 (1)</a></li><li><a href="https://msnodeve.github.io/2019/08/01/flask-restapi-example2/">Flask RESTPlus CRUD Board 만들기 설정 및 MySQL (2)</a></li><li><a href="https://msnodeve.github.io/2019/08/04/flask-restapi-example3/">Flask RESTPlus CRUD Board 만들기 ORM 그리고 Model (3)</a></li><li><a href="https://msnodeve.github.io/2019/08/05/flask-restapi-example4/">Flask RESTPlus CRUD Board 만들기 MVC 그리고 REST API Swagger (4)</a></li><li><a href="https://msnodeve.github.io/2019/08/06/flask-restapi-example5/">Flask RESTPlus CRUD Board 만들기 Auth 그리고 암호화 (5)</a></li></ul><p></br></br></p><p><font size="2em">이번 포스트는 macOS Mojave 10.14.5 에서 수행된 작업입니다.</font></p><h1 id="개발-환경"><a href="#개발-환경" class="headerlink" title="개발 환경"></a>개발 환경</h1><ul><li>MacBook Pro (13-inch, 2017, Four Thunderbolt 3 Ports)</li><li>Python 3.7</li><li>vscode</li><li>Docker-Compose version 1.23.2, build 1110ad01</li></ul><p></br></br></p><h1 id="Model-만들기-ORM-적용"><a href="#Model-만들기-ORM-적용" class="headerlink" title="Model 만들기, ORM 적용"></a>Model 만들기, ORM 적용</h1><p><code>SQLAlchemy</code>, <code>Marshmallow</code> 종속성을 설치합니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install flask_sqlalchemy flask-marshmallow Flask-Migrate pymysql</span><br></pre></td></tr></table></figure><p></br></br></p><p>환경변수를 작성합니다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/constants.py 생성</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    상수 클래스</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">SQLALCHEMY_DATABASE_URI = (<span class="string">"mysql+pymysql://&#123;USER&#125;:&#123;PASSWORD&#125;@&#123;ADDR&#125;:&#123;PORT&#125;/&#123;NAME&#125;?charset=utf8"</span>)</span><br><span class="line">SQLALCHEMY_DATABASE_URI_FORMAT = SQLALCHEMY_DATABASE_URI.format(</span><br><span class="line">        USER=<span class="string">"[사용자 ID]"</span>,</span><br><span class="line">        PASSWORD=<span class="string">"[사용자 PW]"</span>,</span><br><span class="line">        ADDR=<span class="string">"127.0.0.1"</span>,</span><br><span class="line">        PORT=<span class="number">3306</span>,</span><br><span class="line">        NAME=<span class="string">"[사용할 DB]"</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p></br></br></p><p>이제 <code>app</code>에 설치한 <code>SQLAlchemy</code>, <code>Marshmallow</code>를 달아 봅시다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/__init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    APP을 실행하기 위해 config file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> app.api.database <span class="keyword">import</span> DB, MA</span><br><span class="line"><span class="keyword">from</span> app.constants <span class="keyword">import</span> SQLALCHEMY_DATABASE_URI_FORMAT</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">()</span>-&gt;(Flask):</span></span><br><span class="line">    <span class="string">""" create_app()을 호출하여 app을 초기화 """</span></span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    app.app_context().push()</span><br><span class="line">    </span><br><span class="line">    app.config[<span class="string">'DEBUG'</span>] = <span class="literal">True</span></span><br><span class="line">    app.config[<span class="string">'SQLALCHEMY_ECHO'</span>] = <span class="literal">True</span></span><br><span class="line">    app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = SQLALCHEMY_DATABASE_URI_FORMAT</span><br><span class="line">    </span><br><span class="line">    DB.init_app(app)</span><br><span class="line">    MA.init_app(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route('/')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">root</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">""" main page """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><p></br></br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./manage.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    APP manage file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate, MigrateCommand</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> create_app</span><br><span class="line"><span class="keyword">from</span> app.api.database <span class="keyword">import</span> DB</span><br><span class="line"><span class="keyword">from</span> app.users.models <span class="keyword">import</span> Users, UsersSchema</span><br><span class="line"></span><br><span class="line">APP = create_app()</span><br><span class="line">MANAGER = Manager(APP)</span><br><span class="line">MIGRATE = Migrate(APP, DB)</span><br><span class="line">MANAGER.add_command(<span class="string">'db'</span>, MigrateCommand)</span><br><span class="line"></span><br><span class="line"><span class="meta">@MANAGER.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" Command Application run """</span></span><br><span class="line">    APP.run()</span><br><span class="line"></span><br><span class="line"><span class="meta">@MANAGER.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" test command out method """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Test command"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    MANAGER.run()</span><br></pre></td></tr></table></figure><p></br></br></p><p><code>Database</code>에 <code>User</code> 모델을 <code>ORM</code>으로 설계합니다<br><code>User</code> 모델을 작성합니다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/users/models.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Users models file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"><span class="keyword">from</span> app.api.database <span class="keyword">import</span> DB, MA</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields, validate</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span><span class="params">(DB.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'users'</span></span><br><span class="line">    __table_args__ = &#123;<span class="string">'mysql_collate'</span>: <span class="string">'utf8_general_ci'</span>&#125;</span><br><span class="line"></span><br><span class="line">    id = DB.Column(DB.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    user_id = DB.Column(DB.String(<span class="number">255</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    user_password = DB.Column(DB.String(<span class="number">255</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    user_email = DB.Column(DB.String(<span class="number">255</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    created = DB.Column(DB.TIMESTAMP, server_default=text(<span class="string">"CURRENT_TIMESTAMP"</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, user_id, user_password, user_email)</span>:</span></span><br><span class="line">        self.user_id = user_id</span><br><span class="line">        self.user_password = user_password</span><br><span class="line">        self.user_email = user_email</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsersSchema</span><span class="params">(MA.Schema)</span>:</span></span><br><span class="line">    not_blank = validate.Length(min=<span class="number">1</span>, error=<span class="string">'Field cannot be blank'</span>)</span><br><span class="line">    id = fields.Integer(dump_only=<span class="literal">True</span>)</span><br><span class="line">    user_id = fields.String(validate=not_blank)</span><br><span class="line">    user_password = fields.String(validate=not_blank)</span><br><span class="line">    user_email = fields.String(validate=not_blank)</span><br><span class="line">    created = fields.String(validate=not_blank)</span><br></pre></td></tr></table></figure><p></br></br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/api/database.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Create db</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_marshmallow <span class="keyword">import</span> Marshmallow</span><br><span class="line"></span><br><span class="line">DB = SQLAlchemy()</span><br><span class="line">MA = Marshmallow()</span><br></pre></td></tr></table></figure><p></br></br></br></p><p>설계한 <code>ORM</code>을 데이터베이스에 적용 시킵니다</p><p><code>db</code>라는 커맨드로 추가해줬으니 <code>init</code>으로 <code>migrations</code> 폴더를 생성합니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py db init</span><br></pre></td></tr></table></figure><p>이렇게 해준 뒤 데이터베이스를 보게 되면 다음과 같은 화면을 볼 수 있습니다</p><div style="text-align: center;"><img src="/image/flask/backend-flask-restplus8.png" width="100%" ></div>이는 데이터베이스만 생성시키는 작업을 합니다</br></br></br><p>현재 모델에 대한 모든 변경 사항을 감지를 못하고, 스크립트를 검토해 <code>Database</code>에 적용 시킵니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py db migrate</span><br></pre></td></tr></table></figure><p>이러면 테이블이 생긴 모습을 확인할 수 있습니다</p><div style="text-align: center;"><img src="/image/flask/backend-flask-restplus9.png" width="100%" ></div><p></br></br></br></p><h2 id="ORM구조가-변경-될-경우"><a href="#ORM구조가-변경-될-경우" class="headerlink" title="ORM구조가 변경 될 경우"></a>ORM구조가 변경 될 경우</h2><p>데이터베이스 모델이 변경 될 때마다 <code>migrate</code>, <code>upgrade</code>를 해주어야 합니다<br>테이블을 <code>동기화</code> 하기 위해서요</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py db upgrade</span><br></pre></td></tr></table></figure><p></br></br></br></p><p>현재까지의 폴더 구조는 아래와 같습니다</p><div style="text-align: center;"><img src="/image/flask/backend-flask-restplus10.png" width="40%" ></div><p><br><br></p><h2 id="INDEX-1"><a href="#INDEX-1" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2019/07/30/flask-restapi-example1/">Flask RESTPlus CRUD Board 만들기 실행 (1)</a></li><li><a href="https://msnodeve.github.io/2019/08/01/flask-restapi-example2/">Flask RESTPlus CRUD Board 만들기 설정 및 MySQL (2)</a></li><li><a href="https://msnodeve.github.io/2019/08/04/flask-restapi-example3/">Flask RESTPlus CRUD Board 만들기 ORM 그리고 Model (3)</a></li><li><a href="https://msnodeve.github.io/2019/08/05/flask-restapi-example4/">Flask RESTPlus CRUD Board 만들기 MVC 그리고 REST API Swagger (4)</a></li><li><a href="https://msnodeve.github.io/2019/08/06/flask-restapi-example5/">Flask RESTPlus CRUD Board 만들기 Auth 그리고 암호화 (5)</a></li></ul><p></br></br></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;세번째-단계&quot;&gt;&lt;a href=&quot;#세번째-단계&quot; class=&quot;headerlink&quot; title=&quot;세번째 단계&quot;&gt;&lt;/a&gt;세번째 단계&lt;/h3&gt;&lt;p&gt;이번 포스트에서는 vscode 개발환경에서 Flask Framework ORM, Model에 대해서 알아보는 시간을 가져 보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;플라스크&lt;/code&gt; &lt;code&gt;Flask&lt;/code&gt; &lt;code&gt;vscode&lt;/code&gt; &lt;code&gt;Framework&lt;/code&gt; &lt;code&gt;ORM&lt;/code&gt; &lt;code&gt;Model&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="backend" scheme="https://msnodeve.github.io/categories/backend/"/>
    
      <category term="framework" scheme="https://msnodeve.github.io/categories/backend/framework/"/>
    
      <category term="python" scheme="https://msnodeve.github.io/categories/backend/framework/python/"/>
    
      <category term="flask" scheme="https://msnodeve.github.io/categories/backend/framework/python/flask/"/>
    
    
      <category term="Backend" scheme="https://msnodeve.github.io/tags/backend/"/>
    
      <category term="Framework" scheme="https://msnodeve.github.io/tags/framework/"/>
    
      <category term="Flask" scheme="https://msnodeve.github.io/tags/flask/"/>
    
      <category term="Python" scheme="https://msnodeve.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Flask REST API CRUD Board 만들기 설정 및 MySQL(2) - [Backend Framework]</title>
    <link href="https://msnodeve.github.io/2019/08/01/flask-restapi-example2/"/>
    <id>https://msnodeve.github.io/2019/08/01/flask-restapi-example2/</id>
    <published>2019-08-01T01:56:00.000Z</published>
    <updated>2020-06-22T02:14:38.293Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="INDEX"><a href="#INDEX" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2019/07/30/flask-restapi-example1/">Flask RESTPlus CRUD Board 만들기 실행 (1)</a></li><li><a href="https://msnodeve.github.io/2019/08/01/flask-restapi-example2/">Flask RESTPlus CRUD Board 만들기 설정 및 MySQL (2)</a></li><li><a href="https://msnodeve.github.io/2019/08/04/flask-restapi-example3/">Flask RESTPlus CRUD Board 만들기 ORM 그리고 Model (3)</a></li><li><a href="https://msnodeve.github.io/2019/08/05/flask-restapi-example4/">Flask RESTPlus CRUD Board 만들기 MVC 그리고 REST API Swagger (4)</a></li><li><a href="https://msnodeve.github.io/2019/08/06/flask-restapi-example5/">Flask RESTPlus CRUD Board 만들기 Auth 그리고 암호화 (5)</a></li></ul><p></br></br></p><p><font size="2em">이번 포스트는 macOS Mojave 10.14.5 에서 수행된 작업입니다.</font></p><h1 id="개발-환경"><a href="#개발-환경" class="headerlink" title="개발 환경"></a>개발 환경</h1><ul><li>MacBook Pro (13-inch, 2017, Four Thunderbolt 3 Ports)</li><li>Python 3.7</li><li>vscode</li><li>Docker-Compose version 1.23.2, build 1110ad01</li></ul><p></br></br></p><h1 id="Manager-사용하기"><a href="#Manager-사용하기" class="headerlink" title="Manager 사용하기"></a>Manager 사용하기</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./app/__init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    APP을 실행하기 위해 config file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">()</span>-&gt;(Flask):</span></span><br><span class="line">    <span class="string">""" create_app()을 호출하여 app을 초기화 """</span></span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    app.app_context().push()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route('/')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">root</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">""" main page """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><p></br></br></p><p><code>Flask-Script</code> 종속성을 설치합니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install Flask-Script</span><br></pre></td></tr></table></figure><p></br></br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./manage.py</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    APP manage file</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> create_app <span class="comment"># app/__init__.py의 create_app() 함수 사용</span></span><br><span class="line"></span><br><span class="line">APP = create_app()</span><br><span class="line"></span><br><span class="line">MANAGER = Manager(APP)</span><br><span class="line"></span><br><span class="line"><span class="meta">@MANAGER.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" Command Application run """</span></span><br><span class="line">    APP.run()</span><br><span class="line"></span><br><span class="line"><span class="meta">@MANAGER.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" test command out method """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Test command"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    MANAGER.run()</span><br></pre></td></tr></table></figure><p></br></br></p><p>작성해 놓은 커맨드를 한번 확인해 볼까요?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py</span><br><span class="line">usage: manage.py [-?] &#123;run,out,shell,runserver&#125; ...</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  &#123;run,out,shell,runserver&#125;</span><br><span class="line">    run                 Command Application run</span><br><span class="line">    out                 <span class="built_in">test</span> <span class="built_in">command</span> out method</span><br><span class="line">    shell               Runs a Python shell inside Flask application context.</span><br><span class="line">    runserver           Runs the Flask development server i.e. app.run()</span><br><span class="line"><span class="comment"># def out(), def run()에 대한 커맨드가 생긴 것을 볼 수 있습니다!</span></span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -?, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p></br></br></p><p>이제 실행을 다시 해볼까요?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py run</span><br><span class="line"> * Serving Flask app <span class="string">"app"</span> (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. Do not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on &lt;http://127.0.0.1:5000/$ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p></br></br></p><h1 id="MySQL-사용하기-위한-작업"><a href="#MySQL-사용하기-위한-작업" class="headerlink" title="MySQL 사용하기 위한 작업"></a>MySQL 사용하기 위한 작업</h1><p><code>Docker</code>가 필요한 시점입니다 <code>Docker</code>를 설치해주세요<br><a href="https://msnodeve.github.io/2019/01/08/install-docker-compose/">Docker 설치 관련 포스트</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./docker-compose.yml 생성</span></span><br><span class="line"></span><br><span class="line">version: <span class="string">'3'</span></span><br><span class="line">services: <span class="comment"># 쓰고자하는 서비스</span></span><br><span class="line">  mysql: <span class="comment"># 사용자가 원하는 이름</span></span><br><span class="line">    image: mysql:5.7 <span class="comment"># 이미지는 mysql 5.7을 다운받아 사용할 것</span></span><br><span class="line">    hostname: mysql</span><br><span class="line">    container_name: mysql</span><br><span class="line">    <span class="built_in">command</span>: --default-authentication-plugin=mysql_native_password</span><br><span class="line">    restart: always <span class="comment"># 시스템을 다시 껐다 켜도 항상 재시작</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"3306:3306"</span> <span class="comment"># 23306 포트로 접속하면 내부에서 3306포트로 전송</span></span><br><span class="line">    env_file:</span><br><span class="line">      - ./confs/database/mysql/.env <span class="comment"># 환경 변수들을 따로 지정해줘도 되지만 파일로 떼어놓음</span></span><br><span class="line">    volumes:</span><br><span class="line">          - mysql:/var/lib/mysql <span class="comment"># docker 접속후 이 위치로 마운트(destination)</span></span><br><span class="line">volumes:</span><br><span class="line">  mysql:</span><br></pre></td></tr></table></figure><p></br></br></p><p><code>MySQL 환경 변수</code>를 작성 하겠습니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./confs/database/mysql/.env 생성</span></span><br><span class="line"></span><br><span class="line">MYSQL_DATABASE_USERNAME=[데이터 베이스 사용자 이름]</span><br><span class="line">MYSQL_ROOT_PASSWORD=[데이터 베이스 루트 비밀 번호]</span><br><span class="line">MYSQL_DATABASE=[생성할 데이터베이스 이름]</span><br><span class="line">MYSQL_PORT=3306</span><br></pre></td></tr></table></figure><p></br></br></p><h1 id="Docker로-MySQL-생성하고-접속하기"><a href="#Docker로-MySQL-생성하고-접속하기" class="headerlink" title="Docker로 MySQL 생성하고 접속하기"></a>Docker로 MySQL 생성하고 접속하기</h1><p><code>docker-compose.yml</code> 위치가 있는 곳에서 다음 명령어를 실행합니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up -d</span><br><span class="line">Creating mysql ... <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>done</code> 이라는 단어가 보인다면 성공적으로 <code>MySQL Conatainer</code>를 생성한 것입니다<br>만약 실패했다면 <code>3306 포트</code>가 사용중이 아닌지 확인해 주세요!(또는 댓글로 알려주세요)<br></br></br></p><h1 id="MySQL-WorkBench를-이용해서-접속하기"><a href="#MySQL-WorkBench를-이용해서-접속하기" class="headerlink" title="MySQL WorkBench를 이용해서 접속하기"></a>MySQL WorkBench를 이용해서 접속하기</h1><div style="text-align: center;"><img src="/image/flask/backend-flask-restplus6.png" width="100%"></div><p><code>Successfully made the MySQL connection</code> 뜬다면 접속 성공!<br></br></br></p><p>생성된 데이터베이스에 접속해보면 다음과 같은 화면을 볼수 있습니다</p><div style="text-align: center;"><img src="/image/flask/backend-flask-restplus7.png" width="50%"></div><p><br><br></p><h2 id="INDEX-1"><a href="#INDEX-1" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2019/07/30/flask-restapi-example1/">Flask RESTPlus CRUD Board 만들기 실행 (1)</a></li><li><a href="https://msnodeve.github.io/2019/08/01/flask-restapi-example2/">Flask RESTPlus CRUD Board 만들기 설정 및 MySQL (2)</a></li><li><a href="https://msnodeve.github.io/2019/08/04/flask-restapi-example3/">Flask RESTPlus CRUD Board 만들기 ORM 그리고 Model (3)</a></li><li><a href="https://msnodeve.github.io/2019/08/05/flask-restapi-example4/">Flask RESTPlus CRUD Board 만들기 MVC 그리고 REST API Swagger (4)</a></li><li><a href="https://msnodeve.github.io/2019/08/06/flask-restapi-example5/">Flask RESTPlus CRUD Board 만들기 Auth 그리고 암호화 (5)</a></li></ul><p></br></br></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;두번째-단계&quot;&gt;&lt;a href=&quot;#두번째-단계&quot; class=&quot;headerlink&quot; title=&quot;두번째 단계&quot;&gt;&lt;/a&gt;두번째 단계&lt;/h3&gt;&lt;p&gt;이번 포스트에서는 vscode 개발환경에서 Flask Framework 설정 및 MySQL에 관하여 알아보는 시간을 가져 보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;플라스크&lt;/code&gt; &lt;code&gt;Flask&lt;/code&gt; &lt;code&gt;vscode&lt;/code&gt; &lt;code&gt;Framework&lt;/code&gt; &lt;code&gt;MySQL&lt;/code&gt; &lt;code&gt;설정&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="backend" scheme="https://msnodeve.github.io/categories/backend/"/>
    
      <category term="framework" scheme="https://msnodeve.github.io/categories/backend/framework/"/>
    
      <category term="python" scheme="https://msnodeve.github.io/categories/backend/framework/python/"/>
    
      <category term="flask" scheme="https://msnodeve.github.io/categories/backend/framework/python/flask/"/>
    
    
      <category term="Backend" scheme="https://msnodeve.github.io/tags/backend/"/>
    
      <category term="Framework" scheme="https://msnodeve.github.io/tags/framework/"/>
    
      <category term="Flask" scheme="https://msnodeve.github.io/tags/flask/"/>
    
      <category term="Python" scheme="https://msnodeve.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Flask REST API CRUD Board 만들기 실행(1) - [Backend Framework]</title>
    <link href="https://msnodeve.github.io/2019/07/30/flask-restapi-example1/"/>
    <id>https://msnodeve.github.io/2019/07/30/flask-restapi-example1/</id>
    <published>2019-07-30T06:26:28.000Z</published>
    <updated>2020-06-22T02:05:39.329Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="INDEX"><a href="#INDEX" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2019/07/30/flask-restapi-example1/">Flask RESTPlus CRUD Board 만들기 실행 (1)</a></li><li><a href="https://msnodeve.github.io/2019/08/01/flask-restapi-example2/">Flask RESTPlus CRUD Board 만들기 설정 및 MySQL (2)</a></li><li><a href="https://msnodeve.github.io/2019/08/04/flask-restapi-example3/">Flask RESTPlus CRUD Board 만들기 ORM 그리고 Model (3)</a></li><li><a href="https://msnodeve.github.io/2019/08/05/flask-restapi-example4/">Flask RESTPlus CRUD Board 만들기 MVC 그리고 REST API Swagger (4)</a></li><li><a href="https://msnodeve.github.io/2019/08/06/flask-restapi-example5/">Flask RESTPlus CRUD Board 만들기 Auth 그리고 암호화 (5)</a></li></ul><p></br></br></p><p><font size="2em">이번 포스트는 macOS Mojave 10.14.5 에서 수행된 작업입니다.</font></p><h1 id="개발-환경"><a href="#개발-환경" class="headerlink" title="개발 환경"></a>개발 환경</h1><ul><li>MacBook Pro (13-inch, 2017, Four Thunderbolt 3 Ports)</li><li>Python 3.7</li><li>vscode</li><li>Docker-Compose version 1.23.2, build 1110ad01</li></ul><p></br></br></p><h1 id="왜-Flask-프레임워크를-쓰려고-정했는가"><a href="#왜-Flask-프레임워크를-쓰려고-정했는가" class="headerlink" title="왜 Flask 프레임워크를 쓰려고 정했는가?"></a>왜 Flask 프레임워크를 쓰려고 정했는가?</h1><p><code>Django</code>보다 좀 더 경량화 된 프레임워크라고 보시면 됩니다 그리고 <code>REST API</code>를 경험해보기에 딱 적당한 프레임워크라고 생각 되었습니다<br></br></br></p><h1 id="Pipfile-생성"><a href="#Pipfile-생성" class="headerlink" title="Pipfile 생성"></a>Pipfile 생성</h1><p><code>pipenv = pip + virtualenv</code> 동시에 사용하고자, <a href="https://packaging.python.org/tutorials/managing-dependencies/?source=post_page---------------------------#managing-dependencies" target="_blank" rel="noopener">Python.org</a> 에서 공식적으로 권장하는 Python  패키지 툴입니다</p><p><code>Pipfile</code>을 생성합니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv --three</span><br></pre></td></tr></table></figure><div style="text-align: center;"><img src="/image/flask/backend-flask-restplus1.png" width="60%"></div></br></br><h1 id="Pipfile-필요한-패키지-설치"><a href="#Pipfile-필요한-패키지-설치" class="headerlink" title="Pipfile 필요한 패키지 설치"></a>Pipfile 필요한 패키지 설치</h1><p>개발에 필요한 패키지 설치</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install pytest-cov pytest pylint --dev</span><br></pre></td></tr></table></figure><p>배포에 필요한 패키지 설치</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install flask</span><br></pre></td></tr></table></figure><div style="text-align: center;"><img src="/image/flask/backend-flask-restplus2.png" width="60%"></div><p>그림을 보시면 개발에 필요한 패키지를 설치할 경우 <code>[dev-packages]</code>에 배포에 필요한 패키지를 설치할 경우 <code>[packages]</code> 에 라이브러리가 설치 된 모습을 확인할 수 있습니다<br></br></br></p><h1 id="가상-환경-진입"><a href="#가상-환경-진입" class="headerlink" title="가상 환경 진입"></a>가상 환경 진입</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vi .envrc</span><br><span class="line"><span class="built_in">export</span> PIPENV_VENV_IN_PROJECT=.</span><br><span class="line">esc + wq!</span><br><span class="line"></span><br><span class="line">$ direnv allow</span><br><span class="line">$ pipenv shell</span><br><span class="line">$ pipenv sync</span><br></pre></td></tr></table></figure><p>위 환경 변수 파일을 <code>allow</code> 하지 않으면 다음과 같이 비슷한 곳에서 <code>activate</code> 됩니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">❯ . /Users/seok/.<span class="built_in">local</span>/share/virtualenvs/example2-CgPABPw3/bin/activate</span><br></pre></td></tr></table></figure><p>정확하게 되었다면 다음 사진과 같은 모습을 볼 수 있습니다</p><div style="text-align: center;"><img src="/image/flask/backend-flask-restplus3.png" width="70%" ></div></br></br><h1 id="초기-프로젝트-뼈대-구조"><a href="#초기-프로젝트-뼈대-구조" class="headerlink" title="초기 프로젝트 뼈대 구조"></a>초기 프로젝트 뼈대 구조</h1><p>아래와 같이 구조를 잡아 줍시다</p><div style="text-align: center;"><img src="/image/flask/backend-flask-restplus4.png" width="70%" ></div></br></br><h1 id="간단하게-APP-실행"><a href="#간단하게-APP-실행" class="headerlink" title="간단하게 APP 실행"></a>간단하게 APP 실행</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./manage.py 생성 (manage.py의 코드는 임시로 작성해놓음)</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    APP manage 파일</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">APP = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@APP.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    APP.run()</span><br></pre></td></tr></table></figure><p>실행해 봅시다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py</span><br><span class="line"> * Serving Flask app <span class="string">"manage"</span> (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. Do not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on &lt;http://127.0.0.1:5000/$ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p><code>Flask</code>는 <code>Port</code>를 적어주지않으면 <code>5000번 Port</code>로 기본 설정이 됩니다 (포트를 변경하고 싶으면 <code>APP.run(port=[Port])</code> 로 실행하면 됩니다)</p><p><a href="http://127.0.0.1:5000/" target="_blank" rel="noopener">http://127.0.0.1:5000/</a> 로 접속 화면</p><div style="text-align: center;"><img src="/image/flask/backend-flask-restplus5.png" width="100%" ></div><p><br><br></p><h2 id="INDEX-1"><a href="#INDEX-1" class="headerlink" title="INDEX"></a>INDEX</h2><ul><li><a href="https://msnodeve.github.io/2019/07/30/flask-restapi-example1/">Flask RESTPlus CRUD Board 만들기 실행 (1)</a></li><li><a href="https://msnodeve.github.io/2019/08/01/flask-restapi-example2/">Flask RESTPlus CRUD Board 만들기 설정 및 MySQL (2)</a></li><li><a href="https://msnodeve.github.io/2019/08/04/flask-restapi-example3/">Flask RESTPlus CRUD Board 만들기 ORM 그리고 Model (3)</a></li><li><a href="https://msnodeve.github.io/2019/08/05/flask-restapi-example4/">Flask RESTPlus CRUD Board 만들기 MVC 그리고 REST API Swagger (4)</a></li><li><a href="https://msnodeve.github.io/2019/08/06/flask-restapi-example5/">Flask RESTPlus CRUD Board 만들기 Auth 그리고 암호화 (5)</a></li></ul><p></br></br></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;첫번째-단계&quot;&gt;&lt;a href=&quot;#첫번째-단계&quot; class=&quot;headerlink&quot; title=&quot;첫번째 단계&quot;&gt;&lt;/a&gt;첫번째 단계&lt;/h3&gt;&lt;p&gt;이번 포스트에서는 vscode 개발환경에서 Flask Framework 프로젝트를 생성하고 실행해보는 시간을 가져 보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;플라스크&lt;/code&gt; &lt;code&gt;Flask&lt;/code&gt; &lt;code&gt;vscode&lt;/code&gt; &lt;code&gt;Framework&lt;/code&gt; &lt;code&gt;프로젝트 생성하는 방법!&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="backend" scheme="https://msnodeve.github.io/categories/backend/"/>
    
      <category term="framework" scheme="https://msnodeve.github.io/categories/backend/framework/"/>
    
      <category term="python" scheme="https://msnodeve.github.io/categories/backend/framework/python/"/>
    
      <category term="flask" scheme="https://msnodeve.github.io/categories/backend/framework/python/flask/"/>
    
    
      <category term="Backend" scheme="https://msnodeve.github.io/tags/backend/"/>
    
      <category term="Framework" scheme="https://msnodeve.github.io/tags/framework/"/>
    
      <category term="Flask" scheme="https://msnodeve.github.io/tags/flask/"/>
    
      <category term="Python" scheme="https://msnodeve.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>AWS EC2에 대해서 알아보기 - [Cloud Infra]</title>
    <link href="https://msnodeve.github.io/2019/05/01/cloud-aws-ec2/"/>
    <id>https://msnodeve.github.io/2019/05/01/cloud-aws-ec2/</id>
    <published>2019-05-01T11:06:14.000Z</published>
    <updated>2020-06-23T01:16:59.361Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="EC2-Elastic-Compute-Cloud"><a href="#EC2-Elastic-Compute-Cloud" class="headerlink" title="EC2(Elastic Compute Cloud)"></a>EC2(Elastic Compute Cloud)</h2><p><a href="https://msnodeve.github.io/2019/04/26/Infra-AWS/">이전 포스트</a>에서 AWS의 컴퓨터 한 대를 ‘빌려’ 쓴다고 했습니다 그럼 이제 직접 빌려봐야 하지 않을까요!? 빌려 써보도록 합시다<br>그럼 지금부터 <code>AWS</code>의 <code>EC2</code>를 생성해서 접속까지 하는 것을 해보도록 하겠습니다</br></br></br><br><font size="2em">본 블로그는 12개월 무료인 프리 티어에 대해서 설명드리며, 또 한 이번 포스트는 AWS에 이미 가입되어 있는 상태에서 진행되는 점 알려드립니다.</font></p><img src="/image/infra/aws/infra-aws-ec2-1.png" width="100%"><p><code>서비스 &gt; 컴퓨팅 &gt; EC2</code><br></br></br></p><img src="/image/infra/aws/infra-aws-ec2-2.png" width="100%"><p>Region - 서울 이 되어있는지를 확인합니다 (이유는 제일 아래 설명합니다)</br><br><code>인스턴스 &gt; 인스턴스 생성</code><br></br></br></p><img src="/image/infra/aws/infra-aws-ec2-3.png" width="100%"><p><code>Amazon Linux &gt; 선택</code></br><br>프리 티어에서도 스크롤을 아래로 내려다보면 여러 가지 인스턴스 들을 생성할 수 있습니다</br><br>그중에 우리는 리눅스 인스턴스를 생성해서 접속해 보도록 하겠습니다<br></br></br></p><img src="/image/infra/aws/infra-aws-ec2-4.png" width="100%"><p><code>유형 - t2.micro (프리 티어 사용 가능) 확인</code></br><br>검토 및 시작 (세부 설정은 지금은 필요 없으니 넘어가도록 합니다)</br><br>이렇게 하면 1개의 <code>CPU</code>, <code>1GB 메모리</code>가 달린 <code>EC2 컴퓨터</code>를 장만하기 시작합니다</br><br>다른 유형에 대해서는 프리티 어가 아닌 경우 시간 또는 분 단위로 요금이 나옵니다 이 경우에 대해서는 제일 아래에서 설명하겠습니다<br></br></br></p><img src="/image/infra/aws/infra-aws-ec2-5.png" width="100%"><p><code>시작하기</code><br></br></br></p><img src="/image/infra/aws/infra-aws-ec2-6.png" width="100%"><p><code>새 키 페어 생성</code></br><br><code>.pem</code>이라는 확장자를 가진 키, 잃어버리지 않도록 주의하며 키 이름을 설정하고 다운로드</br><br><code>인스턴스 시작</code></br><br>키 페어는 오직 지금 밖에 다운로드만 가능합니다 그러니 잃어 버리지 않도록 주의! 잃어버렸을 경우 방법이 있지만 여기서는 설명하지 않도록 하겠습니다 (그냥 잃어버리지 말길 바래요…)</br><br></br></br></p><img src="/image/infra/aws/infra-aws-ec2-7.png" width="100%"><p>시작한 뒤 인스턴스를 보게 되면 <code>Pending</code> 이였다가 잠시 뒤 <code>running</code>으로 바뀌게 됩니다</br><br>이 상태가 되면 우리는 지금 <code>AWS의 컴퓨터</code> 한 대를 장만하게 됐어요! 참 쉽죠?<br></br><br>지금부터 <code>EC2</code>를 시작했으니 돈이 나가기 시작할 거예요 그러나 걱정하지 말죠! <del>우리는 <code>12개월</code> 동안 무료로 사용할 수 있는 프리 티어이니까!</del> 자 이제 인스턴스가 돈이 안 나가게 하는 방법에 대해서 알아봅시다<br></br></br></p><p><img src="/image/infra/aws/infra-aws-ec2-8.png" width="100%"><br><code>해당 인스턴스 오른쪽 클릭 &gt; 인스턴스 상태 &gt; 중지</code></br><br>이렇게 하면 해당 인스턴스가 최소 몇 초에서 최대 <code>5분</code> 내로 인스턴스의 상태가 <code>Stopped</code>의 상태가 됩니다<br></br></br></p><p>이제 <code>EC2</code> 인스턴스를 생성하고 껐다 켰다를 할 수 있게 되었습니다 이제 <code>EC2</code>에 접속을 해봐야 하지 읺을까요?<br></br><br></p><p><strong><code>Mac OS X</code></strong>에서 접속하는 방법과 <strong><code>Windows 10</code></strong>에서 접속하는 방법. 이 두 가지에 대해서 설명하겠습니다!</p><h2 id="Mac-OS-X-접속-방법"><a href="#Mac-OS-X-접속-방법" class="headerlink" title="Mac OS X 접속 방법"></a>Mac OS X 접속 방법</h2><img src="/image/infra/aws/infra-aws-ec2-11.png" width="100%"><p><code>생성한 인스턴스 클릭 &gt; 퍼블릭 DNS 기억</code><br></br></br></p><img src="/image/infra/aws/infra-aws-ec2-10.png" width="100%"><p><code>터미널 오픈 &gt; 인스턴스를 생성할 때 다운로드 받은 키가 존재하는 폴더로 이동</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 400 &lt;다운로드 받은 키.pem&gt;</span><br><span class="line">SSH가 작동하려면 키가 공개적으로 표시되지 않아야 한다. 필요할 경우 이 명령을 사용.</span><br><span class="line">$ sudo ssh -i &quot;&lt;다운로드 받은 키.pem&gt;&quot; &lt;본인 인스턴스의 퍼블릭 DNS&gt;</span><br><span class="line">sudo 명령어로 관리자 권한으로 실행을 하게 될 시 비밀번호를 물어본다. 이 경우 Mac 비밀번호이다.</span><br></pre></td></tr></table></figure><p></br></br></br></p><h2 id="Windows-10-접속-방법"><a href="#Windows-10-접속-방법" class="headerlink" title="Windows 10 접속 방법"></a>Windows 10 접속 방법</h2><p>제 블로그에서는 <a href="https://www.putty.org/" target="_blank" rel="noopener">Putty 프로그램</a>을 이용해서 접속을 할 것입니다</br><br><code>시작 &gt; 모든 프로그램 &gt; puTTY &gt; PuTTYgen 선택</code></p><img src="/image/infra/aws/infra-aws-ec2-13.png" width="100%"><p><code>생성 키의 종류 - RSA</code></br><br><code>Load</code><br></br></br></p><img src="/image/infra/aws/infra-aws-ec2-12.png" width="100%"><p><code>All Files(*.*) &gt; &quot;다운로드 받은 키&quot;</code></br><br>Save Private Key(PuTTY가 사용할수 있는 형식으로 .ppk 비공개 키 저장)<br></br></br></p><img src="/image/infra/aws/infra-aws-ec2-14.png" width="100%"><p><code>Host Name(or IP address) : 본인의 인스턴스의 퍼블릭 DNS</code></br><br><code>Port : 22</code></br><br><code>Connection type : SSH</code></br><br><code>Category &gt; Connection &gt; SSH &gt; auth</code></br><br></br></br></p><img src="/image/infra/aws/infra-aws-ec2-15.png" width="100%"><p><code>Browse.. &gt; 비공개로 저장했던 키를 검색</code></br><br><code>Open</code><br></br></br></p><img src="/image/infra/aws/infra-aws-ec2-16.png" width="100%"><p><code>SSH</code>를 서버에 등록하겠냐는 문구가 뜨면 당연히 Yes를 클릭하고 로그인한다.</br><br><code>로그인 ID : ec2-user</code></br><br></br></br></br></p><h1 id="수고하셨습니다"><a href="#수고하셨습니다" class="headerlink" title="수고하셨습니다"></a>수고하셨습니다</h1><p>여러분들은 이제 <code>AWS</code>의 컴퓨터 한대를 빌려 접속을 성공했습니다<br></br></br></br></br></p><p>다음으론 <font size="5em"><u>EC2 요금</u></font>에 대해서 한번 알아보도록 하겠습니다</br><br>당연하겠지만 빌려 쓰는 것이기 때문에 <code>사용료</code>를 지불해야 합니다 사용하는 방식(비용을 지불하려고 하는 형태)에는 <code>4가지의 방식</code>이 있어요</br><br><a href="https://aws.amazon.com/ko/ec2/pricing/" target="_blank" rel="noopener">AWS 요금 형식</a> 링크를 들어가 보면 <code>4가지의 요금 형식</code>이 있지만 <code>2가지</code>만 설명하겠습니다<br></br></br></p><h2 id="1-온디멘드"><a href="#1-온디멘드" class="headerlink" title="1. 온디멘드"></a>1. 온디멘드</h2><p>실행되고 있는 인스턴스에 따라 대게 <code>시간당</code>으로 비용을 지불하게 됩니다</p><h2 id="2-예약-인스턴스"><a href="#2-예약-인스턴스" class="headerlink" title="2. 예약 인스턴스"></a>2. 예약 인스턴스</h2><p>인스턴스를 실행하는 것을 예약으로 설정하여 만약 어느 수요가 많다는 생각이 드는 시간대에 온 디멘드 방식보단 예약 인스턴스를 방식을 사용하여 계속 켜놓는 것보다 필요할 때만 인스턴스를 켜기 때문에 비용을 최대 `75% 정도`까지 절약할 수 있습니다</br></br><p>나머지 2가지 방식은 독자께서 이해해보려 노력하길 바라며 (총총…)<br></br></br></p><h2 id="EC2에-대한-다양한-요금"><a href="#EC2에-대한-다양한-요금" class="headerlink" title="EC2에 대한 다양한 요금"></a>EC2에 대한 다양한 요금</h2><img src="/image/infra/aws/infra-aws-ec2-9.png" width="100%"><p>이 그림을 보고 간단하게 설명하고 넘어갈게요 프리 티어 기준으로 생성한 인스턴스를 보도록 하겠습니다</br><br>보다시피 <code>CPU 1개</code>, <code>메모리 1GB</code> 짜리를 사용하는데 시간당 요금이 <code>시간당 0.0144 USD</code> 즉, <code>1달러(한화 약 1200원)</code>를 쓰려면 <code>69.4시간</code>을 사용해야 <code>1달러</code>가 나온다는 말입니다</br><br>이 말이 무슨 말이냐고요? <del> 저는 정말 멍청한 짓을 했죠ㅠ </del> 서버 컴퓨터 하나 맞추려고 50만 원 정도의 돈을 투자해서 맞췄는데… <code>단돈 1200원</code>이라는 돈으로 <code>70시간</code>의 컴퓨터를 빌릴 수 있다니… 여기서 새삼 한 번 더 <code>AWS</code>에 대해 놀랬습니다</br><br>물론 본인이 개인 서비스를 진행하고자 하는데 사용자 수가 많아지면 당연히 그림에 나와 있는 사양 가지고는 터무니가 없다고 느낄 것입니다 그래서 밑으로 내려다보면 자신에게 맞는 사양을 택해서 요금을 내면 됩니다 다른 사양에 대해서는 잘 보도록 하길 바래요<br></br></br></br></p><h2 id="지역-Region-에-대해서-설명"><a href="#지역-Region-에-대해서-설명" class="headerlink" title="지역(Region)에 대해서 설명"></a>지역(Region)에 대해서 설명</h2><img src="/image/infra/aws/infra-aws-region.png" width="100%"><p><a href="http://jayendrapatil.com/aws-regions-availability-zones-and-edge-locations/" target="_blank" rel="noopener">AWS region 참조</a> 관련 이미지</br></br><br>비용 지불 형식에 대해서 이해했다면 이제 이전 포스트에 말했던 <code>Region</code>에 관해서 설명을 하고자 합니다</br><br>위를 봤던 그림처럼 여러 <code>Region</code>에 <code>AWS</code>가 있다고 했습니다 나중에 보면 알겠지만 내가 한국에 있다고 꼭 <code>서울</code> Region을 선택해서 사용할 필요는 없습니다 이러한 <code>Region</code>을 정하는 기준에 대해서는 이렇게 생각하면 좋겠습니다</br><br>“내가 프로그램을 제작하였을 때 이 프로그램을 어느 <code>Region</code>에 있는 사용자가 많이 사용할 것인가?” 이러한 질문에서 당연히 한국 사람들이 많이 사용할 것이라면 <code>서울</code> <code>Region</code>을 선택해서 사용하면 되고, 유럽 사람들이 많이 사용할 것이라면 <code>유럽</code> <code>Region</code>을 선택해서 사용하면 됩니다 왜냐하면 한국 사람들이 많이 사용하는데 <code>유럽</code> <code>Region</code>을 선택해서 사용하다 보면 한국에서 유럽까지 통신하는 거리가 있기 때문에 조금 느릴 수가 있어요 (<code>Region</code> 선택은 본인이 선택하는 것이기 때문에 느리든 말든 알아서 해도 무관하다… 제 생각은 그렇다는 거예요)</p><!-- </br>EC2에 대해서 좀 더 생각나면 쓰도록 하며 S3에 대한 이야기를 시작하려면 다음 블로그로 이동합시다!## [S3에 대한 이야기!](https://msnodeve.github.io/infra/2019-05-06-infra-aws-s3/) -->]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;AWS가-뭐야&quot;&gt;&lt;a href=&quot;#AWS가-뭐야&quot; class=&quot;headerlink&quot; title=&quot;AWS가 뭐야?&quot;&gt;&lt;/a&gt;AWS가 뭐야?&lt;/h3&gt;&lt;p&gt;이번 포스트에서는  AWS(Amazon Web Services)에 대해서 알아보는 시간을 가져 보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AWS&lt;/code&gt; &lt;code&gt;Amazon Web Services&lt;/code&gt; &lt;code&gt;Infra&lt;/code&gt; &lt;code&gt;비용은?&lt;/code&gt; &lt;code&gt;이게뭔데!&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="infra" scheme="https://msnodeve.github.io/categories/infra/"/>
    
      <category term="aws" scheme="https://msnodeve.github.io/categories/infra/aws/"/>
    
      <category term="cloud" scheme="https://msnodeve.github.io/categories/infra/aws/cloud/"/>
    
    
      <category term="Infra" scheme="https://msnodeve.github.io/tags/infra/"/>
    
      <category term="AWS" scheme="https://msnodeve.github.io/tags/aws/"/>
    
      <category term="Cloud" scheme="https://msnodeve.github.io/tags/cloud/"/>
    
  </entry>
  
  <entry>
    <title>AWS? AWS가 뭐야? - [Cloud Infra]</title>
    <link href="https://msnodeve.github.io/2019/04/26/cloud-aws/"/>
    <id>https://msnodeve.github.io/2019/04/26/cloud-aws/</id>
    <published>2019-04-26T10:42:56.000Z</published>
    <updated>2020-06-23T01:16:10.518Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="AWS-Amazon-Web-Services"><a href="#AWS-Amazon-Web-Services" class="headerlink" title="AWS(Amazon Web Services)"></a>AWS(Amazon Web Services)</h2><p>요즘 클라우드에 많은 관심을 갖고 있거나 서버를 다뤄본 개발자라면… 아마 AWS라는 단어를 들어보았을 겁니다<br><u>제가 왜 <strong>AWS</strong>를 사용하게 되었는지부터 설명하겠습니다</u><br></br><br>서버에 대한 기본 배경지식은 2018년 여름방학 때 <code>부산 ETRI 연구연수생</code>으로 인턴 과정을 하며 서버(리눅스 운영체제 기반 ; <u>CentOS7</u>기준)를 알게 되었고, 이로 인해 서버는 컴퓨터 한 대가 필요하다는 것을 느끼게 되었습니다</br><br>당시 AWS의 존재조차 모르고 있었던 3학년 이였고 졸업을 1년 앞둔 저는 졸업작품을 제작해야 한다는 과제를 마주하게 되었습니다 그래도 <code>안드로이드 애플리케이션</code>을 건드릴 줄 알고 있던 저는 애플리케이션을 제작해서 졸업 과제를 수행해야겠다는 생각을 하게 되었습니다</br><br>2명의 디자이너와 5명의 디벨로퍼로 내가 메인 디벨로퍼 겸 팀장을 맡아 팀원에게 할 일을 분배하며 팀 프로젝트를 진행하고 있었으며 시작은 좋았고(기획은 그럴싸했고 아이디어도 좋다는 생각이 듦), 기능 구현도 매우 훌륭하게 진행되고 있었습니다(클라이언트 만..)</br><br>기획 때 클라이언트 부분을 깊게 생각하며 기획을 진행했었고, 서버 부분은 틀만 잡아놓고 나중에 천천히 구조를 짜야 겠다고 했습니다 사용자가 늘어감에 따라 서버와 어떻게 통신을 해야 할지 서버 구조는 어떻게 짜야 할지에 대해 아무런 구조를 짜놓은 상태가 아니었습니다 기능 구현이 점차 점차 완성됨에 따라 서버가 필요했고, 그로 인해 저는 서버용 컴퓨터를 한대 사야겠다는 결심을 내린 뒤 무작정 부품들을 하나하나 사기 시작했습니다 맞춘 컴퓨터의 사양은 다음과 같았습니다<br></br></p><img src="/image/infra/aws/infra-aws-server.png" width="100%" height="100%"></br></br></br><p>글을 읽는 사람들 중 서버로 사용하기에 <strong>“엥?”</strong> 하는 사람 물론 있을 것입니다 알고 있습니다… 저는 그냥 컴퓨터 한 대가 필요했고 서버에 대한 적합한 사양을 몰랐었습니다 그래도 이러한 컴퓨터를 기반으로 서버에 대해서 많은 것을 알게 되었으니 저는 만족합니다 주문으로 온 부품들을 하나하나 조립했고, 운영체제는 <code>CentOS7</code>을 설치했습니다 배웠던 기본 지식으로 서버 세팅을 완료하고 안드로이드와 서버 통신을 하기 시작했다. 이때 사용한 <font size="4em" color="red"><u>기술 스택</u></font>은 다른 포스트에서 설명하도록 하겠습니다</br><br>어느 한날 같은 연구실 졸업 선배가 밥을 사준다고 나오라고 했으며, 그때 졸업작품에 대해서 이야기를 시작했습니다 클라이언트와 서버가 잘 통신되고 있던 저에게 선배가 다음과 같은 말을 했습니다 “왜 너는 굳이 노동을 하고 있느냐? 요즘 클라우드 서비스가 대세인데 하나 한 세팅을 언제 하며 몇 번의 클릭만으로 지금까지 구현해놓은 서비스를 다 할 수 있을 텐데 왜 그렇게 시간 낭비를 하고 있냐?”<br>라고… 서버 컴퓨터는 당연히 있어야 통신을 하는 건 알고 있겠으려니 하며 그 말을 들은 저는 한편으론 의아해하며 또 한편으론 신기했습니다 조금만 익숙해지면 충분히 사용 가능하다며 저에게 제안을 했고, 다음날부터 AWS에 대해 알아가기 시작했습니다</br><br>알아가면 알아갈수록 정말 신기했습니다… 제가 정작 3시간이 걸려 컴퓨터 조립 및 운영체제 설치를 끝낸 것을 <code>AWS</code>는 단 클릭 몇 번만으로 <code>5분</code> 만에 컴퓨터가 장만 되었고… 한 컴퓨터 안에 <code>데이터베이스</code>, <code>메일 전송</code>, <code>데이터 저장 공간</code>을 두는 것이 아니라 <code>개별 서비스</code>로 연결해서 쓸 수 있었던 면에서도 깜짝 놀랐습니다</br><br>이때부터 저는 <code>AWS</code>를 심도 있게 사용해보고 있으며, 2019년 4월 18일에 있었던 <code>AWS SUMMIT Seoul</code> 컨퍼런스도 다녀오게 되었습니다</br><br>제 <code>AWS</code> 사용 동기는 아래와 같습니다 <u>저와 같은 사람</u>이 있을 것이라 생각하며, 또 <u>AWS에 이제 관심을 갖기 시작한 사람들</u>에게 제 블로그가 도움이 되었으면 합니다<br></br><br>솔직히 말해 AWS에 대해서 깊이 다뤄보지 못했지만 AWS가 이런 것이다에 대해서 이해만 하길 바라며 읽어주시면 감사하겠습니다</br></br></br></br></br></br></p><h2 id="AWS는-어디에-위치해있는가"><a href="#AWS는-어디에-위치해있는가" class="headerlink" title="AWS는 어디에 위치해있는가?"></a>AWS는 어디에 위치해있는가?</h2><img src="/image/infra/aws/infra-aws-region.png" width="100%"><p><a href="http://jayendrapatil.com/aws-regions-availability-zones-and-edge-locations/" target="_blank" rel="noopener">AWS region 참조</a> 관련 이미지</br></br><br><code>Amazon Web Services</code>는 다음 그림과 같이 여러 지역(regions)에 위치해있습니다 다음 그림에 표시된 곳에 엄청난 크기와 양의 컴퓨터가 있고, 우리는 AWS의 멤버(회원)이 되어 컴퓨터를 ‘빌려’ 쓴다고 생각하면 됩니다 다시말해 AWS에서 제공해주는 서비스를 이용해 내가 지금 내 컴퓨터에서 아마존 컴퓨터를 원격으로 사용하는 것 입니다 이 말이 즉 클라우드 컴퓨팅이라고 생각하면 되겠습니다</p><p></br></br></p><!-- 이 블로그에서는 `프리티어(12개월 무료)` 기준에 대해서 설명하며 AWS에서 제공하는 서비스에서 `EC2`, `RDS`, `S3`를 중심으로 여러가지를 살펴 보도록 하겠습니다</br>`AWS`에 대해서 좀더 생각나면 쓰도록 하며 `EC2`에 대한 이야기를 시작하려면 다음 블로그로 이동합시다!## [EC2에 대한 이야기!](https://msnodeve.github.io/2019/05/01/Infra-AWS-EC2/) -->]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;AWS가-뭐야&quot;&gt;&lt;a href=&quot;#AWS가-뭐야&quot; class=&quot;headerlink&quot; title=&quot;AWS가 뭐야?&quot;&gt;&lt;/a&gt;AWS가 뭐야?&lt;/h3&gt;&lt;p&gt;이번 포스트에서는  AWS(Amazon Web Services)에 대해서 알아보는 시간을 가져 보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AWS&lt;/code&gt; &lt;code&gt;Amazon Web Services&lt;/code&gt; &lt;code&gt;Infra&lt;/code&gt; &lt;code&gt;비용은?&lt;/code&gt; &lt;code&gt;이게뭔데!&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="infra" scheme="https://msnodeve.github.io/categories/infra/"/>
    
      <category term="aws" scheme="https://msnodeve.github.io/categories/infra/aws/"/>
    
      <category term="cloud" scheme="https://msnodeve.github.io/categories/infra/aws/cloud/"/>
    
    
      <category term="Infra" scheme="https://msnodeve.github.io/tags/infra/"/>
    
      <category term="AWS" scheme="https://msnodeve.github.io/tags/aws/"/>
    
      <category term="Cloud" scheme="https://msnodeve.github.io/tags/cloud/"/>
    
  </entry>
  
  <entry>
    <title>Docker Compose 설치하기</title>
    <link href="https://msnodeve.github.io/2019/01/08/infra-install-docker-compose/"/>
    <id>https://msnodeve.github.io/2019/01/08/infra-install-docker-compose/</id>
    <published>2019-01-08T09:44:36.000Z</published>
    <updated>2020-06-25T05:36:17.583Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h1 id="Docker-설치"><a href="#Docker-설치" class="headerlink" title="Docker 설치"></a>Docker 설치</h1><h2 id="필수-패키지-설치"><a href="#필수-패키지-설치" class="headerlink" title="필수 패키지 설치"></a>필수 패키지 설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">$ yum makecache fast</span><br></pre></td></tr></table></figure><p></br></br></p><h2 id="다운로드"><a href="#다운로드" class="headerlink" title="다운로드"></a>다운로드</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install docker-ce</span><br></pre></td></tr></table></figure><p></br></br></p><h2 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start docker</span><br><span class="line">$ systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ docker --version</span><br></pre></td></tr></table></figure><div style="text-align: center;"><img src="/image/infra/docker/install-docker1.png" width="100%"></div></br></br><h1 id="Docker-compose-설치"><a href="#Docker-compose-설치" class="headerlink" title="Docker-compose 설치"></a>Docker-compose 설치</h1><h2 id="다운로드-1"><a href="#다운로드-1" class="headerlink" title="다운로드"></a>다운로드</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L https://github.com/infra/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p></br></br></p><h2 id="권한-부여-및-실행"><a href="#권한-부여-및-실행" class="headerlink" title="권한 부여 및 실행"></a>권한 부여 및 실행</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ docker-compose --version</span><br></pre></td></tr></table></figure><div style="text-align: center;"><img src="/image/infra/docker/install-docker2.png" width="100%"></div></br></br><h1 id="수고하셨습니다"><a href="#수고하셨습니다" class="headerlink" title="수고하셨습니다"></a>수고하셨습니다</h1><p>Docker, Docker Compose 를 설치 했습니다</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Docker-Compose-설치하기&quot;&gt;&lt;a href=&quot;#Docker-Compose-설치하기&quot; class=&quot;headerlink&quot; title=&quot;Docker Compose 설치하기&quot;&gt;&lt;/a&gt;Docker Compose 설치하기&lt;/h3&gt;&lt;p&gt;이번 포스트에서는 도커를 설치하는 방법에 대해서 알아 보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;도커&lt;/code&gt; &lt;code&gt;도커컴포즈&lt;/code&gt; &lt;code&gt;Docker&lt;/code&gt; &lt;code&gt;Docker Compose&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="infra" scheme="https://msnodeve.github.io/categories/infra/"/>
    
      <category term="docker" scheme="https://msnodeve.github.io/categories/infra/docker/"/>
    
      <category term="docker compose" scheme="https://msnodeve.github.io/categories/infra/docker/docker-compose/"/>
    
    
      <category term="Infra" scheme="https://msnodeve.github.io/tags/infra/"/>
    
      <category term="Docker" scheme="https://msnodeve.github.io/tags/docker/"/>
    
      <category term="Docker Compose" scheme="https://msnodeve.github.io/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>Mac에서 멋진 터미널 만들기</title>
    <link href="https://msnodeve.github.io/2018/10/23/mac-settings/"/>
    <id>https://msnodeve.github.io/2018/10/23/mac-settings/</id>
    <published>2018-10-23T10:18:19.000Z</published>
    <updated>2020-06-24T05:20:33.578Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h1 id="iTerm2-설치"><a href="#iTerm2-설치" class="headerlink" title="iTerm2 설치"></a><a href="https://www.iterm2.com/downloads.html" target="_blank" rel="noopener">iTerm2</a> 설치</h1><p><a href="https://www.iterm2.com/downloads.html" target="_blank" rel="noopener">iTerm2 다운로드 페이지</a>에 접속한 뒤, <code>iTerm2</code> 를 설치합니다<br><img src="/image/settings/iTerm2_download_site.png" width="100%"><br></br></br></p><h1 id="HomeBrew-설치"><a href="#HomeBrew-설치" class="headerlink" title="HomeBrew 설치"></a><a href="https://brew.sh" target="_blank" rel="noopener">HomeBrew</a> 설치</h1><div style="text-align: center;"><img src="/image/settings/HomeBrew_img.png" width="30%" height="30%"></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p></br></br></p><h1 id="Zsh-설치"><a href="#Zsh-설치" class="headerlink" title="Zsh 설치"></a>Zsh 설치</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure><p></br></br></p><h1 id="OhMyZsh-설치"><a href="#OhMyZsh-설치" class="headerlink" title="OhMyZsh 설치"></a>OhMyZsh 설치</h1><p>설치시 <code>mac</code> 잠금 해제 암호를 물어봅니다, 입력해도 <code>*</code> 이 뜨지않으니 그냥 입력 후 엔터하시면 됩니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><p></br></br></p><h1 id="Oceanic-Next-iTerm-색-테마-입히기"><a href="#Oceanic-Next-iTerm-색-테마-입히기" class="headerlink" title="Oceanic Next iTerm 색 테마 입히기"></a>Oceanic Next iTerm 색 테마 입히기</h1><div style="text-align: center;"><img src="/image/settings/Oceanic_color_iterm.png" width="100%"></div></br></br><p><a href="https://github.com/mhartington/oceanic-next-iterm/archive/master.zip" target="_blank" rel="noopener">master.zip</a>을 다운로드 후 압축을 해제합니다</p><div style="text-align: center;"><img src="/image/settings/Oceanic_next1.png" width="100%"></div></br></br><p>iTerm2 &gt; Preferences… &gt; 클릭 합니다</p><div style="text-align: center;"><img src="/image/settings/Oceanic_next2.png" width="100%"></div></br></br><p>Profile &gt; Default &gt; Colors &gt; Color Presets… &gt; Oceanic-Next &gt; 클릭 후 완료 합니다</p><div style="text-align: center;"><img src="/image/settings/Oceanic_next3.png" width="100%"></div></br></br><h1 id="Agnoster-테마-설치"><a href="#Agnoster-테마-설치" class="headerlink" title="Agnoster 테마 설치"></a>Agnoster 테마 설치</h1><div style="text-align: center;"><img src="/image/settings/agnoster.png" width="100%"></div></br></br><p>명령어 입력후 10번째 줄을 다음과 같이 입력 합니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line">ZSH_THEME=<span class="string">"agnoster"</span></span><br></pre></td></tr></table></figure><div style="text-align: center;"><img src="/image/settings/agnoster.zshrc.png" width="100%"></div></br></br><h1 id="Ubuntu-Mono-derivative-Powerline-폰트-설치-amp-설정"><a href="#Ubuntu-Mono-derivative-Powerline-폰트-설치-amp-설정" class="headerlink" title="Ubuntu Mono derivative Powerline 폰트 설치 &amp; 설정"></a>Ubuntu Mono derivative Powerline 폰트 설치 &amp; 설정</h1><p><a href="https://beomi.github.io/others/Ubuntu_Mono_derivative_Powerline.ttf" target="_blank" rel="noopener">Ubuntu_Mono_derivative_Powerline.ttf</a>를 다운로드 합니다</p><p>iTerm2 &gt; Preferences… &gt; 클릭 합니다</p><div style="text-align: center;"><img src="/image/settings/Oceanic_next2.png" width="100%"></div></br></br><p>Profile &gt; Default &gt; Text &gt; Change Font &gt; Ubuntu Mono derivative &gt; 클릭 후 완료 합니다</p><div style="text-align: center;"><img src="/image/settings/iTerm2_Ubuntu_Mono1.png" width="100%"></div></br></br><h1 id="zsh-syntax-highlighting-설치"><a href="#zsh-syntax-highlighting-설치" class="headerlink" title="zsh-syntax-highlighting 설치"></a>zsh-syntax-highlighting 설치</h1><p>아래 두줄을 터미널에 입력합니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source <span class="variable">$&#123;(q-)PWD&#125;</span>/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-$HOME&#125;</span>/.zshrc</span><br></pre></td></tr></table></figure><p></br></br></p><h1 id="수고하셨습니다"><a href="#수고하셨습니다" class="headerlink" title="수고하셨습니다"></a>수고하셨습니다</h1><p>이제 iTerm2를 완전히 종료한 후에 다시 실행하여 멋진 터미널을 이용해 보세요</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;멋진-맥-터미널-만들기&quot;&gt;&lt;a href=&quot;#멋진-맥-터미널-만들기&quot; class=&quot;headerlink&quot; title=&quot;멋진 맥 터미널 만들기!&quot;&gt;&lt;/a&gt;멋진 맥 터미널 만들기!&lt;/h3&gt;&lt;p&gt;이번 포스트에서는 멋진 맥 개발환경을 만들어 보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;맥&lt;/code&gt; &lt;code&gt;개발환경&lt;/code&gt; &lt;code&gt;만들어보자!&lt;/code&gt; &lt;code&gt;터미널&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mac" scheme="https://msnodeve.github.io/categories/mac/"/>
    
      <category term="settings" scheme="https://msnodeve.github.io/categories/mac/settings/"/>
    
    
      <category term="Mac" scheme="https://msnodeve.github.io/tags/mac/"/>
    
      <category term="Zsh" scheme="https://msnodeve.github.io/tags/zsh/"/>
    
      <category term="Homebrew" scheme="https://msnodeve.github.io/tags/homebrew/"/>
    
  </entry>
  
</feed>
