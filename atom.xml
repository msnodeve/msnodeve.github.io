<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>msnodevLog</title>
  
  <subtitle>아직 익숙하지 않다면 두번이상 개발하는</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://msnodeve.github.io/"/>
  <updated>2020-05-05T05:21:18.952Z</updated>
  <id>https://msnodeve.github.io/</id>
  
  <author>
    <name>Myeong Seok KIM</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Recursive(재귀) - [Algorithm Skill]</title>
    <link href="https://msnodeve.github.io/2020/03/17/algorithm-recursive/"/>
    <id>https://msnodeve.github.io/2020/03/17/algorithm-recursive/</id>
    <published>2020-03-17T01:38:59.000Z</published>
    <updated>2020-05-05T05:21:18.952Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h5 id="알고리즘의-기본적인-스킬을-다룹니다-1"><a href="#알고리즘의-기본적인-스킬을-다룹니다-1" class="headerlink" title="알고리즘의 기본적인 스킬을 다룹니다."></a>알고리즘의 기본적인 스킬을 다룹니다.</h5><p>이번 포스트에서는 알고리즘의 스킬 중 재귀에 대해서 알아 보려고 합니다.<br>목차는 다음과 같습니다.</p><p><a href="#Factorial">1. Factorial</a><br><a href="#Fibonacci">2. Fibonacci</a><br><a href="#Fibonacci-Memoization">3. Fibonacci Memoization</a><br><a href="#관련-알고리즘-문제">4. 관련 알고리즘 문제</a></p><br><h2 id="Factorial"><a href="#Factorial" class="headerlink" title="Factorial"></a>Factorial</h2><p>팩토리얼이라는 단어 많이 들어 보셨을 거라 생각합니다.<br>간단하게 다음과 같이 식을 세울 수 있습니다.<div class="alert info no-icon"><p>n! = n * (n - 1)!</p></div>즉 예시를 들어 보면 다음과 같겠죠.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0! &#x3D; 1</span><br><span class="line">1! &#x3D; 1 * (1 - 1)! &#x3D; 1 * 0! &#x3D; 1</span><br><span class="line">2! &#x3D; 2 * (2 - 1)! &#x3D; 2 * 1! &#x3D; 2</span><br><span class="line">...</span><br><span class="line">5! &#x3D; 5 * (5 - 1)! &#x3D; 5 * 4! &#x3D; 120</span><br></pre></td></tr></table></figure>이렇게 <span class="highlight-text orange">n!</span>을 코드로 한번 작성해 보고자 합니다. 아마 대표적인 재귀함수의 기본이지 않을까 싶습니다.<br>그럼 이제 코드를 한번 살펴 보도록 하겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factorial</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> N = Integer.parseInt(br.readLine());</span><br><span class="line"></span><br><span class="line">    System.out.println(factorial(N));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// n! : n * (n-1)!</span></span><br><span class="line">  <span class="comment">// n! 계산</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 기저(재귀 탈출)</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 유도(파생)</span></span><br><span class="line">    <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>이 코드에서 중요한 점은 재귀를 선언하면 무한 반복을 돌지않게 하기 위해 `기저 조건` 과 `다시 호출`을 하는 것이 가장 중요합니다.재귀로 하고자 한다면 다음과 같이 선언을 한 뒤 사용하는 것이 좋을 것 같습니다. ~(개인적인 견해 입니다.)~<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 기저 조건</span></span><br><span class="line">    <span class="comment">// 목표값에 도달했을 경우 빠져나가야 하기 때문입니다.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 파생 조건</span></span><br><span class="line">    <span class="comment">// 목표값에 도달했지 않았을 경우 계속 돌아야 하기 때문입니다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>코드는 직접 한번 작성해보시기 바랍니다 😌<br><br>## Fibonacci피보나치 수열? 이 또한 많이 들어 보셨을 것 같습니다.0번째 항을 0, 1번째 항을 1로 두고, 2번째 항부터는 바로 앞의 두 수를 더한 수가 됩니다.16 번째 항까지만 나열해 보자면,<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,  1,  1,  2,  3,  5,  8,  13,   21,   34,   55,   89,   144,  233,  377,  610,  987</span><br></pre></td></tr></table></figure>규칙은 정말 간단하죠? 그럼 다음과 같이 식을 세울 수 있겠군요.<div class="alert info no-icon"><p>f(n) = f(n - 1) + f(n - 2)</p></div><p>이제 우리가 해야할 일은 <code>f(n) 의 값은 과연 몇일까?🤔</code> 를 구하는 것 입니다.<br>그럼 코드로 한번 구현을 해보도록 하겠습니다!</p><p>일단 위에서 말했지만, 재귀를 사용하기 위해서는 먼저 틀을 만들어야 합니다.</p><p>그리고 코드를 한번 볼까요?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">      <span class="keyword">int</span> N = Integer.parseInt(br.readLine());</span><br><span class="line">      System.out.println(fibonacci(N));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 우선 재귀를 그만둘 수 있는 기저 조건</span></span><br><span class="line">    <span class="comment">// n이 0, 1일때 결과값은 0과 1이기 때문에 return n을 주었습니다.</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 그렇다면 계속 파생조건을 주어야 겠죠.</span></span><br><span class="line">    <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>계산이 어떻게 이루지는지 한번 보도록하겠습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">N에 4를 입력했을 경우,</span><br><span class="line">1. fibonacci(4) 함수 호출</span><br><span class="line">2. n &lt;&#x3D; 1 아니기 때문에 return fibonacci(4 - 1) + fibonacci(4 - 2) 중에 첫번째 fibbonacci(4 - 1) 함수 호출</span><br><span class="line">3. n &lt;&#x3D; 1 아니기 때문에 return fibonacci(3 - 1) + fibonacci(3 - 2) 중에 첫번째 fibbonacci(3 - 1) 함수 호출</span><br><span class="line">4. n &lt;&#x3D; 1 아니기 때문에 return fibonacci(2 - 1) + fibonacci(2 - 2) 중에 첫번째 fibbonacci(2 - 1) 함수 호출</span><br><span class="line">5. n &lt;&#x3D; 1 이기때문에 return 1; 반환 후 4. 단계에서 두번째 fibonacci(2 - 2) 함수 호출 (현재 결과 값 1)</span><br><span class="line">6. n &lt;&#x3D; 1 이기때문에 return 0; 반환 후 3. 단계에서 두번째 fibonacci(3 - 2) 함수 호출 (현재 결과 값 1)</span><br><span class="line">7. n &lt;&#x3D; 1 이기때문에 return 1; 반환 후 2. 단계에서 두번째 fibonacci(4 - 2) 함수 호출 (현재 결과 값 2)</span><br><span class="line">8. n &lt;&#x3D; 1 아니기 때문에 return fibonacci(2 - 1) + fibonacci(2 - 2) 중에 첫번째 fibbonacci(2 - 1) 함수 호출</span><br><span class="line">9. n &lt;&#x3D; 1 이기때문에 return 1; 반환 후 8. 단계에서 두번째 fibonacci(2 - 2) 함수 호출 (현재 결과 값 3)</span><br><span class="line">10. n &lt;&#x3D; 1 이기때문에 return 0; 반환 후 최종 결과 값 3 반환</span><br></pre></td></tr></table></figure><p>이해가 가지 않을 수 있습니다. 눈으로 보는 것 보다, 그리고 머리로 생각하는 것 보다 손으로 한번 써보는게 더 기억에 잘 남는다고 하니 한번 손으로 작성해보는 것도 좋은 방법인듯 합니다.</p><div class="alert warning"><p>자! 여기서 잠깐… 혹시 N의 입력 값에 42이상의 값을 입력 해보셨나요? 결과 값이 조금 늦게 나오지 않았나요?<br><del>음 늦게 나오지않았다면 정말 좋은 컴퓨터를 사용중이시네요</del> 그럼 100을 입력해보시죠 하루를 걸려서라도 결과값은 나오지 않을거에요…</p></div><blockquote><p>이거 왜이러는 걸까요?</p></blockquote><p>그림을 한번 볼까요?</p><div style="text-align: center;"><img src="/image/algorithm/recursive-fibonacci01.png" width="100%"></div><p>함수안에서 같은 함수를 호출(재귀)하게되면 콜스택에 쌓이게 됩니다. 그렇다면 위 그림을 비교해서 보자면 fibonacci(5) 즉, 5번째는 어떤 피보나치 수가 될지 확인해보기 위해서는 fibonacci(0)을 3번, fibonacci(1)을 5번, fibonacci(2)을 3번 … 이렇게 앞에 구했던 함수를 계속해서 함수 호출을 통해 5번째 피보나치 수를 구할 수 있게 됩니다.  </p><p>그렇다면 이미 구했다면 더 이상 구하지 않게 하기 위해서는 어떤 방법이 필요할까요? 바로 <span class="highlight-text orange">Memoization</span>! 을 이용하면 되겠습니다.</p><p><br><br></p><h2 id="Fibonacci-Memoization"><a href="#Fibonacci-Memoization" class="headerlink" title="Fibonacci Memoization"></a>Fibonacci Memoization</h2><p>우선 바로 코드를 보도록 하겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FibonnaciMemoization</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span>[] call1, call2, memo;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> totalCnt1, totalCnt2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">fibo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// 메모를 하지 않은 경우</span></span><br><span class="line">        call1[n]++;</span><br><span class="line">        totalCnt1++;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">fibo2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// 메모를 한 경우</span></span><br><span class="line">        call2[n]++;</span><br><span class="line">        totalCnt2++;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        <span class="comment">// n항의 값을 계산한 적이 있었다면(메모 확인) 메모된 값 리턴</span></span><br><span class="line">        <span class="keyword">if</span> (memo[n] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[n] = fibo2(n - <span class="number">1</span>) + fibo2(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = sc.nextInt();</span><br><span class="line">        call1 = <span class="keyword">new</span> <span class="keyword">long</span>[N + <span class="number">1</span>];</span><br><span class="line">        call2 = <span class="keyword">new</span> <span class="keyword">long</span>[N + <span class="number">1</span>];</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="keyword">long</span>[N + <span class="number">1</span>];</span><br><span class="line">        System.out.println(fibo2(N));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"fibo2("</span> + i + <span class="string">") : "</span> + call2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"fibo2 call count : "</span> + totalCnt2);</span><br><span class="line">        System.out.println(<span class="string">"============================"</span>);</span><br><span class="line">        System.out.println(fibo(N));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"fibo("</span> + i + <span class="string">") : "</span> + call1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"fibo call count : "</span> + totalCnt1);</span><br><span class="line">        System.out.println(<span class="string">"============================"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>이제 <code>5</code> 를 입력하고 돌려보시면 다음과 같은 결과를 보실 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">5</span><br><span class="line">fibo2(1) : 2</span><br><span class="line">fibo2(2) : 2</span><br><span class="line">fibo2(3) : 2</span><br><span class="line">fibo2(4) : 1</span><br><span class="line">fibo2(5) : 1</span><br><span class="line">fibo2 call count : 9</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">5</span><br><span class="line">fibo(1) : 5</span><br><span class="line">fibo(2) : 3</span><br><span class="line">fibo(3) : 2</span><br><span class="line">fibo(4) : 1</span><br><span class="line">fibo(5) : 1</span><br><span class="line">fibo call count : 15</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>같은 함수를 호출(재귀) 하면서 이전에 이미 구해놓았던 memo[-] 결과 값이 있다면 바로 리턴을 해주며 값을 계속 구하고 있는 모습을 보실 수 있습니다.</p><div class="alert info no-icon"><p>이렇게 돌려본 결과<br>단순히 재귀를 돌렸을 경우 총 카운트는 15번<br>메모이제이션을 한 뒤 돌렸을 경우 총 카운트는 9번<br>으로 <code>함수 콜스택</code>을 줄여준 결과를 보여주고 있습니다.</p></div><p><br><br></p><p>이렇게 재귀함수에 대해서 알아 보았습니다.<br>그럼 관련 알고리즘 문제 링크를 걸어드리며 마무리 짓도록 하겠습니다. 감사합니다.😁</p><h2 id="관련-알고리즘-문제"><a href="#관련-알고리즘-문제" class="headerlink" title="관련 알고리즘 문제"></a>관련 알고리즘 문제</h2><p><img src="chrome-extension://anenheoccfogllpbpcmbbpcbjpogeehe/svg/3.svg" height="30px" width="30px" align="left">&nbsp;&nbsp;<a href="https://www.acmicpc.net/problem/2747" target="_blank" rel="noopener">피보나치 수</a></p><p><img src="chrome-extension://anenheoccfogllpbpcmbbpcbjpogeehe/svg/6.svg" height="30px" width="30px" align="left">&nbsp;&nbsp;<a href="https://www.acmicpc.net/problem/2748" target="_blank" rel="noopener">피보나치 수 2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;알고리즘의-기본적인-스킬을-다룹니다&quot;&gt;&lt;a href=&quot;#알고리즘의-기본적인-스킬을-다룹니다&quot; class=&quot;headerlink&quot; title=&quot;알고리즘의 기본적인 스킬을 다룹니다.&quot;&gt;&lt;/a&gt;알고리즘의 기본적인 스킬을 다룹니다.&lt;/h5&gt;&lt;p&gt;이번 포스트에서는 알고리즘의 스킬 중 재귀에 대해서 알아 보려고 합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Factorial&lt;/code&gt; &lt;code&gt;Fibonacci&lt;/code&gt; &lt;code&gt;Fibonacci Memoization&lt;/code&gt; &lt;code&gt;Hanoi&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="https://msnodeve.github.io/categories/algorithm/"/>
    
      <category term="skill" scheme="https://msnodeve.github.io/categories/algorithm/skill/"/>
    
      <category term="recursive" scheme="https://msnodeve.github.io/categories/algorithm/skill/recursive/"/>
    
    
      <category term="Algorithm" scheme="https://msnodeve.github.io/tags/algorithm/"/>
    
      <category term="Recursive" scheme="https://msnodeve.github.io/tags/recursive/"/>
    
      <category term="Factorial" scheme="https://msnodeve.github.io/tags/factorial/"/>
    
      <category term="Hanoi" scheme="https://msnodeve.github.io/tags/hanoi/"/>
    
      <category term="Fibo" scheme="https://msnodeve.github.io/tags/fibo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo[Tranquilpeak] 사용방법</title>
    <link href="https://msnodeve.github.io/2020/03/13/devlog-hexo-syntax/"/>
    <id>https://msnodeve.github.io/2020/03/13/devlog-hexo-syntax/</id>
    <published>2020-03-13T11:09:58.000Z</published>
    <updated>2020-03-17T08:15:32.830Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>이번 포스트에서는 Hexo 테마 중 Tranquilpeak, 어떻게 사용하는지에 대해 알아 보려고 합니다.<br>목차는 다음과 같습니다.</p><p><a href="#Alert">1. Alert를 사용하는 방법!</a><br><a href="#Highlight-Text">2. Highlight Text를 사용하는 방법!</a></p><a id="more"></a><p><br><br></p><h1 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h1><h4 id="Alert"><a href="#Alert" class="headerlink" title="Alert"></a>Alert</h4><blockquote><p> <code>Alert</code>을 사용하는 방법</p></blockquote><br><div class="alert info"><p>Info 알림을 사용하는 방법은 어떻게!?</p></div><div class="alert success"><p>Success 알림을 사용하는 방법은 어떻게!?</p></div><div class="alert warning"><p>Warning 알림을 사용하는 방법은 어떻게!?</p></div><div class="alert danger"><p>Danger 알림을 사용하는 방법은 어떻게!?</p></div><p>아이콘이 거슬린다구요? 그럼 이렇게 표시는 어떨까요??</p><div class="alert info no-icon"><p>Info 알림을 사용하는 방법은 어떻게!?</p></div><div class="alert success no-icon"><p>Success 알림을 사용하는 방법은 어떻게!?</p></div><div class="alert warning no-icon"><p>Warning 알림을 사용하는 방법은 어떻게!?</p></div><div class="alert danger no-icon"><p>Danger 알림을 사용하는 방법은 어떻게!?</p></div><p>우선 위와 같이 이 테마에서 가능한 <code>md문법</code>에 대해서 알아보도록 하겠습니다!  </p><br><h4 id="문법은-다음과-같습니다"><a href="#문법은-다음과-같습니다" class="headerlink" title="문법은 다음과 같습니다."></a>문법은 다음과 같습니다.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% alert [classes] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endalert %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>파라미터 이름</th><th>값</th></tr></thead><tbody><tr><td></td><td>info</td></tr><tr><td></td><td>success</td></tr><tr><td>Classes</td><td>warning</td></tr><tr><td></td><td>danger</td></tr><tr><td></td><td>no-icon</td></tr></tbody></table><p>위에 보시는 <span class="highlight-text danger">[classes]</span>에 값을 넣고 작성하면 됩니다.<br>또한 표에서 보이는 5번째줄의 값(<span class="highlight-text danger">no-icon</span>)은 icon을 보여주지 않고 Alert을 쓰는 방법입니다.<br>  아래와 같이 쓰시면 됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% alert info no-icon %&#125;</span><br><span class="line">Info 알림의 예시 코드</span><br><span class="line">&#123;% endalert %&#125;</span><br></pre></td></tr></table></figure><div class="alert info no-icon"><p>Info 알림 결과 !</p></div><p></br><br></p><h4 id="Highlight-Text"><a href="#Highlight-Text" class="headerlink" title="Highlight Text"></a>Highlight Text</h4><blockquote><p> <code>Highlight Text</code>을 사용하는 방법</p></blockquote><p><code>Highlight Text</code>는 형광펜을 그은 처럼 작성하는 것 입니다.</p><p>일단 예시를 보도록 하겠습니다.  </p><p>1. <span class="highlight-text orange">첫번째 형광펜</span>은 기본 문법으로</br>2. <span class="highlight-text" style="background-color:#00FFFF;">두번째 형광펜</span>은 hexa color 문법으로</p></br><h4 id="문법은-다음과-같습니다-1"><a href="#문법은-다음과-같습니다-1" class="headerlink" title="문법은 다음과 같습니다."></a>문법은 다음과 같습니다.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hl_text [(classes | hexa code | rgb color | rgba color)] %&#125; </span><br><span class="line">content</span><br><span class="line">&#123;% endhl_text %&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>파라미터 이름</th><th>값</th></tr></thead><tbody><tr><td></td><td>red</td></tr><tr><td></td><td>green</td></tr><tr><td></td><td>blue</td></tr><tr><td></td><td>purple</td></tr><tr><td></td><td>orange</td></tr><tr><td>Classes</td><td>yellow</td></tr><tr><td></td><td>cyan</td></tr><tr><td></td><td>primary</td></tr><tr><td></td><td>success</td></tr><tr><td></td><td>warning</td></tr><tr><td></td><td>danger</td></tr></tbody></table><p>위에 보시는 <span class="highlight-text cyan">[(classes | hexa code)]</span>에 값을 넣고 작성하면 됩니다.<br>또한 <span class="highlight-text primary">hexa code</span>로도 작성할 수 있습니다.<br>  사용 코드 예시는 아래와 같습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- basic code --&gt;</span></span><br><span class="line">1. &#123;% hl_text orange %&#125;첫번째 형광펜&#123;% endhl_text %&#125;은 기본 문법으로<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hexa code --&gt;</span></span><br><span class="line">2. &#123;% hl_text #00FFFF %&#125;두번째 형광펜&#123;% endhl_text %&#125;은 hexa color 문법으로</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1. <span class="highlight-text orange">첫번째 형광펜</span>은 기본 문법으로</br>2. <span class="highlight-text" style="background-color:#00FFFF;">두번째 형광펜</span>은 hexa color 문법으로</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-tranquilpeak-테마&quot;&gt;&lt;a href=&quot;#Hexo-tranquilpeak-테마&quot; class=&quot;headerlink&quot; title=&quot;Hexo[tranquilpeak 테마]&quot;&gt;&lt;/a&gt;Hexo[tranquilpeak 테마]&lt;/h1&gt;&lt;p&gt;이번 포스트에서는 Hexo 테마 중 Tranquilpeak, 어떻게 사용하는지에 대해 알아 보려고 합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Tag&lt;/code&gt; &lt;code&gt;Alert&lt;/code&gt; &lt;code&gt;Highlight Text&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="devlog" scheme="https://msnodeve.github.io/categories/devlog/"/>
    
      <category term="hexo" scheme="https://msnodeve.github.io/categories/devlog/hexo/"/>
    
    
      <category term="Hexo" scheme="https://msnodeve.github.io/tags/hexo/"/>
    
      <category term="Syntax" scheme="https://msnodeve.github.io/tags/syntax/"/>
    
  </entry>
  
  <entry>
    <title>SSAFY 3기를 시작하며![합격 후기]</title>
    <link href="https://msnodeve.github.io/2019/12/24/story-ssafy-3rd/"/>
    <id>https://msnodeve.github.io/2019/12/24/story-ssafy-3rd/</id>
    <published>2019-12-24T12:04:36.000Z</published>
    <updated>2020-03-30T12:59:37.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSAFY"><a href="#SSAFY" class="headerlink" title="SSAFY"></a>SSAFY</h1><p><code>Samsung Software Academy For Youth</code>(삼성 청년 소프트웨어 아카데미) 서울 지역에 합격했습니다! 😘</p><p>그런 의미로 이야기를 한 번 써내려 가려 합니다.</p><a id="more"></a><p>2018년 1월부터 1기, 1,000명 선발을 시작으로 2022년까지 총 <code>10,000명</code>을 선발한다고 했습니다! (저는 사실 SSAFY를 3기 모집 1달 전에 알게 되었어요…) 이렇게 보니 규모가 정말 상당하다라고 생각이 듭니다. 또한 이 아카데미를 듣는 동안 달마다 삼성전자의 이름으로 <code>100만원</code>의 지원금(취업을 한 것이 아니라서, 취직 지원금 까지 신청이 가능하다고 합니다!)을 받을 수 있다고 하니 정말 대단해요!(<del>역시 갓성전자…</del>)</p><p>매년 두 기수 씩 교육생을 선발하는 중이며, 저는 2020년 2월 졸업 예정자로써 3기로 지원했으며 합격해서 교육을 듣게 되었습니다!</p><p>그럼 이제 SSAFY 3기 모집은 언제 였으며, 어떻게 준비를 했는지 이야기를 하겠습니다. 😊😊</p></br><p>이 포스트는 다음과 같은 흐름으로 정리해 보았습니다.  </p><ul><li><a href="#SSAFY를-어떻게-알게-되었나">1. SSAFY를 어떻게 알게 되었나?</a></li><li><a href="#SSAFY-교육-과정">2. SSAFY 교육 과정</a></li><li><a href="#SSAFY-선발-과정">3. SSAFY 선발 과정</a></li><li><a href="#SSAFY-어떻게-들어갔는가">4. SSAFY.. 어떻게 들어갔는가?</a></li><li><a href="#SSAFY-결과-발표">5. SSAFY 결과 발표</a></li></ul></br><h3 id="SSAFY를-어떻게-알게-되었나"><a href="#SSAFY를-어떻게-알게-되었나" class="headerlink" title="SSAFY를 어떻게 알게 되었나"></a>SSAFY를 어떻게 알게 되었나</h3><p>주변 사람들로 인해 알게 되었어요. 제가 SSAFY를 알기전에 삼성 청년 SW 아카데미 모집 설명회가 있었다고 하던데… 미리 알았다면 아마 가보지 않았을까.. 눈물이 나네요😭😭</p><h4 id="SSAFY-모집-설명회-일정-및-장소"><a href="#SSAFY-모집-설명회-일정-및-장소" class="headerlink" title="SSAFY 모집 설명회 일정 및 장소"></a>SSAFY 모집 설명회 일정 및 장소</h4><div style="text-align: center;"><img src="/image/story/ssafy1.png" width="100%"></div><blockquote><p>이미지의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다.</p></blockquote><p>위와 같이 10월 28일 부터 시작해 10월 31일 까지 4일에 걸쳐 진행되었다고 합니다!</p><p>장소 관계 신청으로 인해 조기 마감이 될 수 있다고 하더라구요…(<del>참여하면 소정의 기념품 까지 챙겨줬는데😭😭</del>)</p><p>참여한 것이 아니라 정확한 내용을 알려 드리기에는 한계가 있어 링크를 남겨 드립니다! </p><ul><li>SSAFY 3기 모집 설명회 : <a href="https://webstudynote.tistory.com/23" target="_blank" rel="noopener">https://webstudynote.tistory.com/23</a></li></ul><p>이전에 <code>SSAFY 올레 행사</code>도 있었다고 하네요!</p><ul><li>SSAFY 올레 행사 후기 : <a href="https://webstudynote.tistory.com/19" target="_blank" rel="noopener">https://webstudynote.tistory.com/19</a></li></ul><p></br></br></p><h3 id="SSAFY-교육-과정"><a href="#SSAFY-교육-과정" class="headerlink" title="SSAFY 교육 과정"></a>SSAFY 교육 과정</h3><ul><li>교육 장소 : 전국 4개 지역(서울, 대전, 광주, 구미)</li><li>교육 기간 : 2020년 1월 6일(월) ~ 2020년 12월 31일(목) (12개월)</li></ul><p>12개월 기간동안의 세부 과정은 아래 사진과 같습니다.</p><div style="text-align: center;"><img src="/image/story/ssafy2.png" width="100%"></div><blockquote><p>이미지의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다.</p></blockquote><ul><li>기본과정(5개월) : 기본적으로 <code>컴퓨터와 관련된 지식</code>을 습득하기 위한 기간이라고 보시면 될것 같습니다! 이 과정에서는 Computational Thinking, Algorithm, Computer language(Python, Java, C++…등등) 을 배울 예정이라고 하네요!</li><li>1차 Job Fair(1개월) : 5개월동안 과정을 진행하면서 성적 우수자 대상으로 <code>해외 연수</code>도 보내주며, 필요한 사람에 한해 보충수업도 제공된다고 하네요.</li><li>심화과정(5개월) : 제일 중요한 시점인 것 같습니다. 기본 과정을 진행하면서 습득한 기본 지식을 통해 팀을 꾸려 하나의 프로젝트를 만들어 내는 과정이며, 프로젝트를 진행하기에 앞서 멘토들도 계신다고 하니 정말 좋은 시간이 될 것 같아요!</li><li>2차 Job Fair(1개월) : SSAFY의 마지막 1개월 활동.. SSAFY에서 개인별 맞춤형 경력 설계를 도와주며, 그에 맞게 취업 활동 및 채용 정보도 잘 알려 준다고 합니다! 이 과정까지 수료하게 된다면 뿌듯하고, 즐거울 것 같습니다(<del>한편으로는 슬플 수도 있을 거 같군요😭</del>)</li></ul><p>SSAFY에서 총 12개월의 교육 기간을 통해 <strong><code>&quot;문제해결 능력을 갖춘 차세대 SW인력 양성&quot;</code></strong> 을 목표로 정말 실전형 SW 개발자로 거듭날 수 있을 것 같습니다! 😁😁</p><p></br></br></p><h3 id="SSAFY-선발-과정"><a href="#SSAFY-선발-과정" class="headerlink" title="SSAFY 선발 과정"></a>SSAFY 선발 과정</h3><p>지원 자격 부터 선발 과정까지 자세하게 보도록 하겠습니다! 😉</p><h4 id="지원-자격"><a href="#지원-자격" class="headerlink" title="지원 자격"></a>지원 자격</h4><h5 id="대상"><a href="#대상" class="headerlink" title="대상"></a>대상</h5><ul><li>연령 : <code>만 29세 이하</code> (1990. 1. 1 이후 출생자)</li><li>학력 : 국내외 4년제 대학(학사 이상) <code>졸업자</code> 및 2020.2월 <code>졸업 예정자</code>(<code>전공 무관</code>)</li></ul><h5 id="재직-여부"><a href="#재직-여부" class="headerlink" title="재직 여부"></a>재직 여부</h5><ul><li>현재 <code>미 취업자</code> 대상</li><li>인터뷰일(2019.12.3)부터 본 교육 시작일(2020.1.6) 전까지 재직(예정)자 지원불가(사업장 건강보험 및 국민연금 가입 여부기준)</li></ul><p>※ 교육기간 중 취업할 경우, 해당 업체 입사전에 개별적으로 퇴소</p><h5 id="기타사항"><a href="#기타사항" class="headerlink" title="기타사항"></a><strong>기타사항</strong></h5><ul><li>교육시작일 교육 입과 가능한 자</li><li>교육기간 중 통학 가능한 자(별도 숙소 제공 없음)</li><li>병역필 또는 면제자로 해외여행에 결격 사유가 없는 자</li></ul><div style="text-align: center;"><img src="/image/story/ssafy3.png" width="100%"></div><blockquote><p>이미지의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다.</p></blockquote><p>위와 같이 4단계에 걸쳐 선발을 합니다! 이제 자세하게 알려 드리도록 하겠습니다 😁</p><p></br></br></p><h3 id="SSAFY-어떻게-들어갔는가"><a href="#SSAFY-어떻게-들어갔는가" class="headerlink" title="SSAFY 어떻게 들어갔는가"></a>SSAFY 어떻게 들어갔는가</h3><p>지금부터는 위에서 봤던 4단계를 어떻게 진행했는지, 어떤 생각으로 면접을 봤는지, 알려드릴 수 있는 범위에서 자세하게 알려 드리도록 하겠습니다.  </p><p>지원서를 접수하기 위해서는 <a href="https://www.ssafy.com/ksp/jsp/swp/swpMain.jsp" target="_blank" rel="noopener">SSAFY</a> 홈페이지를 접속해 회원가입 및 로그인 후 온라인으로 지원서를 작성 할 수 있어요.</p><p>(회원 인증 메일 확인 사진을 올리고 싶었으나, 제 3자에게 공개 또는 배포, 복사하는 것을 엄격히 금지하고 있어 올리지 못했습니다)</p></br><h4 id="Step-1-지원서-접수-2019-10-28-11-11"><a href="#Step-1-지원서-접수-2019-10-28-11-11" class="headerlink" title="Step 1) 지원서 접수(2019.10.28 ~ 11.11)"></a>Step 1) 지원서 접수(2019.10.28 ~ 11.11)</h4><p>지원서 접수는 <a href="https://www.ssafy.com/ksp/jsp/swp/apply/swpApplyProcess.jsp" target="_blank" rel="noopener"><code>SSAFY 홈페이지</code></a>에서 지원 가능했습니다. 지원서에는 다음과 같은 항목을 작성해야 했어요.</p><ul><li>기본 인적 사항 : 이름, 생년월일, 성별, 휴대폰 번호, 비상 연락처, 이메일, 주소 기재</li><li>학력 사항 : 최종 학력, 입학 일 및 졸업 일, 전공, 만점 기준 취득 학점 기재</li><li>경력 및 어학 사항 : 경력(인턴 및 근무 경험), 병역 사항, 어학(외국어 자격증 등)<blockquote><p>어학 자격증은 1도 없었어요. 😭<br>그렇지만 해본 경험은 죄다 적었습니다. 😎</p></blockquote></li><li>희망지역 및 진단일정 : 1지망, 2지망(서울, 대전, 광주, 구미 중 택 2), SW적성 검사 진단 일정 선택<blockquote><p>희망지역 - 1지망(서울 : 멀티캠퍼스 교육센터), 2지망(대전 : 삼성화재 유성연수원)<br>진단일전 - 11월 16일 토요일 10시, 12시 이렇게 2개가 있었어요.</p></blockquote></li><li>SW관련 활동 : 학교에서 배운 전공 학점 및 공통 학점 기재, 교육이수 / 개발경험 / 수상경력 기재<blockquote><p>저는 전공자여서 그런지 학점을 기재하고 보니 많았어요!(<del>한 페이지를 꽉 채운느낌?</del>)<br>개발 경험과 수상 경력이 좀 있었던 것 같아요! 있는 대로 죄다 작성했습니다. 😎</p></blockquote></li><li>에세이 : 2가지의 질문이 있었습니다! 두 질문 모두 500자 이상의 글을 작성해야 했습니다.<blockquote><p>첫 번째는 SSAFY를 지원하게 된 동기, 향후 진로가 어떻게 될지<br>두 번째는 외부 활동을 하며 겪었던 경험에 대해서 물어 보았습니다.</p></blockquote></li><li>부가 인적 사항 : 장애인, 기초생활수급자 / 차상위계층</li></ul><p>지원서에서 가장 중요한 항목이였던 에세이.<br>질문의 의도를 캐치하면 다음과 같이 생각해 낼 수 있었어요!<br>내가 왜 SSAFY가 필요한지, 커리큘럼을 따라하면 내 미래가 어떻게 변할지에 대한 질문 이였던 것 같아요!</p></br><h4 id="Step-2-SW-적성-진단-11-16"><a href="#Step-2-SW-적성-진단-11-16" class="headerlink" title="Step 2) SW 적성 진단(11.16)"></a>Step 2) SW 적성 진단(11.16)</h4><p>SW 적성 진단은 총 60분 동안 진행 되었으며, 2가지의 온라인 테스트로 진행 되었습니다.</p><p>첫 번째 <code>수리/추리 논리 능력 진단</code>(30분)으로 말 그대로 수리, 추리, 논리 능력을 진단 하는 내용을 다뤘습니다.<br>두 번째 <code>Computational Thinking 진단</code>(30분)으로 문제를 컴퓨터 적인 생각으로 알고리즘을 생각해 진단 하는 내용을 다뤘습니다.(코딩 테스트가 아닌가 라는 생각으로 겁 먹었지만, 주어진 문제를 계산(알고리즘 풀이) 해 단답형 으로 제출하는 형식이였습니다, <del>그러나 1문제 맞췄나…😅😅</del>)</p><p>문제 유출은 금지 사항이므로 어떤 문제가 나왔는지는 말씀 드리기가 어렵군요!</p><h5 id="별도-사항"><a href="#별도-사항" class="headerlink" title="별도 사항"></a>별도 사항</h5><ul><li>진단 하는 동안 총 10번의 재 접속 가능</li><li>2개의 진단 모두 응시</li><li>선택한 시간 외 접속 불가</li><li>실제 진단에 필요한 보안 프로그램을 설치 후 응시</li><li>운영체제(OS) : Windows 7, Windows 8, Windows 10<br>해상도 : 1280 X 1024 이상 해상도 사용 권장<br>웹 브라우저 : Internet Explorer(10이상), Google Chrome(최신버전)<br>저는 mac 유저지만.. 이 날 만큼은 Windows로 진단을 봤어요!</li></ul><p>SW 적성 진단을 하면서 느낀점은 “아… 시작부터 불합격이 뜨겠구나” 이였지만 의외로 대부분의 지원자들이 합격 소식을 많이 들었어요! (그렇지만 저는 왜 합격한지 아직도 감사할 나름…!)</p></br><h4 id="Step-3-Interview-12-3-12-5"><a href="#Step-3-Interview-12-3-12-5" class="headerlink" title="Step 3) Interview(12.3 ~ 12.5)"></a>Step 3) Interview(12.3 ~ 12.5)</h4><p>삼성 청년 SW 아카데미 <code>3기 Interview 대상자</code>로 선정 되었지만, 준비를 어떻게 해야 하는지 몰랐고, SSAFY가 시작한지 1년이 되었지만 정보도 많이 없었던 것 같습니다.</p><p>먼저 Interview를 보기 전 <code>온라인 사전 학습</code>을 해야 했었는데요! 이는 안내 메일로 왔습니다.</p><p>온라인 사전 학습으로 3가지의 과정 중 1개의 과정을 선택해 학습을 진행하는 방식입니다.</p><ol><li>IT 트랜드</li><li>창의/열정</li><li>SW기초</li></ol><p>학습 기간 : 2019.11.23(토) 00:00 ~ 11.28(목) 23:59(총 6일) <code>지정된 학습 일정 이외에는 수강 불가</code></p><p>유의 사항으로는 사전 학습 미 수료의 경우에도 인터뷰는 참석 가능하지만, 선발 절차 중 하나 이므로, 성실히 수강 해야한다고 했습니다.</p><p>사전 학습을 통해 관련 분야의 지식을 얻을 수 있는 유익한 시간이 되었습니다.</p></br><p>이제 대망의 SSAFY Interview… 저는 12월 5일 Interview를 진행했습니다. </p><p>■ 일시 : 2019. 12. 5(목) 9:15</p><ul><li>예상 소요 시간 : 대기시간 포함 2시간 30분<br>저는 한 2시간 정도 걸렸던 것 같습니다! 😁</li></ul><p>■ 장소</p><ul><li>서울 삼성 금융 캠퍼스</li></ul><p>■ 내용</p><ul><li>Interview 안내</li><li>서류 확인</li><li>2차 SW 적성진단 (CBT)</li><li>Interview</li></ul><p>■ 복장</p><ul><li>Interview에 적합한 단정한 복장</li></ul><p>■ 준비물</p><ul><li>필수 서류 [원본]</li></ul><ol><li>신분증 (주민등록증/운전면허증/유효기간 만료전 여권에 한함)</li><li>4대보험 가입내역 확인서 (가입여부 확인)</li><li>졸업(예정)증명서, 성적 증명서 (석사인 경우 학사/석사 모두 지참)</li></ol><ul><li>기타 서류 : 대상자에 한함 (지원서에 기재한 자격 증빙)</li></ul><ol><li>[원본] : 병적(병역) 증명서, 어학성적 증명서, 장애인/기초생활수급 대상 확인서</li><li>[사본 가능] : 자격증, 수상내역 확인증, 경력 증명서 等 기타 서류</li></ol><p>※ 서울 外 지역에서 참석하시는 분들께는 소정의 면접비 지급 예정 (지원서에 기재한 주소 기준)<br>(면접비 까지주는 이런…😭😭)</p><p>처음 Interview 보는 것 치고는 분위기가 좋았습니다.<br>본인이 SSAFY가 왜 필요한지, 어떤 것을 해보고 싶은지 IT 관련해서 얼마나 관심을 갖고 있는지를 묻는 정말 제게 궁금한 점을 물어보는 인터뷰 시간이였습니다. 😲😲</p><p>본 Interview 내용은 <code>보안 서약서</code>를 작성 했기 때문에 Interview 진행 했던 사항은 말씀 드릴 수 없습니다!</p><p></br></br></p><h3 id="SSAFY-결과-발표"><a href="#SSAFY-결과-발표" class="headerlink" title="SSAFY 결과 발표"></a>SSAFY 결과 발표</h3><h4 id="길고도-긴…-기대하고-기대했던-결과-발표의-기다림…-🙏🙏"><a href="#길고도-긴…-기대하고-기대했던-결과-발표의-기다림…-🙏🙏" class="headerlink" title="길고도 긴… 기대하고 기대했던 결과 발표의 기다림… 🙏🙏"></a>길고도 긴… 기대하고 기대했던 결과 발표의 기다림… 🙏🙏</h4><p>2주 정도 기다린 것 같아요. 문자 메세지로 홈페이지에서 Interview 결과를 확인 하라고 왔습니다.<br>기다리던 순간… 결과 확인을 누르기가 정말 떨렸어요. 😭</p><div style="text-align: center;"><img src="/image/story/ssafy4.png" width="100%"></div><blockquote><p>이미지의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다.</p></blockquote><p>Interview 결과 합격이라는 단어를 본 순간 소리 질렀네요(당시 서울에서 부산으로 내려가는 기차 안이였는데 😂)<br>입과, 입과포기 란이있었는데 보자마자 입과 누르고 확인 했습니다.</p><div style="text-align: center;"><img src="/image/story/ssafy5.png" width="100%"></div><blockquote><p>이미지의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다.</p></blockquote><p>그리고 결과 발표 하루 뒤에 문자로 최종 합격 문자가 왔어요.<br>알고있던 결과라도 다시 확인하니 너무 행복했습니다. 😍😍</p><div style="text-align: center;"><img src="/image/story/ssafy6.png" width="100%"></div><p></br></br></p><p>부족한 부분이 있었는지 모르겠네요!! 이렇게 해서 SSAFY 3기를 합격하게 되었습니다!<br>좀 더 궁금한 사항이 있다면 댓글로 남겨주세요!</p><blockquote><p>썸네일의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SSAFY&quot;&gt;&lt;a href=&quot;#SSAFY&quot; class=&quot;headerlink&quot; title=&quot;SSAFY&quot;&gt;&lt;/a&gt;SSAFY&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Samsung Software Academy For Youth&lt;/code&gt;(삼성 청년 소프트웨어 아카데미) 서울 지역에 합격했습니다! 😘&lt;/p&gt;
&lt;p&gt;그런 의미로 이야기를 한 번 써내려 가려 합니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="story" scheme="https://msnodeve.github.io/categories/story/"/>
    
      <category term="ssafy" scheme="https://msnodeve.github.io/categories/story/ssafy/"/>
    
    
      <category term="SSAFY" scheme="https://msnodeve.github.io/tags/ssafy/"/>
    
      <category term="Samsung" scheme="https://msnodeve.github.io/tags/samsung/"/>
    
      <category term="Academy" scheme="https://msnodeve.github.io/tags/academy/"/>
    
      <category term="Software" scheme="https://msnodeve.github.io/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>Linux, CentOS 작업 스케쥴러 - Crontab</title>
    <link href="https://msnodeve.github.io/2019/12/09/devlog-linux-crontab/"/>
    <id>https://msnodeve.github.io/2019/12/09/devlog-linux-crontab/</id>
    <published>2019-12-09T07:46:52.000Z</published>
    <updated>2020-03-17T08:15:44.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Crontab"><a href="#Crontab" class="headerlink" title="Crontab?"></a>Crontab?</h1><p><code>Cron</code> 은 리눅스 에서 특정한 <code>명령</code>이나 <code>스크립트</code>를 지정한 <code>날짜/시간</code>에 자동으로 실행해 주는 <code>스케쥴러</code> 입니다.</p><p>주기적으로 시스템 백업 스크립트를 실행하는 등 시스템 관리자에 의해 많이 사용되며, 이외 반복적인 작업을 하기위해 사용될 수 있습니다.</p><a id="more"></a></br><h3 id="Crontab-활용-용도"><a href="#Crontab-활용-용도" class="headerlink" title="Crontab 활용 용도"></a>Crontab 활용 용도</h3><ul><li>30분 단위로 이메일을 전송 할 때</li><li>매주 일요일 새벽 4시에 서버를 재 시작 할 때</li></ul><p>위와 같이 반복적인 예약 작업이 필요할 때 다양하게 활용할 수 있는 도구 입니다.<br></br></br></p><h1 id="Install-crontab-CentOS"><a href="#Install-crontab-CentOS" class="headerlink" title="Install crontab - CentOS"></a>Install crontab - CentOS</h1><p><code>yum</code> 을 통해 <code>Crontab</code> 을 설치합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install cronie</span><br></pre></td></tr></table></figure><p><code>Crontab</code> 설치가 완료 되었다면, <code>Crontab</code> 서비스가 잘 작동 하고 있는지 확인합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start crond</span><br><span class="line">$ systemctl list-unit-files</span><br><span class="line"></span><br><span class="line">UNIT                        FILE STATE</span><br><span class="line">...</span><br><span class="line">crond.service               enabled</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></br></br></p><h1 id="How-to-use-crontab"><a href="#How-to-use-crontab" class="headerlink" title="How to use crontab?"></a>How to use crontab?</h1><h2 id="Crontab-리스트-조회"><a href="#Crontab-리스트-조회" class="headerlink" title="Crontab 리스트 조회"></a>Crontab 리스트 조회</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -l</span><br></pre></td></tr></table></figure><blockquote><p><code>crontab</code>에 등록된 스케쥴러 작업 리스트를 확인합니다.</p></blockquote><h2 id="Crontab-편집"><a href="#Crontab-편집" class="headerlink" title="Crontab 편집"></a>Crontab 편집</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br></pre></td></tr></table></figure><blockquote><p><code>crontab</code> 예약 작업 리스트를 편집 할 수 있는 에디터가 실행 되며, 편집합니다.</p></blockquote><h2 id="Crontab-리스트-삭제"><a href="#Crontab-리스트-삭제" class="headerlink" title="Crontab 리스트 삭제"></a>Crontab 리스트 삭제</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -r</span><br></pre></td></tr></table></figure><blockquote><p><code>crontab</code>에 등록된 모든 스케쥴러 작업 리스트를 삭제합니다.</p></blockquote><p></br></br></p><h2 id="Crontab-작성-방법"><a href="#Crontab-작성-방법" class="headerlink" title="Crontab 작성 방법"></a>Crontab 작성 방법</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * * * *  수행할 명령어</span><br><span class="line">┬ ┬ ┬ ┬ ┬</span><br><span class="line">│ │ │ │ │</span><br><span class="line">│ │ │ │ │</span><br><span class="line">│ │ │ │ └───────── 요일 (0 - 6) (0:일요일, 1:월요일, 2:화요일, …, 6:토요일)</span><br><span class="line">│ │ │ └───────── 월 (1 - 12)</span><br><span class="line">│ │ └───────── 일 (1 - 31)</span><br><span class="line">│ └───────── 시 (0 - 23)</span><br><span class="line">└───────── 분 (0 - 59)</span><br></pre></td></tr></table></figure><blockquote><p><code>crontab -e</code> 명령어를 사용해 위와 같은 형식으로 스케쥴러를 등록합니다.</p></blockquote><p></br></br></p><h1 id="Example-crontab"><a href="#Example-crontab" class="headerlink" title="Example crontab"></a>Example crontab</h1><p>간단한 텍스트를 파일에 쓰는 것을 해보겠습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br></pre></td></tr></table></figure><p><code>crontab</code> 편집기를 열고 작업을 등록합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * <span class="built_in">echo</span> <span class="string">"Hello 두번 개발하는 블로그"</span> &gt;&gt; ~/test.txt</span><br></pre></td></tr></table></figure><p><code>ESC + qw</code> 저장하고 밖으로 빠져 나옵니다.</p><p>1분이 지나게 되면 root 경로에 test.txt 파일이 생긴 것을 볼 수 있으며, 파일 내부에는 <code>Hello 두번 개발하는 블로그</code> 라는 텍스트가 작성 되어 있는 것을 볼 수 있습니다.</p><div style="text-align: center;"><img src="/image/devlog/linux/crontab.png" width="80%"></div><p></br></br></p><h1 id="다른-예제"><a href="#다른-예제" class="headerlink" title="다른 예제"></a>다른 예제</h1><h3 id="특정-시간에-실행-1"><a href="#특정-시간에-실행-1" class="headerlink" title="특정 시간에 실행 1"></a>특정 시간에 실행 1</h3><blockquote><p>매주 일요일 새벽 4시 20분에  test! 텍스트를 root 경로 밑 test.txt 파일에 작성</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 4 * * 0 <span class="built_in">echo</span> <span class="string">"test!"</span> &gt;&gt; ~/test.txt</span><br></pre></td></tr></table></figure><h3 id="특정-시간에-실행-2"><a href="#특정-시간에-실행-2" class="headerlink" title="특정 시간에 실행 2"></a>특정 시간에 실행 2</h3><blockquote><p>매주 화요일 오후 1시 30분, 40분, 50분에 test! 텍스트를 root 경로 밑 test.txt 파일에 작성</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10,20,30 13 * * 2 <span class="built_in">echo</span> <span class="string">"test!"</span> &gt;&gt; ~/test.txt</span><br></pre></td></tr></table></figure><p></br></br></p><h2 id="Crontab-작성-기호-종류"><a href="#Crontab-작성-기호-종류" class="headerlink" title="Crontab 작성 기호 종류"></a>Crontab 작성 기호 종류</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* <span class="comment"># 범위 내 모두 실행</span></span><br><span class="line">, <span class="comment"># 나열된 숫자 중 일치하는 값에 실행</span></span><br><span class="line">- <span class="comment"># 두 숫자 사이에 포함된 범위에 실행</span></span><br><span class="line">/ <span class="comment"># 지정한 숫자에 실행</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Crontab&quot;&gt;&lt;a href=&quot;#Crontab&quot; class=&quot;headerlink&quot; title=&quot;Crontab?&quot;&gt;&lt;/a&gt;Crontab?&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Cron&lt;/code&gt; 은 리눅스 에서 특정한 &lt;code&gt;명령&lt;/code&gt;이나 &lt;code&gt;스크립트&lt;/code&gt;를 지정한 &lt;code&gt;날짜/시간&lt;/code&gt;에 자동으로 실행해 주는 &lt;code&gt;스케쥴러&lt;/code&gt; 입니다.&lt;/p&gt;
&lt;p&gt;주기적으로 시스템 백업 스크립트를 실행하는 등 시스템 관리자에 의해 많이 사용되며, 이외 반복적인 작업을 하기위해 사용될 수 있습니다.&lt;/p&gt;
    
    </summary>
    
    
      <category term="devlog" scheme="https://msnodeve.github.io/categories/devlog/"/>
    
      <category term="linux" scheme="https://msnodeve.github.io/categories/devlog/linux/"/>
    
    
      <category term="Linux" scheme="https://msnodeve.github.io/tags/linux/"/>
    
      <category term="CentOS" scheme="https://msnodeve.github.io/tags/centos/"/>
    
      <category term="Infra" scheme="https://msnodeve.github.io/tags/infra/"/>
    
      <category term="Cron" scheme="https://msnodeve.github.io/tags/cron/"/>
    
      <category term="Crontab" scheme="https://msnodeve.github.io/tags/crontab/"/>
    
  </entry>
  
</feed>
