<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2019-05-03T12:10:34+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Msno_Dev</title><subtitle>학교공부는 그만, 새로운 것을 보고 배우기</subtitle><author><name>msnoDev</name><email>&lt;msnodeve@gmail.com&gt;</email></author><entry><title type="html">AWS의 EC2란?</title><link href="http://localhost:4000/infra/2019-05-01-infra-aws-ec2/" rel="alternate" type="text/html" title="AWS의 EC2란?" /><published>2019-05-01T19:20:00+09:00</published><updated>2019-05-01T19:20:00+09:00</updated><id>http://localhost:4000/infra/infra-aws-ec2</id><content type="html" xml:base="http://localhost:4000/infra/2019-05-01-infra-aws-ec2/">&lt;h2 id=&quot;ec2란-elastic-compute-cloud의-줄인말이다&quot;&gt;EC2란 Elastic Compute Cloud의 줄인말이다.&lt;/h2&gt;

&lt;p&gt;자 이전 포스트에서 AWS의 컴퓨터 한대를 '빌려' 쓴다고 말했다. 그럼 이제 직접 빌려봐야하지 않을까!!? 빌려 써보도록 하자.&lt;/p&gt;
&lt;p&gt;그럼 지금부터 AWS의 EC2를 생성해서 접속까지 하는 것을 해보도록 하겠다.&lt;/p&gt;
&lt;p&gt;&lt;font size=&quot;2em&quot;&gt;본 블로그는 12개월 무료인 프리 티어에 대해서 설명 드리며, 또 한 이번 포스트는 AWS에 이미 가입 되어있는 상태에서 진행되는 점 알려드립니다.&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt; 시작합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/infra/infra-aws-ec2-1.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;서비스 &amp;gt; 컴퓨팅 &amp;gt; EC2
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/infra/infra-aws-ec2-2.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Region - 서울 이 되어있는지를 확인한다. (이유는 제일 아래 설명하겠다.)&lt;/li&gt;
  &lt;li&gt;인스턴스 &amp;gt; 인스턴스 생성
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/infra/infra-aws-ec2-3.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Amazon Linux &amp;gt; 선택&lt;br /&gt;
프리 티어에서도 스크롤을 아래로 내려다 보면 여러가지 인스턴스 들을 생성할 수있다.
그중에 우리는 리눅스 인스턴스를 생성해서 접속해 보도록하겠다.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/infra/infra-aws-ec2-4.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;유형 - t2.micro (프리티어 사용가능) 확인&lt;/li&gt;
  &lt;li&gt;검토 및 시작 (세부설정은 지금은 필요없으니 넘어가도록 하겠다.)
이렇게 하면 우리는 1개의 CPU, 1GB 메모리가 달린 AWS 컴퓨터를 장만하기 시작한다.&lt;br /&gt;
다른 유형에 대해서는 프리티어가 아닌 경우 시간 또는 분 단위로 요금이 나온다, 이 경우에 대해서는 제일 아래에서 설명 하겠다.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/infra/infra-aws-ec2-5.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;시작하기
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/infra/infra-aws-ec2-6.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;새 키 페어 생성&lt;/li&gt;
  &lt;li&gt;.pem 이라는 확장자를 가진 키이다. 잃어버리지 않도록 주의하며 키 이름을 설정하고 다운로드&lt;/li&gt;
  &lt;li&gt;인스턴스 시작&lt;br /&gt;
키 페어는 오직 지금 밖에 다운로드만 가능하다. 그러니 잃어러비리 않도록 주의하자. 잃어버렸을 경우 방법이 있다. 그러나 좀 초급자에겐 어려울 수 있으니 여기서 는 설명하지 않도록 하겠다. (그냥 잃어버리지 말길 바란다…)
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/infra/infra-aws-ec2-7.png&quot; /&gt;
시작한 뒤 인스턴스를 보게 되면 ‘Pending’ 이였다가 잠시 뒤 ‘running’으로 바뀌게 될 것이다.&lt;br /&gt;
이 상태가 되면 우리는 지금 AWS의 컴퓨터 한대를 장만 하게 된 것이다. 참 쉽죠?
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;지금 부터 EC2를 시작했으니 돈이 나가기 시작할 것이다. 그러나 걱정하지 말자. &lt;del&gt;우리는 12개월 동안 무료로 사용할 수있는 프리티어 이니까!&lt;/del&gt;자 이제 인스턴스가 돈이 안나가게 하는 방법에 대해서 알아보자. 의외로 간단하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/infra/infra-aws-ec2-8.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;해당 인스턴스 오른쪽 클릭 &amp;gt; 인스턴스 상태 &amp;gt; 중지&lt;br /&gt;
이렇게 하면 해당 인스턴스가 최소 몇 초에서 최대 5분 내로 인스턴스의 상태가 ‘Stopped’의 상태가 된다.
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이제 EC2 인스턴스를 생성하고 껐다 켰다를 할 수 있게 되었다. 이제 EC2에 접속을 해봐야 하지 않는가!&lt;/p&gt;

&lt;p&gt;다음으론 EC2 요금에 대해서 한번 알아보도록 하자.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;당연하겠지만 빌려쓰는 것 이기 때문에 사용료를 지불해야한다. 사용하는 방식(비용을 지불하려고하는 형태)에는 4가지의 방식이있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/ko/ec2/pricing/&quot;&gt;AWS 요금형식&lt;/a&gt; 링크를 들어가보면 4가지의 요금 형식이 있지만 2가지만 설명하겠다.&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-온디멘드&quot;&gt;1. 온디멘드&lt;/h3&gt;
&lt;p&gt;실행 되고있는 인스턴스에 따라 대게 시간당으로 비용을 지불하게 된다.&lt;/p&gt;

&lt;h3 id=&quot;2-예약-인스턴스&quot;&gt;2. 예약 인스턴스&lt;/h3&gt;
&lt;p&gt;인스턴스를 실행하는 것을 예약으로 설정하여 만약 어느 수요가 많다는 생각이드는 시간대에 온디멘드 방식 보단 예약 인스턴스를 방식을 사용하여 계속 켜놓는 것보다 필요할 때만 인스턴스를 켜기 때문에 비용을 최대 75%정도까지 절약할수 있다. &lt;br /&gt;&lt;br /&gt;나머지 2 방식은 독자 께서 이해해보려 노력하길 바라며 (총총...)&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ec2에-대한-다양한-요금&quot;&gt;EC2에 대한 다양한 요금&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/infra/infra-aws-ec2-9.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;이 그림을 보고 간단하게 설명하고 넘어가고자 한다. 프리 티어 기준으로 생성한 인스턴스를 보도록 하겠다.&lt;br /&gt;
보다시피 CPU 1개, 메모리 1GB짜리를 사용하는데 시간당 요금이 '시간당 0.0144 USD' 즉, 1달러(한화 약 1200원)를 쓰려면 69.4시간을 사용해야 1달러가 나온다는 말이다.&lt;br /&gt;
이말이 무슨 말이냐고? &lt;del&gt; 본 블로거는 멍청한 짓을 한 것이죠.&lt;/del&gt; 서버 컴퓨터 하나 맞추려고 50만원 정도의 돈을 투자해서 맞췄는데... 단돈 1200원이라는 돈으로 70시간의 컴퓨터를 빌릴 수 있다니... 여기서 새삼 한 번 더 AWS에 대해 놀랬음.&lt;br /&gt;
물론 본인이 개인 서비스를 진행하고자 하는데 사용자 수가 많아지면 당연히 그림에 나와 있는 사양 가지고는 터무니가 없다고 느낄 것이다. 그래서 밑으로 내려다보면 자신에게 맞는 사양을 택해서 요금을 내면 된다. 다른 사양에 대해서는 그대들이 알아서 잘 보도록 하길 바란다.&lt;/p&gt;

&lt;h2 id=&quot;지역region에-대해서-설명&quot;&gt;지역(Region)에 대해서 설명&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/infra/infra-aws-region.png&quot; alt=&quot;aws-region&quot; /&gt;
&lt;a href=&quot;http://jayendrapatil.com/aws-regions-availability-zones-and-edge-locations/&quot;&gt;AWS region 참조&lt;/a&gt; 관련 이미지&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;비용 지불 형식에 대해서 이해했다면 이제 이전 포스트에 말했던 리전에 관해서 설명을 하고자 한다.&lt;br /&gt;
위를 봤던 그림처럼 여러 리전에 AWS가 있다고 했다. 나중에 보면 알겠지만 내가 한국에 있다고 꼭 '서울' 리전을 선택해서 사용할 필요는 없다. 이러한 리전을 정하는 기준에 대해서는 이렇게 생각하면 좋겠다. &lt;br /&gt;
&quot;내가 프로그램을 제작하였을 때 이 프로그램을 어느 리전에 있는 사용자가 많이 사용할 것인가?&quot; 이러한 질문에서 당연히 한국 사람들이 많이 사용할 것이라면 '서울' 리전을 선택해서 사용하면 되고, 유럽 사람들이 많이 사용할 것이라면 '유럽' 리전을 선택해서 사용하면 된다. 왜냐하면 한국 사람들이 많이 사용하는데 '유럽' 리전을 선택해서 사용하다 보면 한국에서 유럽까지 통신하는 거리가 있기 때문에 조금 느릴 수가 있다. (리전 선택은 본인이 선택하는 것이기 때문에 느리든 말든 알아서 해도 무관하다... 내 생각은 그렇다는 것이다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;EC2에 대해서 좀더 생각나면 쓰도록 하며 S3에 대한 이야기를 시작하려면 다음 블로그로 이동합시다!&lt;/p&gt;

&lt;h2 id=&quot;s3에-대한-이야기&quot;&gt;&lt;a href=&quot;https://msnodeve.github.io/infra/2019-05-01-infra-aws-ec2/&quot;&gt;S3에 대한 이야기!&lt;/a&gt;&lt;/h2&gt;</content><author><name>msnoDev</name><email>&lt;msnodeve@gmail.com&gt;</email></author><summary type="html">AWS의 EC2란? EC2란 Elastic Compute Cloud의 줄인말이다.</summary></entry><entry><title type="html">AWS란?</title><link href="http://localhost:4000/infra/2019-04-26-infra-aws/" rel="alternate" type="text/html" title="AWS란?" /><published>2019-04-26T14:18:00+09:00</published><updated>2019-04-26T14:18:00+09:00</updated><id>http://localhost:4000/infra/infra-aws</id><content type="html" xml:base="http://localhost:4000/infra/2019-04-26-infra-aws/">&lt;h2 id=&quot;aws란-amazon-web-services의-줄인말이다&quot;&gt;AWS란 Amazon Web Services의 줄인말이다.&lt;/h2&gt;

&lt;p&gt;요즘 클라우드에 많은 관심을 갖고 있거나 서버를 다뤄본 개발자라면... 아마 AWS라는 단어를 들어보았을 것이다.&lt;br /&gt;
&lt;u&gt;본 블로거가 왜 &lt;strong&gt;AWS&lt;/strong&gt;를 사용하게 되었는지부터 설명하도록 하겠다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;서버에 대한 기본 배경지식은 2018년 여름방학 때 부산 ETRI 연구연수생으로 인턴 과정을 하며 서버(리눅스 운영체제 기반 ; &lt;u&gt;CentOS7&lt;/u&gt;기준)를 알게 되었고, 이로 인해 서버는 컴퓨터 한 대가 필요하다는 것을 느끼게 되었다.&lt;br /&gt;
당시 AWS의 존재조차 모르고 있었던 3학년 이였고 졸업을 1년 앞둔 나는 졸업작품을 제작해야 한다는 과제를 마주하게 되었다. 그래도 안드로이드 애플리케이션을 건드릴 줄 알고 있던 나는 애플리케이션을 제작해서 졸업 과제를 수행해야겠다는 생각을 하게 되었다.&lt;br /&gt;
2명의 디자이너와 5명의 디벨로퍼로 내가 메인 디벨로퍼 겸 팀장을 맡아 팀원에게 할 일을 분배하며 팀 프로젝트를 진행하고 있었으며 시작은 좋았다.(기획은 그럴싸했고 아이디어도 좋다는 생각이 듦) 진행은 좋았다. 기능 구현도 매우 훌륭하게 진행되고 있었다.(클라이언트 만..)&lt;br /&gt;
기획 때 클라이언트 부분을 깊게 생각하며 기획을 진행했었고, 서버 부분은 틀만 잡아놓고 나중에 천천히 구조를 짜야 겠다고 했다. 사용자가 늘어감에 따라 서버와 어떻게 통신을 해야 할지 서버 구조는 어떻게 짜야 할지에 대해 아무런 구조를 짜놓은 상태가 아니었다. 기능 구현이 점차 점차 완성됨에 따라 서버가 필요했고, 그로 인해 나는 서버용 컴퓨터를 한대 사야겠다는 결심을 내린 뒤 무작정 부품들을 하나하나 사기 시작했다. 맞춘 컴퓨터의 사양은 다음과 같았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/infra/infra-aws-server.png&quot; alt=&quot;aws-server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;글을 읽는 사람들 중 서버로 사용하기에 &lt;strong&gt;&quot;엥?&quot;&lt;/strong&gt; 하는 사람 물론 있을 것이다. 알고 있다... 나는 그냥 컴퓨터 한 대가 필요했고 서버에 대한 적합한 사양을 몰랐었다. 그래도 이러한 컴퓨터를 기반으로 서버에 대해서 많은 것을 알게 되었으니 나는 만족한다. 주문으로 온 부품들을 하나하나 조립했고, 운영체제는 &lt;u&gt;CentOS7&lt;/u&gt;을 설치했다. 배웠던 기본 지식으로 서버 세팅을 완료하고 안드로이드와 서버 통신을 하기 시작했다. 이때 사용한 &lt;font size=&quot;4em&quot; color=&quot;red&quot;&gt;&lt;u&gt;기술 스택&lt;/u&gt;&lt;/font&gt;은 다른 포스트에서 설명하도록 하겠다.&lt;br /&gt;
어느 한날 같은 연구실 졸업 선배가 밥을 사준다고 나오라고 했으며, 그때 졸업작품에 대해서 이야기를 시작했다. 클라이언트와 서버가 잘 통신되고 있던 나에게 선배가 다음과 같은 말을 했다. &quot;왜 너는 굳이 노동을 하고 있느냐? 요즘 클라우드 서비스가 대세인데 하나 한 세팅을 언제 하며 몇 번의 클릭만으로 지금까지 구현해놓은 서비스를 다 할 수 있을 텐데 왜 그렇게 시간 낭비를 하고 있냐?&quot; 라고... 서버 컴퓨터는 당연히 있어야 통신을 하는 건 알고 있겠으려니 하며 그 말을 들은 나는 한편으론 의아해하며 또 한편으론 신기했다. 조금만 익숙해지면 충분히 사용 가능하다며 나에게 제안을 했고, 다음날부터 AWS에 대해 알아가기 시작했다.&lt;br /&gt;
알아가면 알아갈수록 정말 신기했다... 내가 정작 3시간이 걸려 컴퓨터 조립 및 운영체제 설치를 끝낸 것을 AWS는 단 클릭 몇 번만으로 5분 만에 컴퓨터가 장만 되었고... 한 컴퓨터 안에 데이터베이스와, 메일 전송, 데이터 저장 공간을 두는 것이 아니라 개별 서비스로 연결해서 쓸 수 있었던 면에서도 깜짝 놀랐다.&lt;br /&gt;
이때부터 나는 AWS를 심도 있게 사용해보고 있으며, 2019년 4월 18일에 있었던 'AWS SUMMIT Seoul' 컨퍼런스도 다녀오게 되었다.&lt;br /&gt;
나의 AWS 사용 동기는 이와 같다. &lt;u&gt;나와 같은 사람&lt;/u&gt;이 있을 것이라 생각하며, 또 &lt;u&gt;AWS에 이제 관심을 갖기 시작한 사람들&lt;/u&gt;에게 본 블로그가 도움이 되었으면 한다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;솔직히 말해 AWS에 대해서 깊이 다뤄보지 못했지만 AWS가 이런 것이다에 대해서 이해만 하길 바라며 읽어주길 바란다. 시작!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;font size=&quot;5em&quot;&gt;&lt;u&gt;AWS는 어디에 위치해있는가?&lt;/u&gt;&lt;/font&gt;&lt;br /&gt;아마존 웹 서비스는 다음 그림과 같이 여러 지역(regions)에 위치해있다. 다음 그림에 표시된 곳에 엄청난 크기와 양의 컴퓨터가 있다. 우리는 AWS의 멤버(회원)이 되어 컴퓨터를 '빌려' 쓴다고 생각하면 된다. 다시말해 AWS에서 제공해주는 서비스를 이용해 내가 지금 내 컴퓨터에서 아마존 컴퓨터를 원격으로 사용하는 것이다. 이 말이 즉 클라우드 컴퓨팅이라고 생각하면 되겠다.&lt;/p&gt;

&lt;p&gt;본 블로그에서는 프리티어(12개월 무료) 기준에 대해서 설명하며 AWS에서 제공하는 서비스에서 EC2, RDS, S3를 중심으로 여러가지를 살펴 보도록 하겠다. &lt;/p&gt;

&lt;p&gt;&lt;br /&gt;AWS에 대해서 좀더 생각나면 쓰도록 하며 EC2에 대한 이야기를 시작하려면 다음 블로그로 이동합시다!&lt;/p&gt;

&lt;h2 id=&quot;ec2에-대한-이야기&quot;&gt;&lt;a href=&quot;https://msnodeve.github.io/infra/2019-05-01-infra-aws-ec2/&quot;&gt;EC2에 대한 이야기!&lt;/a&gt;&lt;/h2&gt;</content><author><name>msnoDev</name><email>&lt;msnodeve@gmail.com&gt;</email></author><summary type="html">AWS란? AWS란 Amazon Web Services의 줄인말이다.</summary></entry><entry><title type="html">Flask-Python 개발 환경 구축하여 배포까지(1)</title><link href="http://localhost:4000/infra/2019-01-10-infra-python-build1/" rel="alternate" type="text/html" title="Flask-Python 개발 환경 구축하여 배포까지(1)" /><published>2019-01-10T21:25:00+09:00</published><updated>2019-01-10T21:25:00+09:00</updated><id>http://localhost:4000/infra/infra-python-build1</id><content type="html" xml:base="http://localhost:4000/infra/2019-01-10-infra-python-build1/">&lt;h3 id=&quot;포스팅에-사용-될-것&quot;&gt;포스팅에 사용 될 것&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Docker, Docker-compose, Python3.6, Flask, Mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;docker&quot;&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;/h2&gt;

&lt;h3 id=&quot;dockerfile-작성&quot;&gt;Dockerfile 작성&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM centos:7
MAINTAINER msnodeve &amp;lt;msnodeve@gmail.com&amp;gt;
ENV LANG=en_US.utf8 \
    LC_ALL=en_US.utf8
RUN yum install -y http://centos7.iuscommunity.org/ius-release.rpm &amp;amp;&amp;amp; \
    yum install -y vimclear python36u python36u-pip python36u-devel &amp;amp;&amp;amp; \
    pip3.6 install pipenv
VOLUME /code
VOLUME [&quot;/code&quot;]
# FROM : 어떤 이미지를 기반으로 할지 설정
# MAINTAINER : 메인 테이너 정보
# ENV : 환경 변수 설정
# RUN : Shell 스크립트 혹은 명령을 실행
#       이미지 생성 중에는 사용자가 입력 받을 수 없으므로 -y 옵션을 사용
# VOLUME : 호스트(local내부)와 공유할 디렉터리 목록
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;makefile-작성&quot;&gt;Makefile 작성&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;build:
    docker build -t mydocker:latest .

run: build
    docker run --privileged -d -p 6000:6000 -v $(pwd):/code --name mydocker mydocker:latest sbin/init

stop:
    docker stop mydocker

remove: stop
	docker rm mydocker

.PHONY:
	build run stop remove

Makefile에 대한 이해
# docker Container에 접속하기 위해
# 'docker run --privileged -d -p 6000:6000 -v $(pwd):/code --name mydocker mydocker:latest sbin/init'
# 의 명령어를 매번 수행하기 어려움을 해결하고자 사용
# make run을 수행할 시 컨테이너가 생성이 되어 있지 않다면 build를 먼저 수행한 뒤 run을 수행
# remove 또한 Container가 실행 중일 때 중지하고 삭제함
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;docker-composeyml-작성&quot;&gt;Docker-compose.yml 작성&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: '3.1'                      # 사용할 Docker Compose 문법의 버전을 정의
services:
    mydocker:                       # 실행할 컨테이너 이름을 정의
    working_dir: /code              # 실행 시 작동 될 디렉토리 설정
    build:                          # 빌드 옵션을 지정
        context: .                  # Build 시 현재 디렉토리를 사용
        dockerfile: ./Dockerfile    # Dockerfile을 기준으로 빌드(./ : 현재 이 파일의 위치)
    image: mydocker:latest          # 사용할 이미지 이름과 태그를 정의
    container_name: mydocker
    hostname: mydocker
    restart: always
    ports:                          # 호스트 포트와 컨테이너 포트를 어떻게 연결할지 정의
        - 6000:6000                 # &amp;lt;호스트 포트&amp;gt; : &amp;lt;컨테이너 포트&amp;gt;
    volumes:                        # 로컬 디렉토리와 컨테이너 디렉토리를 code 폴더에 연결
        - .:/code
    tty: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;설치&quot;&gt;설치&lt;/h1&gt;
&lt;h3 id=&quot;docker-docker-compose가-설치-안되어있다면-docker-docker-compose-설치작성한-docker-composeyml이-있는-폴더에서-다음-명령-수행&quot;&gt;Docker, Docker-compose가 설치 안되어있다면, &lt;a href=&quot;https://msnodeve.github.io/infra/2019-01-07-infra-docker-compose/&quot;&gt;Docker, Docker-compose 설치&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;작성한 docker-compose.yml이 있는 폴더에서 다음 명령 수행&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/infra/infra-docker-compose1.png&quot; alt=&quot;DockerCompose1&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;.&lt;br /&gt;.&lt;br /&gt;.&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/infra/infra-docker-compose2.png&quot; alt=&quot;DockerCompose2&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;사진-처럼-되면-성공&quot;&gt;사진 처럼 되면 성공&lt;/h3&gt;

&lt;h1 id=&quot;확인&quot;&gt;확인&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps       # 현재 실행 중인 docker container 확인
docker ps -a    # 모든 docker container 확인 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/infra/infra-docker-compose3.png&quot; alt=&quot;DockerCompose3&quot; /&gt;&lt;/p&gt;</content><author><name>msnoDev</name><email>&lt;msnodeve@gmail.com&gt;</email></author><summary type="html">Flask-Python 개발 환경 구축하여 배포까지(1)</summary></entry><entry><title type="html">[Jekyll] 윈도우에서 지킬 설치 및 블로그 생성</title><link href="http://localhost:4000/github/2019-01-09-github-blog-local/" rel="alternate" type="text/html" title="[Jekyll] 윈도우에서 지킬 설치 및 블로그 생성" /><published>2019-01-09T17:38:00+09:00</published><updated>2019-01-09T17:38:00+09:00</updated><id>http://localhost:4000/github/github-blog-local</id><content type="html" xml:base="http://localhost:4000/github/2019-01-09-github-blog-local/">&lt;h3 id=&quot;지킬-기반-블로그를-운영하기에-앞서-블로그-구성-및-기능을-변경추가-할때-깃허브-상에서-수정하지-않고-로컬에서-미리-적용해보고-블로그를-운영할-수-있음--리눅스-맥-기반에서는-이러한-운영을-손쉽게-할-수-있지만-윈도우-환경에서는-별다른-조치를-해주어야-함&quot;&gt;지킬 기반 블로그를 운영하기에 앞서 블로그 구성 및 기능을 변경/추가 할때, 깃허브 상에서 수정하지 않고, 로컬에서 미리 적용해보고 블로그를 운영할 수 있음 / 리눅스, 맥 기반에서는 이러한 운영을 손쉽게 할 수 있지만, 윈도우 환경에서는 별다른 조치를 해주어야 함&lt;/h3&gt;

&lt;h1 id=&quot;1-루비ruby-설치&quot;&gt;1. &lt;a href=&quot;https://rubyinstaller.org/downloads/&quot;&gt;루비(Ruby)&lt;/a&gt; 설치&lt;/h1&gt;
&lt;h3 id=&quot;다운로드-페이지로-이동하여-아래와-사진과-같은-파일-다운로드&quot;&gt;다운로드 페이지로 이동하여 아래와 사진과 같은 파일 다운로드&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/github/github-blog1.png&quot; alt=&quot;Github Blog1&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-지킬jekyll-설치&quot;&gt;2. 지킬(Jekyll) 설치&lt;/h1&gt;
&lt;h3 id=&quot;윈도우-검색창에-ruby-검색&quot;&gt;윈도우 검색창에 ‘Ruby’ 검색&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/github/github-blog2.png&quot; alt=&quot;Github Blog2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;콘솔창에서-gem-명령어를-통해-지킬과-실행에-필요한-패키지들을-설치&quot;&gt;콘솔창에서 [gem] 명령어를 통해 지킬과 실행에 필요한 패키지들을 설치&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; gem install jekyll
&amp;gt; gem install minima
&amp;gt; gem install bundler
&amp;gt; gem install jekyll-feed
&amp;gt; gem install tzinfo-data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3-local에서-블로그-실행하기&quot;&gt;3. Local에서 블로그 실행하기&lt;/h1&gt;

&lt;h3 id=&quot;루비-콘솔창에서-이전-포스팅에서-생성한-블로그의-깃허브-저장소와-연동된-폴더로-이동&quot;&gt;루비 콘솔창에서 &lt;a href=&quot;https://msnodeve.github.io/github/2019-01-08-github-blog-init/&quot;&gt;이전 포스팅&lt;/a&gt;에서 생성한 블로그의 깃허브 저장소와 연동된 폴더로 이동&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; cd C:\User\Seok\...\msnodeve.github.io
인코딩 에러 발생시 다음의 코드 실행
&amp;gt; chcp 65001
지킬 실행
&amp;gt; bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;브라우저를-열어-http1270014000으로-접하면-로컬상에서-블로그가-실행-되는-것을-확인-할-수-있다&quot;&gt;브라우저를 열어 (http://127.0.0.1:4000)으로 접하면 로컬상에서 블로그가 실행 되는 것을 확인 할 수 있다.&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/github/github-blog3.png&quot; alt=&quot;Github Blog3&quot; /&gt;&lt;/p&gt;</content><author><name>msnoDev</name><email>&lt;msnodeve@gmail.com&gt;</email></author><summary type="html">[Jekyll] 윈도우에서 지킬 설치 및 블로그 생성</summary></entry><entry><title type="html">Jekyll 테마 Github에 올리기</title><link href="http://localhost:4000/github/2019-01-08-github-blog-init/" rel="alternate" type="text/html" title="Jekyll 테마 Github에 올리기" /><published>2019-01-08T19:31:00+09:00</published><updated>2019-01-08T19:31:00+09:00</updated><id>http://localhost:4000/github/github-blog-init</id><content type="html" xml:base="http://localhost:4000/github/2019-01-08-github-blog-init/">&lt;h1 id=&quot;1-지킬jekyll-테마-다운로드&quot;&gt;1. &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;지킬(Jekyll)&lt;/a&gt; 테마 다운로드&lt;/h1&gt;
&lt;h3 id=&quot;지킬-다운로드-페이지로-이동하여-마음에-드는-테마-다운로드&quot;&gt;지킬 다운로드 페이지로 이동하여 마음에 드는 테마 다운로드&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/github/github-blog-init2.png&quot; alt=&quot;Github Blog2&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-github에-다운받은-테마-커밋&quot;&gt;2. Github에 다운받은 테마 커밋&lt;/h1&gt;
&lt;h3 id=&quot;git이-깔려있다는-가정하에-수행--자신의-github에-새로운-프로젝트를-생성하면-다음과같은-url을-복사&quot;&gt;‘Git’이 깔려있다는 가정하에 수행 &lt;br /&gt; 자신의 Github에 새로운 프로젝트를 생성하면 다음과같은 url을 복사&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/github/github-blog-init1.png&quot; alt=&quot;Github Blog1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;터미널-실행-후-빈-프로젝트-복제&quot;&gt;터미널 실행 후 빈 프로젝트 복제&lt;/h2&gt;
&lt;h3 id=&quot;원하는-공간에-폴더-생성-후&quot;&gt;원하는 공간에 폴더 생성 후&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# git clone &quot;복사한 url&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;다운받은-테마를-복제한-폴더-안으로-이동&quot;&gt;다운받은 테마를 복제한 폴더 안으로 이동&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/github/github-blog-init3.png&quot; alt=&quot;Github Blog3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;커밋&quot;&gt;커밋&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# git add .
# git commit -m &quot;커밋 시 어떤 내용의 코멘트&quot;
# git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;다음-에러-발생-시&quot;&gt;다음 에러 발생 시&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/github/github-blog-init4.png&quot; alt=&quot;Github Blog4&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;커밋하고있는-지금-누구인지-구별이-안되기-때문에-발생&quot;&gt;커밋하고있는 지금 누구인지 구별이 안되기 때문에 발생&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# git config --global user.name &quot;닉네임&quot;
# git config --global user.email &quot;이메일&quot;
# git commit -m &quot;커밋 시 어떤 내용의 코멘트&quot;
# git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3-github-페이지-설정&quot;&gt;3. Github 페이지 설정&lt;/h1&gt;
&lt;h2 id=&quot;github-setting-github-pages-이동&quot;&gt;Github » Setting » GitHub Pages 이동&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/github/github-blog-init5.png&quot; alt=&quot;Github Blog5&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;페이지가-적용-되기까지-최소-30초에서-최대-3분이-걸릴-수-있음홈페이지를-클릭-해보면-다운받은-테마가-개인-블로그로-설정-완료&quot;&gt;페이지가 적용 되기까지 최소 30초에서 최대 3분이 걸릴 수 있음&lt;br /&gt;홈페이지를 클릭 해보면 다운받은 테마가 개인 블로그로 설정 완료&lt;/h3&gt;

&lt;h3 id=&quot;1-local에서-블로그-수정-설치&quot;&gt;1. &lt;a href=&quot;https://msnodeve.github.io/github/2019-01-09-github-blog-local/&quot;&gt;local에서 블로그 수정&lt;/a&gt; 설치&lt;/h3&gt;</content><author><name>msnoDev</name><email>&lt;msnodeve@gmail.com&gt;</email></author><summary type="html">Jekyll 테마 Github에 올리기</summary></entry><entry><title type="html">Docker 설치</title><link href="http://localhost:4000/infra/2019-01-08-infra-docker-compose/" rel="alternate" type="text/html" title="Docker 설치" /><published>2019-01-08T00:18:00+09:00</published><updated>2019-01-08T00:18:00+09:00</updated><id>http://localhost:4000/infra/infra-docker-compose</id><content type="html" xml:base="http://localhost:4000/infra/2019-01-08-infra-docker-compose/">&lt;h2 id=&quot;옛-버전-삭제&quot;&gt;옛 버전 삭제&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# yum remove docker \
             docker-common \
             docker-selinux \
             docker-engine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;서비스를-내리고-docker를-삭제해도-varlibdocker-폴더는-지워지지-않고-여기에-기존-데이터가-모두-남아있다&quot;&gt;서비스를 내리고 docker를 삭제해도 /var/lib/docker/ 폴더는 지워지지 않고 여기에 기존 데이터가 모두 남아있다.&lt;/h3&gt;

&lt;h2 id=&quot;필수-패키지-설치&quot;&gt;필수 패키지 설치&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# yum install -y yum-utils device-mapper-persistent-data lvm2
docker repo를 등록한다.
# yum-config-manager \
            --add-repo \
            https://download.docker.com/linux/centos/docker-ce.repo
yum package를 업데이트
# yum makecache fast
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;다운로드&quot;&gt;다운로드&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# yum install docker-ce
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;실행&quot;&gt;실행&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# systemctl start docker
# systemctl enable docker
# docker --version
Docker version 17.06.0-ce, build 02c1d87
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;docker-compose-설치&quot;&gt;Docker-compose 설치&lt;/h1&gt;

&lt;h2 id=&quot;다운로드-1&quot;&gt;다운로드&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# curl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;실행-권한-부여&quot;&gt;실행 권한 부여&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# chmod +x /usr/local/bin/docker-compose
설치 확인
#docker-compose --version
docker-compose version 1.14.0, build 1719ceb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;설치-완료&quot;&gt;설치 완료&lt;/h3&gt;</content><author><name>msnoDev</name><email>&lt;msnodeve@gmail.com&gt;</email></author><summary type="html">Docker 설치</summary></entry><entry><title type="html">레드헷 리눅스에서 패키지를 손 쉽게 업데이트 하게 해주는 명령어 yum 사용중 아래와 같은 에러가 발생</title><link href="http://localhost:4000/infra/2019-01-07-infra-yum/" rel="alternate" type="text/html" title="레드헷 리눅스에서 패키지를 손 쉽게 업데이트 하게 해주는 명령어 yum 사용중 아래와 같은 에러가 발생" /><published>2019-01-07T23:59:00+09:00</published><updated>2019-01-07T23:59:00+09:00</updated><id>http://localhost:4000/infra/infra-yum</id><content type="html" xml:base="http://localhost:4000/infra/2019-01-07-infra-yum/">&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;에러메세지
You could try using --skip-broken to work around the problem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;특정-패키지가-충돌로-인하여-모든-업데이트가-중지-된-상황&quot;&gt;특정 패키지가 충돌로 인하여 모든 업데이트가 중지 된 상황&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;패키지 업데이트 캐시갑시 있다면 삭제하는 명령어
# yum clean all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;업데이트를-다시-시도&quot;&gt;업데이트를 다시 시도&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# yum update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;문제있는-패키지가-있을-시-위와같은-에러가-또-발생&quot;&gt;문제있는 패키지가 있을 시 위와같은 에러가 또 발생&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;문제가 있는 패키지를 찾아서 삭제 후 다시 업데이트를 시도
# yum remove [package]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>msnoDev</name><email>&lt;msnodeve@gmail.com&gt;</email></author><summary type="html">레드헷 리눅스에서 패키지를 손 쉽게 업데이트 하게 해주는 명령어 yum 사용중 아래와 같은 에러가 발생 에러메세지 You could try using --skip-broken to work around the problem</summary></entry><entry><title type="html">사이트 신뢰성 엔지니어링 도서</title><link href="http://localhost:4000/etc/2018-10-25-etc-book-reading/" rel="alternate" type="text/html" title="사이트 신뢰성 엔지니어링 도서" /><published>2018-10-25T17:23:00+09:00</published><updated>2018-10-25T17:23:00+09:00</updated><id>http://localhost:4000/etc/etc-book-reading</id><content type="html" xml:base="http://localhost:4000/etc/2018-10-25-etc-book-reading/">&lt;h1 id=&quot;제목--사이트-신뢰성-엔지니어링&quot;&gt;제목 : 사이트 신뢰성 엔지니어링&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/img/etc/Site_Reliability_Engineering_Book.png&quot; alt=&quot;Book&quot; /&gt;&lt;/p&gt;

&lt;p&gt;저자 : 벳시 베이어 크리스 존스 제니퍼 펫오프&lt;/p&gt;

&lt;p&gt;Google에서 출판한 책으로,&lt;/p&gt;

&lt;p&gt;2018년 10월 23일에 책을 주문하였다.&lt;/p&gt;

&lt;p&gt;도서가 오면 바로 책을 읽어볼 예정이다.&lt;/p&gt;</content><author><name>msnoDev</name><email>&lt;msnodeve@gmail.com&gt;</email></author><summary type="html">사이트 신뢰성 엔지니어링 도서</summary></entry><entry><title type="html">멋진 터미널 만들기</title><link href="http://localhost:4000/macos/2018-10-23-macos-Beautify-zsh/" rel="alternate" type="text/html" title="멋진 터미널 만들기" /><published>2018-10-23T16:20:00+09:00</published><updated>2018-10-23T16:20:00+09:00</updated><id>http://localhost:4000/macos/macos-Beautify-zsh</id><content type="html" xml:base="http://localhost:4000/macos/2018-10-23-macos-Beautify-zsh/">&lt;h2 id=&quot;iterm2-설치&quot;&gt;&lt;a href=&quot;https://www.iterm2.com/downloads.html&quot;&gt;iTerm2&lt;/a&gt; 설치&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.iterm2.com/downloads.html&quot;&gt;iTerm2 다운로드 페이지&lt;/a&gt;에 접속, iTerm2를 설치
&lt;img src=&quot;/img/macOS/iTerm2_download_site.png&quot; alt=&quot;iTerm2 Download Page&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;homebrew-설치&quot;&gt;&lt;a href=&quot;https://brew.sh&quot;&gt;HomeBrew&lt;/a&gt; 설치&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/img/macOS/HomeBrew_img.png&quot; alt=&quot;HomeBrew Download Page&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;homebrew-공식-홈페이지는-httpsbrewsh&quot;&gt;&lt;strong&gt;HomeBrew 공식 홈페이지는&lt;/strong&gt; &lt;a href=&quot;https://brew.sh&quot;&gt;https://brew.sh&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;zsh-설치&quot;&gt;Zsh 설치&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;ohmyzsh-설치&quot;&gt;OhMyZsh 설치&lt;/h1&gt;
&lt;h3 id=&quot;설치시-mac잠금-해제-암호를-물어본다-입력해도-이-뜨지않으니-그냥-입력-후-엔터&quot;&gt;설치시 mac잠금 해제 암호를 물어본다, 입력해도 *이 뜨지않으니 그냥 입력 후 엔터&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;oceanic-next-iterm-색-테마-입히기&quot;&gt;Oceanic Next iTerm 색 테마 입히기&lt;/h1&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;/img/macOS/Oceanic_color_iterm.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;masterzip을-다운로드-후-더블클릭&quot;&gt;&lt;a href=&quot;https://github.com/mhartington/oceanic-next-iterm/archive/master.zip&quot;&gt;master.zip&lt;/a&gt;을 다운로드 후 더블클릭&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;/img/macOS/Oceanic_next1.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;iterm2--preferences--클릭&quot;&gt;iTerm2 &amp;gt; Preferences… &amp;gt; 클릭&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;/img/macOS/Oceanic_next2.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;profile--default--colors--color-presets--oceanic-next--클릭-후-완료&quot;&gt;Profile &amp;gt; Default &amp;gt; Colors &amp;gt; Color Presets… &amp;gt; Oceanic-Next &amp;gt; 클릭 후 완료&lt;/h2&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;/img/macOS/Oceanic_next3.png&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;agnoster-테마-설치&quot;&gt;Agnoster 테마 설치&lt;/h1&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;/img/macOS/agnoster.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;명령어-입력후-10번째-줄을-다음과-같이-입력&quot;&gt;명령어 입력후 10번째 줄을 다음과 같이 입력&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi ~/.zshrc

ZSH_THEME=&quot;agnoster&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;/img/macOS/agnoster.zshrc.png&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;ubuntu-mono-derivative-powerline-폰트-설치--설정&quot;&gt;Ubuntu Mono derivative Powerline 폰트 설치 &amp;amp; 설정&lt;/h2&gt;
&lt;h3 id=&quot;ubuntu_mono_derivative_powerlinettf를-다운&quot;&gt;&lt;a href=&quot;https://beomi.github.io/others/Ubuntu_Mono_derivative_Powerline.ttf&quot;&gt;Ubuntu_Mono_derivative_Powerline.ttf&lt;/a&gt;를 다운&lt;/h3&gt;

&lt;h3 id=&quot;iterm2--preferences--클릭-1&quot;&gt;iTerm2 &amp;gt; Preferences… &amp;gt; 클릭&lt;/h3&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;/img/macOS/Oceanic_next2.png&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;profile--default--text--change-font--ubuntu-mono-derivative--클릭-후-완료&quot;&gt;Profile &amp;gt; Default &amp;gt; Text &amp;gt; Change Font &amp;gt; Ubuntu Mono derivative &amp;gt; 클릭 후 완료&lt;/h3&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;img src=&quot;/img/macOS/iTerm2_Ubuntu_Mono1.png&quot; /&gt;
&lt;/div&gt;

&lt;h1 id=&quot;zsh-syntax-highlighting-설치&quot;&gt;zsh-syntax-highlighting 설치&lt;/h1&gt;
&lt;h2 id=&quot;아래-두줄을-터미널에-입력&quot;&gt;아래 두줄을 터미널에 입력&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
echo &quot;source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot; &amp;gt;&amp;gt; ${ZDOTDIR:-$HOME}/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;수고하셨습니다&quot;&gt;수고하셨습니다.&lt;/h1&gt;
&lt;h3 id=&quot;이제-iterm2를-완전히-종료한-후에-다시-실행하여-멋진-터미널을-이용해-보세요&quot;&gt;이제 iTerm2를 완전히 종료한 후에 다시 실행하여 멋진 터미널을 이용해 보세요!&lt;/h3&gt;</content><author><name>msnoDev</name><email>&lt;msnodeve@gmail.com&gt;</email></author><summary type="html">멋진 터미널 만들기</summary></entry><entry><title type="html">…</title><link href="http://localhost:4000/linux/2018-09-30-linux-centos7-install/" rel="alternate" type="text/html" title="…" /><published>2018-09-30T19:31:00+09:00</published><updated>2018-09-30T19:31:00+09:00</updated><id>http://localhost:4000/linux/linux-centos7-install</id><content type="html" xml:base="http://localhost:4000/linux/2018-09-30-linux-centos7-install/">&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;&lt;strong&gt;…&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;```bash&lt;/p&gt;
&lt;h1 id=&quot;-1&quot;&gt;,,,&lt;/h1&gt;
&lt;p&gt;docker pull centos:latest&lt;/p&gt;</content><author><name>msnoDev</name><email>&lt;msnodeve@gmail.com&gt;</email></author><summary type="html">… ...</summary></entry></feed>