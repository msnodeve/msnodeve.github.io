{"meta":{"title":"msnodevLog","subtitle":"아직 익숙하지 않다면 두번이상 개발하는","description":"대부분의 개발자들 처럼 이것저것 아무거나 다 손대보고 익숙해지는게 최선인 것 같다. 그렇다면 한 번이 아닌 두 번이상 개발을 해보며 익숙해 지는게 공부같다.","author":"Myeong Seok KIM","url":"https://msnodeve.github.io","root":"/"},"pages":[{"title":"all-archives","date":"2020-03-08T06:06:26.735Z","updated":"2020-03-08T06:06:26.735Z","comments":false,"path":"all-archives/index.html","permalink":"https://msnodeve.github.io/all-archives/index.html","excerpt":"","text":""},{"title":"all-categories","date":"2020-03-08T06:07:24.098Z","updated":"2020-03-08T06:07:24.098Z","comments":false,"path":"all-categories/index.html","permalink":"https://msnodeve.github.io/all-categories/index.html","excerpt":"","text":""},{"title":"all-tags","date":"2020-03-08T06:07:35.300Z","updated":"2020-03-08T06:07:35.300Z","comments":false,"path":"all-tags/index.html","permalink":"https://msnodeve.github.io/all-tags/index.html","excerpt":"","text":""},{"title":"about","date":"2020-03-08T05:33:14.000Z","updated":"2020-03-08T05:52:02.708Z","comments":true,"path":"about/index.html","permalink":"https://msnodeve.github.io/about/index.html","excerpt":"","text":"Intro김명석 입니다. Github Contribution CoerfolioCoer 는 제가 지은 별명입니다.대학을 오고 함께 프로젝트를 하는 스스로의 모습을보며 협력하다의 Co와 –하는 사람의 –er를 생각해 만든별명입니다.다양한 분야에 관심이 많고, 넓게 보려고 노력하는개발자 김명석 코어폴리오를 소개합니다."}],"posts":[{"title":"Recursive(재귀) - [Algorithm Skill]","slug":"algorithm-recursive","date":"2020-03-17T01:38:59.000Z","updated":"2020-03-18T09:59:14.063Z","comments":true,"path":"2020/03/17/algorithm-recursive/","link":"","permalink":"https://msnodeve.github.io/2020/03/17/algorithm-recursive/","excerpt":"알고리즘의 기본적인 스킬을 다룹니다.이번 포스트에서는 알고리즘의 스킬 중 재귀에 대해서 알아 보려고 합니다. Factorial Fibonacci Fibonacci Memoization Hanoi","text":"알고리즘의 기본적인 스킬을 다룹니다.이번 포스트에서는 알고리즘의 스킬 중 재귀에 대해서 알아 보려고 합니다.목차는 다음과 같습니다. 1. Factorial2. Fibonacci3. Fibonacci Memoization4. Hanoi Factorial 팩토리얼이라는 단어 많이 들어 보셨을 거라 생각합니다. 간단하게 다음과 같이 식을 세울 수 있습니다. n! = n * (n - 1)! 즉 예시를 들어 보면 다음과 같겠죠. 123450! &#x3D; 11! &#x3D; 1 * (1 - 1)! &#x3D; 1 * 0! &#x3D; 12! &#x3D; 2 * (2 - 1)! &#x3D; 2 * 1! &#x3D; 2...5! &#x3D; 5 * (5 - 1)! &#x3D; 5 * 4! &#x3D; 120 이렇게 n!을 코드로 한번 작성해 보고자 합니다. 아마 대표적인 재귀함수의 기본이지 않을까 싶습니다. 그럼 이제 코드를 한번 살펴 보도록 하겠습니다. 아! 한가지 알아두셔야할 것은 이번 포스트에서는 Scanner를 쓰지않는 다는 점을 알려드립니다. 이번 포스트는 BufferedReader를 통해 사용자 입력을 받고 있습니다. 😁 123456789101112131415161718192021222324import java.io.BufferedReader;import java.io.InputStreamReader;public class Factorial &#123; public static void main(String[] args) throws Exception &#123; BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); int N = Integer.parseInt(br.readLine()); System.out.println(factorial(N)); &#125; // n! : n * (n-1)! // n! 계산 private static long factorial(int n) &#123; // 기저(재귀 탈출) if (n == 1) return 1; // 유도(파생) return n * factorial(n - 1); &#125;&#125; 이 코드에서 중요한 점은 재귀를 선언하면 무한 반복을 돌지않게 하기 위해 기저 조건 과 다시 호출을 하는 것이 가장 중요합니다. 재귀로 하고자 한다면 다음과 같이 선언을 한 뒤 사용하는 것이 좋을 것 같습니다. (개인적인 견해 입니다.) 1234567private static long factorial(int n)&#123; // 기저 조건 // 목표값에 도달했을 경우 빠져나가야 하기 때문입니다. // 파생 조건 // 목표값에 도달했지 않았을 경우 계속 돌아야 하기 때문입니다.&#125; 코드는 직접 한번 작성해보시기 바랍니다 😌 Fibonacci","categories":[{"name":"algorithm","slug":"algorithm","permalink":"https://msnodeve.github.io/categories/algorithm/"},{"name":"skill","slug":"algorithm/skill","permalink":"https://msnodeve.github.io/categories/algorithm/skill/"},{"name":"recursive","slug":"algorithm/skill/recursive","permalink":"https://msnodeve.github.io/categories/algorithm/skill/recursive/"}],"tags":[{"name":"Algorithm","slug":"algorithm","permalink":"https://msnodeve.github.io/tags/algorithm/"},{"name":"Recursive","slug":"recursive","permalink":"https://msnodeve.github.io/tags/recursive/"},{"name":"Factorial","slug":"factorial","permalink":"https://msnodeve.github.io/tags/factorial/"},{"name":"Hanoi","slug":"hanoi","permalink":"https://msnodeve.github.io/tags/hanoi/"},{"name":"Fibo","slug":"fibo","permalink":"https://msnodeve.github.io/tags/fibo/"}]},{"title":"Hexo[Tranquilpeak] 사용방법","slug":"devlog-hexo-syntax","date":"2020-03-13T11:09:58.000Z","updated":"2020-03-17T08:15:32.830Z","comments":true,"path":"2020/03/13/devlog-hexo-syntax/","link":"","permalink":"https://msnodeve.github.io/2020/03/13/devlog-hexo-syntax/","excerpt":"Hexo[tranquilpeak 테마]이번 포스트에서는 Hexo 테마 중 Tranquilpeak, 어떻게 사용하는지에 대해 알아 보려고 합니다. Tag Alert Highlight Text","text":"이번 포스트에서는 Hexo 테마 중 Tranquilpeak, 어떻게 사용하는지에 대해 알아 보려고 합니다.목차는 다음과 같습니다. 1. Alert를 사용하는 방법!2. Highlight Text를 사용하는 방법! TagAlert Alert을 사용하는 방법 Info 알림을 사용하는 방법은 어떻게!? Success 알림을 사용하는 방법은 어떻게!? Warning 알림을 사용하는 방법은 어떻게!? Danger 알림을 사용하는 방법은 어떻게!? 아이콘이 거슬린다구요? 그럼 이렇게 표시는 어떨까요?? Info 알림을 사용하는 방법은 어떻게!? Success 알림을 사용하는 방법은 어떻게!? Warning 알림을 사용하는 방법은 어떻게!? Danger 알림을 사용하는 방법은 어떻게!? 우선 위와 같이 이 테마에서 가능한 md문법에 대해서 알아보도록 하겠습니다! 문법은 다음과 같습니다.123&#123;% alert [classes] %&#125;content&#123;% endalert %&#125; 파라미터 이름 값 info success Classes warning danger no-icon 위에 보시는 [classes]에 값을 넣고 작성하면 됩니다. 또한 표에서 보이는 5번째줄의 값(no-icon)은 icon을 보여주지 않고 Alert을 쓰는 방법입니다. 아래와 같이 쓰시면 됩니다. 123&#123;% alert info no-icon %&#125;Info 알림의 예시 코드&#123;% endalert %&#125; Info 알림 결과 ! Highlight Text Highlight Text을 사용하는 방법 Highlight Text는 형광펜을 그은 처럼 작성하는 것 입니다. 일단 예시를 보도록 하겠습니다. 1. 첫번째 형광펜은 기본 문법으로 2. 두번째 형광펜은 hexa color 문법으로 문법은 다음과 같습니다.123&#123;% hl_text [(classes | hexa code | rgb color | rgba color)] %&#125; content&#123;% endhl_text %&#125; 파라미터 이름 값 red green blue purple orange Classes yellow cyan primary success warning danger 위에 보시는 [(classes | hexa code)]에 값을 넣고 작성하면 됩니다. 또한 hexa code로도 작성할 수 있습니다. 사용 코드 예시는 아래와 같습니다. 123456&lt;p&gt;&lt;!-- basic code --&gt;1. &#123;% hl_text orange %&#125;첫번째 형광펜&#123;% endhl_text %&#125;은 기본 문법으로&lt;br&gt;&lt;!-- hexa code --&gt;2. &#123;% hl_text #00FFFF %&#125;두번째 형광펜&#123;% endhl_text %&#125;은 hexa color 문법으로&lt;/p&gt; 1. 첫번째 형광펜은 기본 문법으로 2. 두번째 형광펜은 hexa color 문법으로","categories":[{"name":"devlog","slug":"devlog","permalink":"https://msnodeve.github.io/categories/devlog/"},{"name":"hexo","slug":"devlog/hexo","permalink":"https://msnodeve.github.io/categories/devlog/hexo/"}],"tags":[{"name":"Hexo","slug":"hexo","permalink":"https://msnodeve.github.io/tags/hexo/"},{"name":"Syntax","slug":"syntax","permalink":"https://msnodeve.github.io/tags/syntax/"}]},{"title":"SSAFY 3기를 시작하며![합격 후기]","slug":"story-ssafy-3rd","date":"2019-12-24T12:04:36.000Z","updated":"2020-03-13T11:27:23.006Z","comments":true,"path":"2019/12/24/story-ssafy-3rd/","link":"","permalink":"https://msnodeve.github.io/2019/12/24/story-ssafy-3rd/","excerpt":"SSAFYSamsung Software Academy For Youth(삼성 청년 소프트웨어 아카데미) 서울 지역에 합격했습니다! 😘 그런 의미로 이야기를 한 번 써내려 가려 합니다.","text":"SSAFYSamsung Software Academy For Youth(삼성 청년 소프트웨어 아카데미) 서울 지역에 합격했습니다! 😘 그런 의미로 이야기를 한 번 써내려 가려 합니다. 2018년 1월부터 1기, 1,000명 선발을 시작으로 2022년까지 총 10,000명을 선발한다고 했습니다! (저는 사실 SSAFY를 3기 모집 1달 전에 알게 되었어요…) 이렇게 보니 규모가 정말 상당하다라고 생각이 듭니다. 또한 이 아카데미를 듣는 동안 달마다 삼성전자의 이름으로 100만원의 지원금(취업을 한 것이 아니라서, 취직 지원금 까지 신청이 가능하다고 합니다!)을 받을 수 있다고 하니 정말 대단해요!(역시 갓성전자…) 매년 두 기수 씩 교육생을 선발하는 중이며, 저는 2020년 2월 졸업 예정자로써 3기로 지원했으며 합격해서 교육을 듣게 되었습니다! 그럼 이제 SSAFY 3기 모집은 언제 였으며, 어떻게 준비를 했는지 이야기를 하겠습니다. 😊😊 이 포스트는 다음과 같은 흐름으로 정리해 보았습니다. 1. SSAFY를 어떻게 알게 되었나? 2. SSAFY 교육 과정 3. SSAFY 선발 과정 4. SSAFY.. 어떻게 들어갔는가? 5. SSAFY 결과 발표 SSAFY를 어떻게 알게 되었나주변 사람들로 인해 알게 되었어요. 제가 SSAFY를 알기전에 삼성 청년 SW 아카데미 모집 설명회가 있었다고 하던데… 미리 알았다면 아마 가보지 않았을까.. 눈물이 나네요😭😭 SSAFY 모집 설명회 일정 및 장소 이미지의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다. 위와 같이 10월 28일 부터 시작해 10월 31일 까지 4일에 걸쳐 진행되었다고 합니다! 장소 관계 신청으로 인해 조기 마감이 될 수 있다고 하더라구요…(참여하면 소정의 기념품 까지 챙겨줬는데😭😭) 참여한 것이 아니라 정확한 내용을 알려 드리기에는 한계가 있어 링크를 남겨 드립니다! SSAFY 3기 모집 설명회 : https://webstudynote.tistory.com/23 이전에 SSAFY 올레 행사도 있었다고 하네요! SSAFY 올레 행사 후기 : https://webstudynote.tistory.com/19 SSAFY 교육 과정 교육 장소 : 전국 4개 지역(서울, 대전, 광주, 구미) 교육 기간 : 2020년 1월 6일(월) ~ 2020년 12월 31일(목) (12개월) 12개월 기간동안의 세부 과정은 아래 사진과 같습니다. 이미지의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다. 기본과정(5개월) : 기본적으로 컴퓨터와 관련된 지식을 습득하기 위한 기간이라고 보시면 될것 같습니다! 이 과정에서는 Computational Thinking, Algorithm, Computer language(Python, Java, C++…등등) 을 배울 예정이라고 하네요! 1차 Job Fair(1개월) : 5개월동안 과정을 진행하면서 성적 우수자 대상으로 해외 연수도 보내주며, 필요한 사람에 한해 보충수업도 제공된다고 하네요. 심화과정(5개월) : 제일 중요한 시점인 것 같습니다. 기본 과정을 진행하면서 습득한 기본 지식을 통해 팀을 꾸려 하나의 프로젝트를 만들어 내는 과정이며, 프로젝트를 진행하기에 앞서 멘토들도 계신다고 하니 정말 좋은 시간이 될 것 같아요! 2차 Job Fair(1개월) : SSAFY의 마지막 1개월 활동.. SSAFY에서 개인별 맞춤형 경력 설계를 도와주며, 그에 맞게 취업 활동 및 채용 정보도 잘 알려 준다고 합니다! 이 과정까지 수료하게 된다면 뿌듯하고, 즐거울 것 같습니다(한편으로는 슬플 수도 있을 거 같군요😭) SSAFY에서 총 12개월의 교육 기간을 통해 &quot;문제해결 능력을 갖춘 차세대 SW인력 양성&quot; 을 목표로 정말 실전형 SW 개발자로 거듭날 수 있을 것 같습니다! 😁😁 SSAFY 선발 과정지원 자격 부터 선발 과정까지 자세하게 보도록 하겠습니다! 😉 지원 자격대상 연령 : 만 29세 이하 (1990. 1. 1 이후 출생자) 학력 : 국내외 4년제 대학(학사 이상) 졸업자 및 2020.2월 졸업 예정자(전공 무관) 재직 여부 현재 미 취업자 대상 인터뷰일(2019.12.3)부터 본 교육 시작일(2020.1.6) 전까지 재직(예정)자 지원불가(사업장 건강보험 및 국민연금 가입 여부기준) ※ 교육기간 중 취업할 경우, 해당 업체 입사전에 개별적으로 퇴소 기타사항 교육시작일 교육 입과 가능한 자 교육기간 중 통학 가능한 자(별도 숙소 제공 없음) 병역필 또는 면제자로 해외여행에 결격 사유가 없는 자 이미지의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다. 위와 같이 4단계에 걸쳐 선발을 합니다! 이제 자세하게 알려 드리도록 하겠습니다 😁 SSAFY 어떻게 들어갔는가지금부터는 위에서 봤던 4단계를 어떻게 진행했는지, 어떤 생각으로 면접을 봤는지, 알려드릴 수 있는 범위에서 자세하게 알려 드리도록 하겠습니다. 지원서를 접수하기 위해서는 SSAFY 홈페이지를 접속해 회원가입 및 로그인 후 온라인으로 지원서를 작성 할 수 있어요. (회원 인증 메일 확인 사진을 올리고 싶었으나, 제 3자에게 공개 또는 배포, 복사하는 것을 엄격히 금지하고 있어 올리지 못했습니다) Step 1) 지원서 접수(2019.10.28 ~ 11.11)지원서 접수는 SSAFY 홈페이지에서 지원 가능했습니다. 지원서에는 다음과 같은 항목을 작성해야 했어요. 기본 인적 사항 : 이름, 생년월일, 성별, 휴대폰 번호, 비상 연락처, 이메일, 주소 기재 학력 사항 : 최종 학력, 입학 일 및 졸업 일, 전공, 만점 기준 취득 학점 기재 경력 및 어학 사항 : 경력(인턴 및 근무 경험), 병역 사항, 어학(외국어 자격증 등) 어학 자격증은 1도 없었어요. 😭그렇지만 해본 경험은 죄다 적었습니다. 😎 희망지역 및 진단일정 : 1지망, 2지망(서울, 대전, 광주, 구미 중 택 2), SW적성 검사 진단 일정 선택 희망지역 - 1지망(서울 : 멀티캠퍼스 교육센터), 2지망(대전 : 삼성화재 유성연수원)진단일전 - 11월 16일 토요일 10시, 12시 이렇게 2개가 있었어요. SW관련 활동 : 학교에서 배운 전공 학점 및 공통 학점 기재, 교육이수 / 개발경험 / 수상경력 기재 저는 전공자여서 그런지 학점을 기재하고 보니 많았어요!(한 페이지를 꽉 채운느낌?)개발 경험과 수상 경력이 좀 있었던 것 같아요! 있는 대로 죄다 작성했습니다. 😎 에세이 : 2가지의 질문이 있었습니다! 두 질문 모두 500자 이상의 글을 작성해야 했습니다. 첫 번째는 SSAFY를 지원하게 된 동기, 향후 진로가 어떻게 될지두 번째는 외부 활동을 하며 겪었던 경험에 대해서 물어 보았습니다. 부가 인적 사항 : 장애인, 기초생활수급자 / 차상위계층 지원서에서 가장 중요한 항목이였던 에세이.질문의 의도를 캐치하면 다음과 같이 생각해 낼 수 있었어요!내가 왜 SSAFY가 필요한지, 커리큘럼을 따라하면 내 미래가 어떻게 변할지에 대한 질문 이였던 것 같아요! Step 2) SW 적성 진단(11.16)SW 적성 진단은 총 60분 동안 진행 되었으며, 2가지의 온라인 테스트로 진행 되었습니다. 첫 번째 수리/추리 논리 능력 진단(30분)으로 말 그대로 수리, 추리, 논리 능력을 진단 하는 내용을 다뤘습니다.두 번째 Computational Thinking 진단(30분)으로 문제를 컴퓨터 적인 생각으로 알고리즘을 생각해 진단 하는 내용을 다뤘습니다.(코딩 테스트가 아닌가 라는 생각으로 겁 먹었지만, 주어진 문제를 계산(알고리즘 풀이) 해 단답형 으로 제출하는 형식이였습니다, 그러나 1문제 맞췄나…😅😅) 문제 유출은 금지 사항이므로 어떤 문제가 나왔는지는 말씀 드리기가 어렵군요! 별도 사항 진단 하는 동안 총 10번의 재 접속 가능 2개의 진단 모두 응시 선택한 시간 외 접속 불가 실제 진단에 필요한 보안 프로그램을 설치 후 응시 운영체제(OS) : Windows 7, Windows 8, Windows 10해상도 : 1280 X 1024 이상 해상도 사용 권장웹 브라우저 : Internet Explorer(10이상), Google Chrome(최신버전)저는 mac 유저지만.. 이 날 만큼은 Windows로 진단을 봤어요! SW 적성 진단을 하면서 느낀점은 “아… 시작부터 불합격이 뜨겠구나” 이였지만 의외로 대부분의 지원자들이 합격 소식을 많이 들었어요! (그렇지만 저는 왜 합격한지 아직도 감사할 나름…!) Step 3) Interview(12.3 ~ 12.5)삼성 청년 SW 아카데미 3기 Interview 대상자로 선정 되었지만, 준비를 어떻게 해야 하는지 몰랐고, SSAFY가 시작한지 1년이 되었지만 정보도 많이 없었던 것 같습니다. 먼저 Interview를 보기 전 온라인 사전 학습을 해야 했었는데요! 이는 안내 메일로 왔습니다. 온라인 사전 학습으로 3가지의 과정 중 1개의 과정을 선택해 학습을 진행하는 방식입니다. IT 트랜드 창의/열정 SW기초 학습 기간 : 2019.11.23(토) 00:00 ~ 11.28(목) 23:59(총 6일) 지정된 학습 일정 이외에는 수강 불가 유의 사항으로는 사전 학습 미 수료의 경우에도 인터뷰는 참석 가능하지만, 선발 절차 중 하나 이므로, 성실히 수강 해야한다고 했습니다. 사전 학습을 통해 관련 분야의 지식을 얻을 수 있는 유익한 시간이 되었습니다. 이제 대망의 SSAFY Interview… 저는 12월 5일 Interview를 진행했습니다. ■ 일시 : 2019. 12. 5(목) 9:15 예상 소요 시간 : 대기시간 포함 2시간 30분저는 한 2시간 정도 걸렸던 것 같습니다! 😁 ■ 장소 서울 삼성 금융 캠퍼스 ■ 내용 Interview 안내 서류 확인 2차 SW 적성진단 (CBT) Interview ■ 복장 Interview에 적합한 단정한 복장 ■ 준비물 필수 서류 [원본] 신분증 (주민등록증/운전면허증/유효기간 만료전 여권에 한함) 4대보험 가입내역 확인서 (가입여부 확인) 졸업(예정)증명서, 성적 증명서 (석사인 경우 학사/석사 모두 지참) 기타 서류 : 대상자에 한함 (지원서에 기재한 자격 증빙) [원본] : 병적(병역) 증명서, 어학성적 증명서, 장애인/기초생활수급 대상 확인서 [사본 가능] : 자격증, 수상내역 확인증, 경력 증명서 等 기타 서류 ※ 서울 外 지역에서 참석하시는 분들께는 소정의 면접비 지급 예정 (지원서에 기재한 주소 기준)(면접비 까지주는 이런…😭😭) 처음 Interview 보는 것 치고는 분위기가 좋았습니다.본인이 SSAFY가 왜 필요한지, 어떤 것을 해보고 싶은지 IT 관련해서 얼마나 관심을 갖고 있는지를 묻는 정말 제게 궁금한 점을 물어보는 인터뷰 시간이였습니다. 😲😲 본 Interview 내용은 보안 서약서를 작성 했기 때문에 Interview 진행 했던 사항은 말씀 드릴 수 없습니다! SSAFY 결과 발표길고도 긴… 기대하고 기대했던 결과 발표의 기다림… 🙏🙏2주 정도 기다린 것 같아요. 문자 메세지로 홈페이지에서 Interview 결과를 확인 하라고 왔습니다.기다리던 순간… 결과 확인을 누르기가 정말 떨렸어요. 😭 이미지의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다. Interview 결과 합격이라는 단어를 본 순간 소리 질렀네요(당시 서울에서 부산으로 내려가는 기차 안이였는데 😂)입과, 입과포기 란이있었는데 보자마자 입과 누르고 확인 했습니다. 이미지의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다. 그리고 결과 발표 하루 뒤에 문자로 최종 합격 문자가 왔어요.알고있던 결과라도 다시 확인하니 너무 행복했습니다. 😍😍 부족한 부분이 있었는지 모르겠네요!! 이렇게 해서 SSAFY 3기를 합격하게 되었습니다!좀 더 궁금한 사항이 있다면 댓글로 남겨주세요! 썸네일의 출처는 SSAFY(ssafy.com)에서 가져왔음을 밝힙니다.","categories":[{"name":"story","slug":"story","permalink":"https://msnodeve.github.io/categories/story/"},{"name":"ssafy","slug":"story/ssafy","permalink":"https://msnodeve.github.io/categories/story/ssafy/"}],"tags":[{"name":"SSAFY","slug":"ssafy","permalink":"https://msnodeve.github.io/tags/ssafy/"},{"name":"Samsung","slug":"samsung","permalink":"https://msnodeve.github.io/tags/samsung/"},{"name":"Academy","slug":"academy","permalink":"https://msnodeve.github.io/tags/academy/"},{"name":"Software","slug":"software","permalink":"https://msnodeve.github.io/tags/software/"}]},{"title":"Linux, CentOS 작업 스케쥴러 - Crontab","slug":"devlog-linux-crontab","date":"2019-12-09T07:46:52.000Z","updated":"2020-03-17T08:15:44.314Z","comments":true,"path":"2019/12/09/devlog-linux-crontab/","link":"","permalink":"https://msnodeve.github.io/2019/12/09/devlog-linux-crontab/","excerpt":"Crontab?Cron 은 리눅스 에서 특정한 명령이나 스크립트를 지정한 날짜/시간에 자동으로 실행해 주는 스케쥴러 입니다. 주기적으로 시스템 백업 스크립트를 실행하는 등 시스템 관리자에 의해 많이 사용되며, 이외 반복적인 작업을 하기위해 사용될 수 있습니다.","text":"Crontab?Cron 은 리눅스 에서 특정한 명령이나 스크립트를 지정한 날짜/시간에 자동으로 실행해 주는 스케쥴러 입니다. 주기적으로 시스템 백업 스크립트를 실행하는 등 시스템 관리자에 의해 많이 사용되며, 이외 반복적인 작업을 하기위해 사용될 수 있습니다. Crontab 활용 용도 30분 단위로 이메일을 전송 할 때 매주 일요일 새벽 4시에 서버를 재 시작 할 때 위와 같이 반복적인 예약 작업이 필요할 때 다양하게 활용할 수 있는 도구 입니다. Install crontab - CentOSyum 을 통해 Crontab 을 설치합니다. 1$ yum -y install cronie Crontab 설치가 완료 되었다면, Crontab 서비스가 잘 작동 하고 있는지 확인합니다. 1234567$ systemctl start crond$ systemctl list-unit-filesUNIT FILE STATE...crond.service enabled... How to use crontab?Crontab 리스트 조회1$ crontab -l crontab에 등록된 스케쥴러 작업 리스트를 확인합니다. Crontab 편집1$ crontab -e crontab 예약 작업 리스트를 편집 할 수 있는 에디터가 실행 되며, 편집합니다. Crontab 리스트 삭제1$ crontab -r crontab에 등록된 모든 스케쥴러 작업 리스트를 삭제합니다. Crontab 작성 방법123456789* * * * * 수행할 명령어┬ ┬ ┬ ┬ ┬│ │ │ │ ││ │ │ │ ││ │ │ │ └───────── 요일 (0 - 6) (0:일요일, 1:월요일, 2:화요일, …, 6:토요일)│ │ │ └───────── 월 (1 - 12)│ │ └───────── 일 (1 - 31)│ └───────── 시 (0 - 23)└───────── 분 (0 - 59) crontab -e 명령어를 사용해 위와 같은 형식으로 스케쥴러를 등록합니다. Example crontab간단한 텍스트를 파일에 쓰는 것을 해보겠습니다. 1$ crontab -e crontab 편집기를 열고 작업을 등록합니다. 1* * * * * echo \"Hello 두번 개발하는 블로그\" &gt;&gt; ~/test.txt ESC + qw 저장하고 밖으로 빠져 나옵니다. 1분이 지나게 되면 root 경로에 test.txt 파일이 생긴 것을 볼 수 있으며, 파일 내부에는 Hello 두번 개발하는 블로그 라는 텍스트가 작성 되어 있는 것을 볼 수 있습니다. 다른 예제특정 시간에 실행 1 매주 일요일 새벽 4시 20분에 test! 텍스트를 root 경로 밑 test.txt 파일에 작성 120 4 * * 0 echo \"test!\" &gt;&gt; ~/test.txt 특정 시간에 실행 2 매주 화요일 오후 1시 30분, 40분, 50분에 test! 텍스트를 root 경로 밑 test.txt 파일에 작성 110,20,30 13 * * 2 echo \"test!\" &gt;&gt; ~/test.txt Crontab 작성 기호 종류1234* # 범위 내 모두 실행, # 나열된 숫자 중 일치하는 값에 실행- # 두 숫자 사이에 포함된 범위에 실행/ # 지정한 숫자에 실행","categories":[{"name":"devlog","slug":"devlog","permalink":"https://msnodeve.github.io/categories/devlog/"},{"name":"linux","slug":"devlog/linux","permalink":"https://msnodeve.github.io/categories/devlog/linux/"}],"tags":[{"name":"Linux","slug":"linux","permalink":"https://msnodeve.github.io/tags/linux/"},{"name":"CentOS","slug":"centos","permalink":"https://msnodeve.github.io/tags/centos/"},{"name":"Infra","slug":"infra","permalink":"https://msnodeve.github.io/tags/infra/"},{"name":"Cron","slug":"cron","permalink":"https://msnodeve.github.io/tags/cron/"},{"name":"Crontab","slug":"crontab","permalink":"https://msnodeve.github.io/tags/crontab/"}]}]}